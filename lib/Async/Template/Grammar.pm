#============================================================= -*-Perl-*-
#
# Async::Template::Grammar
#
# DESCRIPTION
#   This file based on Template::Grammar ftom Template Toolkit
#   Grammar file for the Template Toolkit language containing token
#   definitions and parser state/rules tables generated by Parse::Yapp.
#
# AUTHOR
#   Andy Wardley   <abw@wardley.org>
#   Serguei Okladnikov <oklas@cpan.org> (EVENTs and some features)
#
# COPYRIGHT
#   Copyright (C) 1996-2006 Andy Wardley.  All Rights Reserved.
#   Copyright (C) 1998-2000 Canon Research Centre Europe Ltd.
#   Copyright (C) 2012-2012 Serguei Okladnikov
#
#   This module is free software; you can redistribute it and/or
#   modify it under the same terms as Perl itself.
#
# REVISION
#   $Id$
#
# IMPORTANT NOTE
#   This module is constructed from the parser/Grammar.pm.skel file by
#   running the parser/yc script.  You only need to do this if # you
#   have modified the grammar in the parser/Parser.yp file and need #
#   to-recompile it.  See the README in the 'parser' directory for
#   more information (sub-directory of the Template distribution).
#
#========================================================================

package Async::Template::Grammar;

use strict;
use warnings;

our $VERSION  = 2.25;

my (@RESERVED, %CMPOP, $LEXTABLE, $RULES, $STATES);
my ($factory, $rawstart);


#========================================================================

# Reserved words, comparison and binary operators
#========================================================================

@RESERVED = qw( 
	GET CALL SET DEFAULT INSERT INCLUDE PROCESS WRAPPER BLOCK END
	USE PLUGIN FILTER MACRO PERL RAWPERL TO STEP AND OR NOT DIV MOD
	IF UNLESS ELSE ELSIF FOR NEXT WHILE SWITCH CASE META IN
	TRY THROW CATCH FINAL LAST RETURN STOP CLEAR VIEW DEBUG
        EVENT
    );

# for historical reasons, != and == are converted to ne and eq to perform 
# stringwise comparison (mainly because it doesn't generate "non-numerical 
# comparison" warnings which != and == can) but the others (e.g. < > <= >=)
# are not converted to their stringwise equivalents.  I added 'gt' et al, 
# briefly for v2.04d and then took them out again in 2.04e.


%CMPOP = qw( 
    != ne
    == eq
    <  <
    >  >
    >= >=
    <= <=
);

#    eq eq  # add these lines to the above to 
#    lt lt  # enable the eq, lt and gt operators      
#    gt gt

#========================================================================
# Lexer Token Table
#========================================================================

# lookup table used by lexer is initialised with special-cases
$LEXTABLE = {
    'FOREACH' => 'FOR',
    'BREAK'   => 'LAST',
    '&&'      => 'AND',
    '||'      => 'OR',
    '!'       => 'NOT',
    '|'	      => 'FILTER',
    '.'       => 'DOT',
    '_'       => 'CAT',
    '..'      => 'TO',
#    ':'       => 'MACRO',
    '='       => 'ASSIGN',
    '=>'      => 'ASSIGN',
#    '->'      => 'ARROW',
    ','       => 'COMMA',
    '\\'      => 'REF',
    'and'     => 'AND',		# explicitly specified so that qw( and or
    'or'      => 'OR',		# not ) can always be used in lower case, 
    'not'     => 'NOT',		# regardless of ANYCASE flag
    'mod'     => 'MOD',
    'div'     => 'DIV',
};

# localise the temporary variables needed to complete lexer table
{ 
#    my @tokens = qw< ( ) [ ] { } ${ $ / ; : ? >;
    my @tokens = qw< ( ) [ ] { } ${ $ + / ; : ? >;
    my @cmpop  = keys %CMPOP;
#    my @binop  = qw( + - * % );              # '/' above, in @tokens
    my @binop  = qw( - * % );              # '+' and '/' above, in @tokens

    # fill lexer table, slice by slice, with reserved words and operators
    @$LEXTABLE{ @RESERVED, @cmpop, @binop, @tokens } 
	= ( @RESERVED, ('CMPOP') x @cmpop, ('BINOP') x @binop, @tokens );
}


#========================================================================
# CLASS METHODS
#========================================================================

sub new {
    my $class = shift;
    bless {
	LEXTABLE => $LEXTABLE,
	STATES   => $STATES,
	RULES    => $RULES,
    }, $class;
}

# update method to set package-scoped $factory lexical 
sub install_factory {
    my ($self, $new_factory) = @_;
    $factory = $new_factory;
}


#========================================================================
# States
#========================================================================

$STATES = [
	{#State 0
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 51,
			"\$" => 50,
			'STOP' => 8,
			'CALL' => 52,
			'THROW' => 10,
			'GET' => 54,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 56,
			'DEBUG' => 58,
			'RAWPERL' => 15,
			'META' => 17,
			'INCLUDE' => 19,
			"(" => 64,
			'SWITCH' => 65,
			'MACRO' => 20,
			'WRAPPER' => 68,
			";" => -33,
			'FOR' => 23,
			'LITERAL' => 70,
			'NEXT' => 25,
			"\"" => 74,
			'TEXT' => 27,
			'PROCESS' => 77,
			'RETURN' => 78,
			'FILTER' => 28,
			'INSERT' => 79,
			'NUMBER' => 29,
			'REF' => 30,
			'WHILE' => 81,
			'BLOCK' => 31,
			'DEFAULT' => 83,
			"{" => 33,
			'USE' => 35,
			'VIEW' => 39,
			'EVENT' => 40,
			"\${" => 41
		},
		DEFAULT => -9,
		GOTOS => {
			'event_switch' => 2,
			'loopforvar' => 42,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'defblock_ev' => 48,
			'capture' => 49,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 53,
			'atomexpr' => 55,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 57,
			'template' => 59,
			'defblockname' => 16,
			'event_process' => 60,
			'loopwhilevar' => 61,
			'event' => 62,
			'ident' => 18,
			'event_template' => 63,
			'event_loop' => 66,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 67,
			'event_plug' => 69,
			'defblock_std' => 24,
			'finalblock' => 71,
			'node' => 26,
			'rawperl' => 73,
			'term' => 72,
			'use' => 76,
			'expr' => 75,
			'defblock' => 80,
			'sterm' => 82,
			'filter' => 32,
			'eventblock' => 84,
			'perl' => 34,
			'setlist' => 85,
			'chunks' => 36,
			'switch' => 37,
			'try' => 38,
			'directive' => 86,
			'condition' => 87
		}
	},
	{#State 1
		ACTIONS => {
			"\$" => 50,
			'LITERAL' => 89,
			'IDENT' => 4,
			"\${" => 41
		},
		GOTOS => {
			'setlist' => 90,
			'item' => 44,
			'assign' => 21,
			'node' => 26,
			'ident' => 88
		}
	},
	{#State 2
		DEFAULT => -16
	},
	{#State 3
		DEFAULT => -90
	},
	{#State 4
		DEFAULT => -168
	},
	{#State 5
		ACTIONS => {
			'NOT' => 43,
			"{" => 33,
			'LITERAL' => 92,
			'IDENT' => 4,
			"\"" => 74,
			"(" => 64,
			"\$" => 50,
			"[" => 11,
			'NUMBER' => 29,
			'REF' => 30,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 93,
			'sterm' => 82,
			'item' => 44,
			'node' => 26,
			'ident' => 91,
			'term' => 72,
			'lterm' => 67
		}
	},
	{#State 6
		DEFAULT => -38
	},
	{#State 7
		ACTIONS => {
			";" => 94
		}
	},
	{#State 8
		DEFAULT => -50
	},
	{#State 9
		DEFAULT => -29
	},
	{#State 10
		ACTIONS => {
			"\"" => 103,
			"\$" => 100,
			'LITERAL' => 102,
			'FILENAME' => 97,
			'IDENT' => 95,
			'NUMBER' => 98
		},
		GOTOS => {
			'filepart' => 101,
			'names' => 105,
			'nameargs' => 104,
			'filename' => 99,
			'name' => 96
		}
	},
	{#State 11
		ACTIONS => {
			"{" => 33,
			'LITERAL' => 92,
			'IDENT' => 4,
			"\"" => 74,
			"\$" => 50,
			"[" => 11,
			'NUMBER' => 29,
			'REF' => 30,
			"]" => 108,
			"\${" => 41
		},
		GOTOS => {
			'sterm' => 110,
			'item' => 44,
			'range' => 107,
			'node' => 26,
			'ident' => 91,
			'term' => 109,
			'lterm' => 67,
			'list' => 106
		}
	},
	{#State 12
		ACTIONS => {
			";" => 111
		}
	},
	{#State 13
		DEFAULT => -13
	},
	{#State 14
		ACTIONS => {
			";" => -35
		},
		DEFAULT => -42
	},
	{#State 15
		DEFAULT => -113,
		GOTOS => {
			'@3-1' => 112
		}
	},
	{#State 16
		ACTIONS => {
			'IDENT' => 113
		},
		DEFAULT => -125,
		GOTOS => {
			'blockargs' => 116,
			'metadata' => 115,
			'meta' => 114
		}
	},
	{#State 17
		ACTIONS => {
			'IDENT' => 113
		},
		GOTOS => {
			'metadata' => 117,
			'meta' => 114
		}
	},
	{#State 18
		ACTIONS => {
			'DOT' => 118,
			'ASSIGN' => 119
		},
		DEFAULT => -147
	},
	{#State 19
		ACTIONS => {
			"\"" => 103,
			"\$" => 100,
			'LITERAL' => 102,
			'FILENAME' => 97,
			'IDENT' => 95,
			'NUMBER' => 98
		},
		GOTOS => {
			'filepart' => 101,
			'names' => 105,
			'nameargs' => 120,
			'filename' => 99,
			'name' => 96
		}
	},
	{#State 20
		ACTIONS => {
			'IDENT' => 121
		}
	},
	{#State 21
		DEFAULT => -187
	},
	{#State 22
		DEFAULT => -27
	},
	{#State 23
		ACTIONS => {
			"{" => 33,
			'LITERAL' => 92,
			'IDENT' => 122,
			"\"" => 74,
			"\$" => 50,
			"[" => 11,
			'NUMBER' => 29,
			'REF' => 30,
			"\${" => 41
		},
		GOTOS => {
			'sterm' => 82,
			'item' => 44,
			'loopvar' => 124,
			'node' => 26,
			'ident' => 91,
			'term' => 123,
			'lterm' => 67
		}
	},
	{#State 24
		DEFAULT => -118
	},
	{#State 25
		DEFAULT => -53
	},
	{#State 26
		DEFAULT => -165
	},
	{#State 27
		DEFAULT => -21
	},
	{#State 28
		ACTIONS => {
			"\"" => 131,
			"\$" => 128,
			'LITERAL' => 130,
			'FILENAME' => 97,
			'IDENT' => 125,
			'NUMBER' => 98,
			"\${" => 41
		},
		GOTOS => {
			'names' => 105,
			'lvalue' => 126,
			'item' => 127,
			'name' => 96,
			'filepart' => 101,
			'filename' => 99,
			'nameargs' => 132,
			'lnameargs' => 129
		}
	},
	{#State 29
		DEFAULT => -151
	},
	{#State 30
		ACTIONS => {
			"\$" => 50,
			'IDENT' => 4,
			"\${" => 41
		},
		GOTOS => {
			'item' => 44,
			'node' => 26,
			'ident' => 133
		}
	},
	{#State 31
		ACTIONS => {
			'LITERAL' => 138,
			'FILENAME' => 97,
			'IDENT' => 134,
			'NUMBER' => 98
		},
		DEFAULT => -125,
		GOTOS => {
			'blockargs' => 137,
			'filepart' => 101,
			'filename' => 136,
			'blockname' => 135,
			'metadata' => 115,
			'meta' => 114
		}
	},
	{#State 32
		DEFAULT => -56
	},
	{#State 33
		ACTIONS => {
			"\$" => 50,
			'LITERAL' => 143,
			'IDENT' => 4,
			"\${" => 41
		},
		DEFAULT => -157,
		GOTOS => {
			'params' => 142,
			'hash' => 139,
			'item' => 140,
			'param' => 141
		}
	},
	{#State 34
		DEFAULT => -40
	},
	{#State 35
		ACTIONS => {
			"\"" => 131,
			"\$" => 128,
			'LITERAL' => 130,
			'FILENAME' => 97,
			'IDENT' => 125,
			'NUMBER' => 98,
			"\${" => 41
		},
		GOTOS => {
			'names' => 105,
			'lvalue' => 126,
			'item' => 127,
			'name' => 96,
			'filepart' => 101,
			'filename' => 99,
			'nameargs' => 132,
			'lnameargs' => 144
		}
	},
	{#State 36
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 51,
			"\$" => 50,
			'STOP' => 8,
			'CALL' => 52,
			'THROW' => 10,
			'GET' => 54,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 56,
			'DEBUG' => 58,
			'RAWPERL' => 15,
			'META' => 17,
			'INCLUDE' => 19,
			"(" => 64,
			'SWITCH' => 65,
			'MACRO' => 20,
			'WRAPPER' => 68,
			";" => -33,
			'FOR' => 23,
			'LITERAL' => 70,
			'NEXT' => 25,
			"\"" => 74,
			'TEXT' => 27,
			'PROCESS' => 77,
			'RETURN' => 78,
			'FILTER' => 28,
			'INSERT' => 79,
			'NUMBER' => 29,
			'REF' => 30,
			'WHILE' => 81,
			'BLOCK' => 31,
			'DEFAULT' => 83,
			"{" => 33,
			'USE' => 35,
			'VIEW' => 39,
			'EVENT' => 40,
			"\${" => 41
		},
		DEFAULT => -8,
		GOTOS => {
			'event_switch' => 2,
			'loopforvar' => 42,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'defblock_ev' => 48,
			'capture' => 49,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 53,
			'atomexpr' => 55,
			'chunk' => 145,
			'atomdir' => 14,
			'anonblock' => 57,
			'defblockname' => 16,
			'event_process' => 60,
			'loopwhilevar' => 61,
			'event' => 146,
			'ident' => 18,
			'event_loop' => 66,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 67,
			'event_plug' => 69,
			'defblock_std' => 24,
			'node' => 26,
			'rawperl' => 73,
			'term' => 72,
			'use' => 76,
			'expr' => 75,
			'defblock' => 80,
			'sterm' => 82,
			'filter' => 32,
			'perl' => 34,
			'setlist' => 85,
			'try' => 38,
			'switch' => 37,
			'directive' => 86,
			'condition' => 87
		}
	},
	{#State 37
		DEFAULT => -37
	},
	{#State 38
		DEFAULT => -39
	},
	{#State 39
		ACTIONS => {
			"\"" => 103,
			"\$" => 100,
			'LITERAL' => 102,
			'FILENAME' => 97,
			'IDENT' => 95,
			'NUMBER' => 98
		},
		GOTOS => {
			'filepart' => 101,
			'names' => 105,
			'nameargs' => 147,
			'filename' => 99,
			'name' => 96
		}
	},
	{#State 40
		ACTIONS => {
			"\$" => 50,
			'IDENT' => 148,
			"\${" => 41
		},
		GOTOS => {
			'eventvar' => 150,
			'item' => 44,
			'node' => 26,
			'ident' => 149
		}
	},
	{#State 41
		ACTIONS => {
			"\"" => 74,
			"\$" => 50,
			'LITERAL' => 92,
			'IDENT' => 4,
			'REF' => 30,
			'NUMBER' => 29,
			"\${" => 41
		},
		GOTOS => {
			'sterm' => 151,
			'item' => 44,
			'node' => 26,
			'ident' => 91
		}
	},
	{#State 42
		ACTIONS => {
			";" => 152
		}
	},
	{#State 43
		ACTIONS => {
			'NOT' => 43,
			"{" => 33,
			'LITERAL' => 92,
			'IDENT' => 4,
			"\"" => 74,
			"(" => 64,
			"\$" => 50,
			"[" => 11,
			'NUMBER' => 29,
			'REF' => 30,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 153,
			'sterm' => 82,
			'item' => 44,
			'node' => 26,
			'ident' => 91,
			'term' => 72,
			'lterm' => 67
		}
	},
	{#State 44
		ACTIONS => {
			"(" => 154
		},
		DEFAULT => -166
	},
	{#State 45
		DEFAULT => -89
	},
	{#State 46
		ACTIONS => {
			";" => 155
		}
	},
	{#State 47
		DEFAULT => -51
	},
	{#State 48
		DEFAULT => -117
	},
	{#State 49
		DEFAULT => -26
	},
	{#State 50
		ACTIONS => {
			'IDENT' => 156
		}
	},
	{#State 51
		ACTIONS => {
			'NOT' => 43,
			"{" => 33,
			'LITERAL' => 92,
			'IDENT' => 4,
			"\"" => 74,
			"(" => 64,
			"\$" => 50,
			"[" => 11,
			'NUMBER' => 29,
			'REF' => 30,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 157,
			'sterm' => 82,
			'item' => 44,
			'node' => 26,
			'ident' => 91,
			'term' => 72,
			'lterm' => 67
		}
	},
	{#State 52
		ACTIONS => {
			'NOT' => 43,
			"{" => 33,
			'LITERAL' => 92,
			'IDENT' => 4,
			"\"" => 74,
			"(" => 64,
			"\$" => 50,
			"[" => 11,
			'NUMBER' => 29,
			'REF' => 30,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 158,
			'sterm' => 82,
			'item' => 44,
			'node' => 26,
			'ident' => 91,
			'term' => 72,
			'lterm' => 67
		}
	},
	{#State 53
		DEFAULT => -55
	},
	{#State 54
		ACTIONS => {
			'NOT' => 43,
			"{" => 33,
			'LITERAL' => 92,
			'IDENT' => 4,
			"\"" => 74,
			"(" => 64,
			"\$" => 50,
			"[" => 11,
			'NUMBER' => 29,
			'REF' => 30,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 159,
			'sterm' => 82,
			'item' => 44,
			'node' => 26,
			'ident' => 91,
			'term' => 72,
			'lterm' => 67
		}
	},
	{#State 55
		ACTIONS => {
			'IF' => 163,
			'FILTER' => 162,
			'FOR' => 161,
			'WHILE' => 165,
			'WRAPPER' => 164,
			'UNLESS' => 160
		}
	},
	{#State 56
		DEFAULT => -52
	},
	{#State 57
		DEFAULT => -25
	},
	{#State 58
		ACTIONS => {
			"\"" => 103,
			"\$" => 100,
			'LITERAL' => 102,
			'FILENAME' => 97,
			'IDENT' => 95,
			'NUMBER' => 98
		},
		GOTOS => {
			'filepart' => 101,
			'names' => 105,
			'nameargs' => 166,
			'filename' => 99,
			'name' => 96
		}
	},
	{#State 59
		ACTIONS => {
			'' => 167
		}
	},
	{#State 60
		DEFAULT => -17
	},
	{#State 61
		ACTIONS => {
			";" => 168
		}
	},
	{#State 62
		DEFAULT => -7
	},
	{#State 63
		DEFAULT => -1
	},
	{#State 64
		ACTIONS => {
			'NOT' => 43,
			"{" => 33,
			'LITERAL' => 70,
			'IDENT' => 4,
			"\"" => 74,
			"(" => 64,
			"\$" => 50,
			"[" => 11,
			'NUMBER' => 29,
			'REF' => 30,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 171,
			'sterm' => 82,
			'item' => 44,
			'assign' => 170,
			'node' => 26,
			'ident' => 169,
			'term' => 72,
			'lterm' => 67
		}
	},
	{#State 65
		ACTIONS => {
			'NOT' => 43,
			"{" => 33,
			'LITERAL' => 92,
			'IDENT' => 4,
			"\"" => 74,
			"(" => 64,
			"\$" => 50,
			"[" => 11,
			'NUMBER' => 29,
			'REF' => 30,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 172,
			'sterm' => 82,
			'item' => 44,
			'node' => 26,
			'ident' => 91,
			'term' => 72,
			'lterm' => 67
		}
	},
	{#State 66
		DEFAULT => -15
	},
	{#State 67
		DEFAULT => -141
	},
	{#State 68
		ACTIONS => {
			"\"" => 103,
			"\$" => 100,
			'LITERAL' => 102,
			'FILENAME' => 97,
			'IDENT' => 95,
			'NUMBER' => 98
		},
		GOTOS => {
			'filepart' => 101,
			'names' => 105,
			'nameargs' => 173,
			'filename' => 99,
			'name' => 96
		}
	},
	{#State 69
		DEFAULT => -14
	},
	{#State 70
		ACTIONS => {
			'ASSIGN' => 174
		},
		DEFAULT => -150
	},
	{#State 71
		ACTIONS => {
			'END' => 175
		},
		DEFAULT => -5
	},
	{#State 72
		DEFAULT => -184
	},
	{#State 73
		DEFAULT => -30
	},
	{#State 74
		DEFAULT => -214,
		GOTOS => {
			'quoted' => 176
		}
	},
	{#State 75
		ACTIONS => {
			";" => -31,
			"+" => 177,
			'CAT' => 183,
			'CMPOP' => 184,
			"?" => 178,
			'DIV' => 179,
			'MOD' => 185,
			"/" => 186,
			'AND' => 180,
			'BINOP' => 181,
			'OR' => 182
		},
		DEFAULT => -41
	},
	{#State 76
		DEFAULT => -28
	},
	{#State 77
		ACTIONS => {
			"\"" => 103,
			"\$" => 100,
			'LITERAL' => 102,
			'FILENAME' => 97,
			'IDENT' => 95,
			'NUMBER' => 98
		},
		GOTOS => {
			'filepart' => 101,
			'names' => 105,
			'nameargs' => 187,
			'filename' => 99,
			'name' => 96
		}
	},
	{#State 78
		DEFAULT => -49
	},
	{#State 79
		ACTIONS => {
			"\"" => 103,
			"\$" => 100,
			'LITERAL' => 102,
			'FILENAME' => 97,
			'IDENT' => 95,
			'NUMBER' => 98
		},
		GOTOS => {
			'filepart' => 101,
			'names' => 105,
			'nameargs' => 188,
			'filename' => 99,
			'name' => 96
		}
	},
	{#State 80
		DEFAULT => -24
	},
	{#State 81
		ACTIONS => {
			'NOT' => 43,
			"{" => 33,
			'LITERAL' => 92,
			'IDENT' => 4,
			"\"" => 74,
			"(" => 64,
			"\$" => 50,
			"[" => 11,
			'NUMBER' => 29,
			'REF' => 30,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 189,
			'sterm' => 82,
			'item' => 44,
			'node' => 26,
			'ident' => 91,
			'term' => 72,
			'lterm' => 67
		}
	},
	{#State 82
		DEFAULT => -142
	},
	{#State 83
		ACTIONS => {
			"\$" => 50,
			'LITERAL' => 89,
			'IDENT' => 4,
			"\${" => 41
		},
		GOTOS => {
			'setlist' => 190,
			'item' => 44,
			'assign' => 21,
			'node' => 26,
			'ident' => 88
		}
	},
	{#State 84
		ACTIONS => {
			'END' => 191
		},
		DEFAULT => -4
	},
	{#State 85
		ACTIONS => {
			"\$" => 50,
			'COMMA' => 193,
			'LITERAL' => 89,
			'IDENT' => 4,
			"\${" => 41
		},
		DEFAULT => -34,
		GOTOS => {
			'item' => 44,
			'assign' => 192,
			'node' => 26,
			'ident' => 88
		}
	},
	{#State 86
		DEFAULT => -23
	},
	{#State 87
		DEFAULT => -36
	},
	{#State 88
		ACTIONS => {
			'ASSIGN' => 194,
			'DOT' => 118
		}
	},
	{#State 89
		ACTIONS => {
			'ASSIGN' => 174
		}
	},
	{#State 90
		ACTIONS => {
			'COMMA' => 193,
			'LITERAL' => 89,
			'IDENT' => 4,
			"\$" => 50,
			"\${" => 41
		},
		DEFAULT => -45,
		GOTOS => {
			'item' => 44,
			'assign' => 192,
			'node' => 26,
			'ident' => 88
		}
	},
	{#State 91
		ACTIONS => {
			'DOT' => 118
		},
		DEFAULT => -147
	},
	{#State 92
		DEFAULT => -150
	},
	{#State 93
		ACTIONS => {
			'CMPOP' => 184,
			"?" => 178,
			";" => 195,
			"+" => 177,
			'MOD' => 185,
			'DIV' => 179,
			"/" => 186,
			'AND' => 180,
			'CAT' => 183,
			'BINOP' => 181,
			'OR' => 182
		}
	},
	{#State 94
		DEFAULT => -22
	},
	{#State 95
		DEFAULT => -211
	},
	{#State 96
		DEFAULT => -204
	},
	{#State 97
		DEFAULT => -210
	},
	{#State 98
		DEFAULT => -212
	},
	{#State 99
		ACTIONS => {
			'DOT' => 196
		},
		DEFAULT => -206
	},
	{#State 100
		ACTIONS => {
			"\$" => 50,
			'IDENT' => 4,
			"\${" => 41
		},
		GOTOS => {
			'item' => 44,
			'node' => 26,
			'ident' => 197
		}
	},
	{#State 101
		DEFAULT => -209
	},
	{#State 102
		DEFAULT => -207
	},
	{#State 103
		DEFAULT => -214,
		GOTOS => {
			'quoted' => 198
		}
	},
	{#State 104
		DEFAULT => -48
	},
	{#State 105
		ACTIONS => {
			"(" => 200,
			"+" => 199
		},
		DEFAULT => -194,
		GOTOS => {
			'args' => 201
		}
	},
	{#State 106
		ACTIONS => {
			"{" => 33,
			'COMMA' => 204,
			'LITERAL' => 92,
			'IDENT' => 4,
			"\"" => 74,
			"\$" => 50,
			"[" => 11,
			'NUMBER' => 29,
			'REF' => 30,
			"]" => 202,
			"\${" => 41
		},
		GOTOS => {
			'sterm' => 82,
			'item' => 44,
			'node' => 26,
			'ident' => 91,
			'term' => 203,
			'lterm' => 67
		}
	},
	{#State 107
		ACTIONS => {
			"]" => 205
		}
	},
	{#State 108
		DEFAULT => -145
	},
	{#State 109
		DEFAULT => -154
	},
	{#State 110
		ACTIONS => {
			'TO' => 206
		},
		DEFAULT => -142
	},
	{#State 111
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 51,
			"\$" => 50,
			'STOP' => 8,
			'CALL' => 52,
			'THROW' => 10,
			'GET' => 54,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 56,
			'DEBUG' => 58,
			'RAWPERL' => 15,
			'META' => 17,
			"(" => 64,
			'SWITCH' => 210,
			'MACRO' => 20,
			'WRAPPER' => 68,
			";" => -33,
			'FOR' => 23,
			'LITERAL' => 70,
			'NEXT' => 25,
			"\"" => 74,
			'TEXT' => 27,
			'RETURN' => 78,
			'FILTER' => 28,
			'INSERT' => 79,
			'NUMBER' => 29,
			'REF' => 30,
			'WHILE' => 81,
			'BLOCK' => 31,
			'DEFAULT' => 83,
			"{" => 33,
			'USE' => 35,
			'VIEW' => 39,
			"\${" => 41
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 208,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'defblock_ev' => 48,
			'capture' => 49,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 53,
			'atomexpr' => 55,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 57,
			'defblockname' => 16,
			'loopwhilevar' => 209,
			'ident' => 18,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 67,
			'defblock_std' => 24,
			'node' => 26,
			'term' => 72,
			'rawperl' => 73,
			'expr' => 75,
			'use' => 76,
			'defblock' => 80,
			'sterm' => 82,
			'filter' => 32,
			'perl' => 34,
			'setlist' => 85,
			'chunks' => 207,
			'try' => 38,
			'switch' => 37,
			'block' => 211,
			'directive' => 86,
			'condition' => 87
		}
	},
	{#State 112
		ACTIONS => {
			";" => 212
		}
	},
	{#State 113
		ACTIONS => {
			'ASSIGN' => 213
		}
	},
	{#State 114
		DEFAULT => -137
	},
	{#State 115
		ACTIONS => {
			'COMMA' => 215,
			'IDENT' => 113
		},
		DEFAULT => -124,
		GOTOS => {
			'meta' => 214
		}
	},
	{#State 116
		ACTIONS => {
			";" => 216
		}
	},
	{#State 117
		ACTIONS => {
			'COMMA' => 215,
			'IDENT' => 113
		},
		DEFAULT => -32,
		GOTOS => {
			'meta' => 214
		}
	},
	{#State 118
		ACTIONS => {
			"\$" => 50,
			'IDENT' => 4,
			'NUMBER' => 218,
			"\${" => 41
		},
		GOTOS => {
			'item' => 44,
			'node' => 217
		}
	},
	{#State 119
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 51,
			"\$" => 50,
			'STOP' => 8,
			'CALL' => 52,
			'THROW' => 10,
			'GET' => 54,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 56,
			'DEBUG' => 58,
			"(" => 64,
			'SWITCH' => 210,
			'WRAPPER' => 68,
			'FOR' => 23,
			'NEXT' => 25,
			'LITERAL' => 70,
			"\"" => 74,
			'FILTER' => 28,
			'RETURN' => 78,
			'INSERT' => 79,
			'NUMBER' => 29,
			'REF' => 30,
			'WHILE' => 81,
			'BLOCK' => 219,
			"{" => 33,
			'DEFAULT' => 83,
			"\${" => 41
		},
		GOTOS => {
			'loopforvar' => 208,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'node' => 26,
			'term' => 72,
			'loop' => 6,
			'expr' => 221,
			'wrapper' => 53,
			'atomexpr' => 55,
			'atomdir' => 14,
			'mdir' => 220,
			'sterm' => 82,
			'filter' => 32,
			'loopwhilevar' => 209,
			'ident' => 169,
			'perl' => 34,
			'setlist' => 85,
			'try' => 38,
			'switch' => 37,
			'assign' => 21,
			'directive' => 222,
			'condition' => 87,
			'lterm' => 67
		}
	},
	{#State 120
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 51,
			"\$" => 50,
			'STOP' => 8,
			'CALL' => 52,
			'THROW' => 10,
			'GET' => 54,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 56,
			'DEBUG' => 58,
			'RAWPERL' => 15,
			'META' => 17,
			'INCLUDE' => 19,
			"(" => 64,
			'SWITCH' => 65,
			'MACRO' => 20,
			'WRAPPER' => 68,
			";" => -33,
			'FOR' => 23,
			'LITERAL' => 70,
			'NEXT' => 25,
			"\"" => 74,
			'TEXT' => 27,
			'PROCESS' => 77,
			'RETURN' => 78,
			'FILTER' => 28,
			'INSERT' => 79,
			'NUMBER' => 29,
			'REF' => 30,
			'WHILE' => 81,
			'BLOCK' => 31,
			'DEFAULT' => 83,
			"{" => 33,
			'USE' => 35,
			'VIEW' => 39,
			'EVENT' => 40,
			"\${" => 41
		},
		DEFAULT => -9,
		GOTOS => {
			'event_switch' => 2,
			'loopforvar' => 42,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'defblock_ev' => 48,
			'capture' => 49,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 53,
			'atomexpr' => 55,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 57,
			'defblockname' => 16,
			'event_process' => 60,
			'loopwhilevar' => 61,
			'event' => 62,
			'ident' => 18,
			'event_template' => 223,
			'event_loop' => 66,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 67,
			'event_plug' => 69,
			'defblock_std' => 24,
			'finalblock' => 71,
			'node' => 26,
			'rawperl' => 73,
			'term' => 72,
			'use' => 76,
			'expr' => 75,
			'defblock' => 80,
			'sterm' => 82,
			'filter' => 32,
			'eventblock' => 84,
			'perl' => 34,
			'setlist' => 85,
			'chunks' => 36,
			'try' => 38,
			'switch' => 37,
			'directive' => 86,
			'condition' => 87
		}
	},
	{#State 121
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 51,
			"\$" => 50,
			'STOP' => 8,
			'CALL' => 52,
			'THROW' => 10,
			'GET' => 54,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 56,
			'DEBUG' => 58,
			"(" => 225,
			'SWITCH' => 210,
			'WRAPPER' => 68,
			'FOR' => 23,
			'NEXT' => 25,
			'LITERAL' => 70,
			"\"" => 74,
			'FILTER' => 28,
			'RETURN' => 78,
			'INSERT' => 79,
			'NUMBER' => 29,
			'REF' => 30,
			'WHILE' => 81,
			'BLOCK' => 219,
			"{" => 33,
			'DEFAULT' => 83,
			"\${" => 41
		},
		GOTOS => {
			'loopforvar' => 208,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'node' => 26,
			'term' => 72,
			'loop' => 6,
			'expr' => 226,
			'wrapper' => 53,
			'atomexpr' => 55,
			'atomdir' => 14,
			'mdir' => 224,
			'sterm' => 82,
			'filter' => 32,
			'loopwhilevar' => 209,
			'ident' => 169,
			'perl' => 34,
			'setlist' => 85,
			'try' => 38,
			'switch' => 37,
			'assign' => 21,
			'directive' => 222,
			'condition' => 87,
			'lterm' => 67
		}
	},
	{#State 122
		ACTIONS => {
			'IN' => 228,
			'ASSIGN' => 227
		},
		DEFAULT => -168
	},
	{#State 123
		DEFAULT => -194,
		GOTOS => {
			'args' => 229
		}
	},
	{#State 124
		DEFAULT => -95
	},
	{#State 125
		ACTIONS => {
			'ASSIGN' => -168
		},
		DEFAULT => -211
	},
	{#State 126
		ACTIONS => {
			'ASSIGN' => 230
		}
	},
	{#State 127
		DEFAULT => -197
	},
	{#State 128
		ACTIONS => {
			"\$" => 50,
			'IDENT' => 231,
			"\${" => 41
		},
		GOTOS => {
			'item' => 44,
			'node' => 26,
			'ident' => 197
		}
	},
	{#State 129
		ACTIONS => {
			";" => 232
		}
	},
	{#State 130
		ACTIONS => {
			'ASSIGN' => -199
		},
		DEFAULT => -207
	},
	{#State 131
		DEFAULT => -214,
		GOTOS => {
			'quoted' => 233
		}
	},
	{#State 132
		DEFAULT => -196
	},
	{#State 133
		ACTIONS => {
			'DOT' => 118
		},
		DEFAULT => -148
	},
	{#State 134
		ACTIONS => {
			'ASSIGN' => 213
		},
		DEFAULT => -211
	},
	{#State 135
		DEFAULT => -121
	},
	{#State 136
		ACTIONS => {
			'DOT' => 196
		},
		DEFAULT => -122
	},
	{#State 137
		ACTIONS => {
			";" => 234
		}
	},
	{#State 138
		DEFAULT => -123
	},
	{#State 139
		ACTIONS => {
			"}" => 235
		}
	},
	{#State 140
		ACTIONS => {
			'ASSIGN' => 236
		}
	},
	{#State 141
		DEFAULT => -160
	},
	{#State 142
		ACTIONS => {
			"\$" => 50,
			'COMMA' => 238,
			'LITERAL' => 143,
			'IDENT' => 4,
			"\${" => 41
		},
		DEFAULT => -156,
		GOTOS => {
			'item' => 140,
			'param' => 237
		}
	},
	{#State 143
		ACTIONS => {
			'ASSIGN' => 239
		}
	},
	{#State 144
		DEFAULT => -108
	},
	{#State 145
		DEFAULT => -12
	},
	{#State 146
		DEFAULT => -6
	},
	{#State 147
		ACTIONS => {
			";" => 240
		}
	},
	{#State 148
		ACTIONS => {
			'ASSIGN' => 241
		},
		DEFAULT => -168
	},
	{#State 149
		ACTIONS => {
			'DOT' => 118
		},
		DEFAULT => -19
	},
	{#State 150
		ACTIONS => {
			";" => 242
		}
	},
	{#State 151
		ACTIONS => {
			"}" => 243
		}
	},
	{#State 152
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 51,
			"\$" => 50,
			'STOP' => 8,
			'CALL' => 52,
			'THROW' => 10,
			'GET' => 54,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 56,
			'DEBUG' => 58,
			'RAWPERL' => 15,
			'META' => 17,
			'INCLUDE' => 19,
			"(" => 64,
			'SWITCH' => 65,
			'MACRO' => 20,
			'WRAPPER' => 68,
			";" => -33,
			'FOR' => 23,
			'LITERAL' => 70,
			'NEXT' => 25,
			"\"" => 74,
			'TEXT' => 27,
			'PROCESS' => 77,
			'RETURN' => 78,
			'FILTER' => 28,
			'INSERT' => 79,
			'NUMBER' => 29,
			'REF' => 30,
			'WHILE' => 81,
			'BLOCK' => 31,
			'DEFAULT' => 83,
			"{" => 33,
			'USE' => 35,
			'VIEW' => 39,
			'EVENT' => 40,
			"\${" => 41
		},
		DEFAULT => -11,
		GOTOS => {
			'event_switch' => 2,
			'loopforvar' => 42,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'defblock_ev' => 48,
			'capture' => 49,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 53,
			'atomexpr' => 55,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 57,
			'defblockname' => 16,
			'event_process' => 60,
			'loopwhilevar' => 61,
			'event' => 62,
			'ident' => 18,
			'event_loop' => 66,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 67,
			'event_plug' => 69,
			'defblock_std' => 24,
			'node' => 26,
			'rawperl' => 73,
			'term' => 72,
			'use' => 76,
			'expr' => 75,
			'defblock' => 80,
			'sterm' => 82,
			'filter' => 32,
			'eventblock' => 245,
			'perl' => 34,
			'setlist' => 85,
			'chunks' => 244,
			'try' => 38,
			'switch' => 37,
			'block' => 246,
			'directive' => 86,
			'condition' => 87
		}
	},
	{#State 153
		ACTIONS => {
			'DIV' => 179,
			'BINOP' => 181,
			"+" => 177,
			'CAT' => 183,
			'CMPOP' => 184,
			'MOD' => 185,
			"/" => 186
		},
		DEFAULT => -180
	},
	{#State 154
		DEFAULT => -194,
		GOTOS => {
			'args' => 247
		}
	},
	{#State 155
		DEFAULT => -111,
		GOTOS => {
			'@2-2' => 248
		}
	},
	{#State 156
		DEFAULT => -170
	},
	{#State 157
		ACTIONS => {
			'CMPOP' => 184,
			"?" => 178,
			";" => 249,
			"+" => 177,
			'MOD' => 185,
			'DIV' => 179,
			"/" => 186,
			'AND' => 180,
			'CAT' => 183,
			'BINOP' => 181,
			'OR' => 182
		}
	},
	{#State 158
		ACTIONS => {
			"+" => 177,
			'CAT' => 183,
			'CMPOP' => 184,
			"?" => 178,
			'DIV' => 179,
			'MOD' => 185,
			"/" => 186,
			'AND' => 180,
			'BINOP' => 181,
			'OR' => 182
		},
		DEFAULT => -44
	},
	{#State 159
		ACTIONS => {
			"+" => 177,
			'CAT' => 183,
			'CMPOP' => 184,
			"?" => 178,
			'DIV' => 179,
			'MOD' => 185,
			"/" => 186,
			'AND' => 180,
			'BINOP' => 181,
			'OR' => 182
		},
		DEFAULT => -43
	},
	{#State 160
		ACTIONS => {
			'NOT' => 43,
			"{" => 33,
			'LITERAL' => 92,
			'IDENT' => 4,
			"\"" => 74,
			"(" => 64,
			"\$" => 50,
			"[" => 11,
			'NUMBER' => 29,
			'REF' => 30,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 250,
			'sterm' => 82,
			'item' => 44,
			'node' => 26,
			'ident' => 91,
			'term' => 72,
			'lterm' => 67
		}
	},
	{#State 161
		ACTIONS => {
			"{" => 33,
			'LITERAL' => 92,
			'IDENT' => 122,
			"\"" => 74,
			"\$" => 50,
			"[" => 11,
			'NUMBER' => 29,
			'REF' => 30,
			"\${" => 41
		},
		GOTOS => {
			'sterm' => 82,
			'item' => 44,
			'loopvar' => 251,
			'node' => 26,
			'ident' => 91,
			'term' => 123,
			'lterm' => 67
		}
	},
	{#State 162
		ACTIONS => {
			"\"" => 131,
			"\$" => 128,
			'LITERAL' => 130,
			'FILENAME' => 97,
			'IDENT' => 125,
			'NUMBER' => 98,
			"\${" => 41
		},
		GOTOS => {
			'names' => 105,
			'lvalue' => 126,
			'item' => 127,
			'name' => 96,
			'filepart' => 101,
			'filename' => 99,
			'nameargs' => 132,
			'lnameargs' => 252
		}
	},
	{#State 163
		ACTIONS => {
			'NOT' => 43,
			"{" => 33,
			'LITERAL' => 92,
			'IDENT' => 4,
			"\"" => 74,
			"(" => 64,
			"\$" => 50,
			"[" => 11,
			'NUMBER' => 29,
			'REF' => 30,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 253,
			'sterm' => 82,
			'item' => 44,
			'node' => 26,
			'ident' => 91,
			'term' => 72,
			'lterm' => 67
		}
	},
	{#State 164
		ACTIONS => {
			"\"" => 103,
			"\$" => 100,
			'LITERAL' => 102,
			'FILENAME' => 97,
			'IDENT' => 95,
			'NUMBER' => 98
		},
		GOTOS => {
			'filepart' => 101,
			'names' => 105,
			'nameargs' => 254,
			'filename' => 99,
			'name' => 96
		}
	},
	{#State 165
		ACTIONS => {
			'NOT' => 43,
			"{" => 33,
			'LITERAL' => 92,
			'IDENT' => 4,
			"\"" => 74,
			"(" => 64,
			"\$" => 50,
			"[" => 11,
			'NUMBER' => 29,
			'REF' => 30,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 255,
			'sterm' => 82,
			'item' => 44,
			'node' => 26,
			'ident' => 91,
			'term' => 72,
			'lterm' => 67
		}
	},
	{#State 166
		DEFAULT => -54
	},
	{#State 167
		DEFAULT => 0
	},
	{#State 168
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 51,
			"\$" => 50,
			'STOP' => 8,
			'CALL' => 52,
			'THROW' => 10,
			'GET' => 54,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 56,
			'DEBUG' => 58,
			'RAWPERL' => 15,
			'META' => 17,
			'INCLUDE' => 19,
			"(" => 64,
			'SWITCH' => 65,
			'MACRO' => 20,
			'WRAPPER' => 68,
			";" => -33,
			'FOR' => 23,
			'LITERAL' => 70,
			'NEXT' => 25,
			"\"" => 74,
			'TEXT' => 27,
			'PROCESS' => 77,
			'RETURN' => 78,
			'FILTER' => 28,
			'INSERT' => 79,
			'NUMBER' => 29,
			'REF' => 30,
			'WHILE' => 81,
			'BLOCK' => 31,
			'DEFAULT' => 83,
			"{" => 33,
			'USE' => 35,
			'VIEW' => 39,
			'EVENT' => 40,
			"\${" => 41
		},
		DEFAULT => -11,
		GOTOS => {
			'event_switch' => 2,
			'loopforvar' => 42,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'defblock_ev' => 48,
			'capture' => 49,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 53,
			'atomexpr' => 55,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 57,
			'defblockname' => 16,
			'event_process' => 60,
			'loopwhilevar' => 61,
			'event' => 62,
			'ident' => 18,
			'event_loop' => 66,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 67,
			'event_plug' => 69,
			'defblock_std' => 24,
			'node' => 26,
			'rawperl' => 73,
			'term' => 72,
			'use' => 76,
			'expr' => 75,
			'defblock' => 80,
			'sterm' => 82,
			'filter' => 32,
			'eventblock' => 256,
			'perl' => 34,
			'setlist' => 85,
			'chunks' => 244,
			'try' => 38,
			'switch' => 37,
			'block' => 257,
			'directive' => 86,
			'condition' => 87
		}
	},
	{#State 169
		ACTIONS => {
			'DOT' => 118,
			'ASSIGN' => 194
		},
		DEFAULT => -147
	},
	{#State 170
		ACTIONS => {
			")" => 258
		}
	},
	{#State 171
		ACTIONS => {
			'CMPOP' => 184,
			"?" => 178,
			"+" => 177,
			'MOD' => 185,
			'DIV' => 179,
			"/" => 186,
			'AND' => 180,
			'CAT' => 183,
			'BINOP' => 181,
			")" => 259,
			'OR' => 182
		}
	},
	{#State 172
		ACTIONS => {
			'CMPOP' => 184,
			"?" => 178,
			";" => 260,
			"+" => 177,
			'MOD' => 185,
			'DIV' => 179,
			"/" => 186,
			'AND' => 180,
			'CAT' => 183,
			'BINOP' => 181,
			'OR' => 182
		}
	},
	{#State 173
		ACTIONS => {
			";" => 261
		}
	},
	{#State 174
		ACTIONS => {
			'NOT' => 43,
			"{" => 33,
			'LITERAL' => 92,
			'IDENT' => 4,
			"\"" => 74,
			"(" => 64,
			"\$" => 50,
			"[" => 11,
			'NUMBER' => 29,
			'REF' => 30,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 262,
			'sterm' => 82,
			'item' => 44,
			'node' => 26,
			'ident' => 91,
			'term' => 72,
			'lterm' => 67
		}
	},
	{#State 175
		DEFAULT => -3
	},
	{#State 176
		ACTIONS => {
			"\"" => 267,
			'TEXT' => 264,
			";" => 266,
			"\$" => 50,
			'IDENT' => 4,
			"\${" => 41
		},
		GOTOS => {
			'item' => 44,
			'node' => 26,
			'ident' => 263,
			'quotable' => 265
		}
	},
	{#State 177
		ACTIONS => {
			'NOT' => 43,
			"{" => 33,
			'LITERAL' => 92,
			'IDENT' => 4,
			"\"" => 74,
			"(" => 64,
			"\$" => 50,
			"[" => 11,
			'NUMBER' => 29,
			'REF' => 30,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 268,
			'sterm' => 82,
			'item' => 44,
			'node' => 26,
			'ident' => 91,
			'term' => 72,
			'lterm' => 67
		}
	},
	{#State 178
		ACTIONS => {
			'NOT' => 43,
			"{" => 33,
			'LITERAL' => 92,
			'IDENT' => 4,
			"\"" => 74,
			"(" => 64,
			"\$" => 50,
			"[" => 11,
			'NUMBER' => 29,
			'REF' => 30,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 269,
			'sterm' => 82,
			'item' => 44,
			'node' => 26,
			'ident' => 91,
			'term' => 72,
			'lterm' => 67
		}
	},
	{#State 179
		ACTIONS => {
			'NOT' => 43,
			"{" => 33,
			'LITERAL' => 92,
			'IDENT' => 4,
			"\"" => 74,
			"(" => 64,
			"\$" => 50,
			"[" => 11,
			'NUMBER' => 29,
			'REF' => 30,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 270,
			'sterm' => 82,
			'item' => 44,
			'node' => 26,
			'ident' => 91,
			'term' => 72,
			'lterm' => 67
		}
	},
	{#State 180
		ACTIONS => {
			'NOT' => 43,
			"{" => 33,
			'LITERAL' => 92,
			'IDENT' => 4,
			"\"" => 74,
			"(" => 64,
			"\$" => 50,
			"[" => 11,
			'NUMBER' => 29,
			'REF' => 30,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 271,
			'sterm' => 82,
			'item' => 44,
			'node' => 26,
			'ident' => 91,
			'term' => 72,
			'lterm' => 67
		}
	},
	{#State 181
		ACTIONS => {
			'NOT' => 43,
			"{" => 33,
			'LITERAL' => 92,
			'IDENT' => 4,
			"\"" => 74,
			"(" => 64,
			"\$" => 50,
			"[" => 11,
			'NUMBER' => 29,
			'REF' => 30,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 272,
			'sterm' => 82,
			'item' => 44,
			'node' => 26,
			'ident' => 91,
			'term' => 72,
			'lterm' => 67
		}
	},
	{#State 182
		ACTIONS => {
			'NOT' => 43,
			"{" => 33,
			'LITERAL' => 92,
			'IDENT' => 4,
			"\"" => 74,
			"(" => 64,
			"\$" => 50,
			"[" => 11,
			'NUMBER' => 29,
			'REF' => 30,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 273,
			'sterm' => 82,
			'item' => 44,
			'node' => 26,
			'ident' => 91,
			'term' => 72,
			'lterm' => 67
		}
	},
	{#State 183
		ACTIONS => {
			'NOT' => 43,
			"{" => 33,
			'LITERAL' => 92,
			'IDENT' => 4,
			"\"" => 74,
			"(" => 64,
			"\$" => 50,
			"[" => 11,
			'NUMBER' => 29,
			'REF' => 30,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 274,
			'sterm' => 82,
			'item' => 44,
			'node' => 26,
			'ident' => 91,
			'term' => 72,
			'lterm' => 67
		}
	},
	{#State 184
		ACTIONS => {
			'NOT' => 43,
			"{" => 33,
			'LITERAL' => 92,
			'IDENT' => 4,
			"\"" => 74,
			"(" => 64,
			"\$" => 50,
			"[" => 11,
			'NUMBER' => 29,
			'REF' => 30,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 275,
			'sterm' => 82,
			'item' => 44,
			'node' => 26,
			'ident' => 91,
			'term' => 72,
			'lterm' => 67
		}
	},
	{#State 185
		ACTIONS => {
			'NOT' => 43,
			"{" => 33,
			'LITERAL' => 92,
			'IDENT' => 4,
			"\"" => 74,
			"(" => 64,
			"\$" => 50,
			"[" => 11,
			'NUMBER' => 29,
			'REF' => 30,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 276,
			'sterm' => 82,
			'item' => 44,
			'node' => 26,
			'ident' => 91,
			'term' => 72,
			'lterm' => 67
		}
	},
	{#State 186
		ACTIONS => {
			'NOT' => 43,
			"{" => 33,
			'LITERAL' => 92,
			'IDENT' => 4,
			"\"" => 74,
			"(" => 64,
			"\$" => 50,
			"[" => 11,
			'NUMBER' => 29,
			'REF' => 30,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 277,
			'sterm' => 82,
			'item' => 44,
			'node' => 26,
			'ident' => 91,
			'term' => 72,
			'lterm' => 67
		}
	},
	{#State 187
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 51,
			"\$" => 50,
			'STOP' => 8,
			'CALL' => 52,
			'THROW' => 10,
			'GET' => 54,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 56,
			'DEBUG' => 58,
			'RAWPERL' => 15,
			'META' => 17,
			'INCLUDE' => 19,
			"(" => 64,
			'SWITCH' => 65,
			'MACRO' => 20,
			'WRAPPER' => 68,
			";" => -33,
			'FOR' => 23,
			'LITERAL' => 70,
			'NEXT' => 25,
			"\"" => 74,
			'TEXT' => 27,
			'PROCESS' => 77,
			'RETURN' => 78,
			'FILTER' => 28,
			'INSERT' => 79,
			'NUMBER' => 29,
			'REF' => 30,
			'WHILE' => 81,
			'BLOCK' => 31,
			'DEFAULT' => 83,
			"{" => 33,
			'USE' => 35,
			'VIEW' => 39,
			'EVENT' => 40,
			"\${" => 41
		},
		DEFAULT => -9,
		GOTOS => {
			'event_switch' => 2,
			'loopforvar' => 42,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'defblock_ev' => 48,
			'capture' => 49,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 53,
			'atomexpr' => 55,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 57,
			'defblockname' => 16,
			'event_process' => 60,
			'loopwhilevar' => 61,
			'event' => 62,
			'ident' => 18,
			'event_template' => 278,
			'event_loop' => 66,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 67,
			'event_plug' => 69,
			'defblock_std' => 24,
			'finalblock' => 71,
			'node' => 26,
			'rawperl' => 73,
			'term' => 72,
			'use' => 76,
			'expr' => 75,
			'defblock' => 80,
			'sterm' => 82,
			'filter' => 32,
			'eventblock' => 84,
			'perl' => 34,
			'setlist' => 85,
			'chunks' => 36,
			'try' => 38,
			'switch' => 37,
			'directive' => 86,
			'condition' => 87
		}
	},
	{#State 188
		DEFAULT => -47
	},
	{#State 189
		ACTIONS => {
			'CMPOP' => 184,
			"?" => 178,
			"+" => 177,
			'MOD' => 185,
			'DIV' => 179,
			"/" => 186,
			'AND' => 180,
			'CAT' => 183,
			'BINOP' => 181,
			'OR' => 182
		},
		DEFAULT => -96
	},
	{#State 190
		ACTIONS => {
			'COMMA' => 193,
			'LITERAL' => 89,
			'IDENT' => 4,
			"\$" => 50,
			"\${" => 41
		},
		DEFAULT => -46,
		GOTOS => {
			'item' => 44,
			'assign' => 192,
			'node' => 26,
			'ident' => 88
		}
	},
	{#State 191
		DEFAULT => -2
	},
	{#State 192
		DEFAULT => -185
	},
	{#State 193
		DEFAULT => -186
	},
	{#State 194
		ACTIONS => {
			'NOT' => 43,
			"{" => 33,
			'LITERAL' => 92,
			'IDENT' => 4,
			"\"" => 74,
			"(" => 64,
			"\$" => 50,
			"[" => 11,
			'NUMBER' => 29,
			'REF' => 30,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 279,
			'sterm' => 82,
			'item' => 44,
			'node' => 26,
			'ident' => 91,
			'term' => 72,
			'lterm' => 67
		}
	},
	{#State 195
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 51,
			"\$" => 50,
			'STOP' => 8,
			'CALL' => 52,
			'THROW' => 10,
			'GET' => 54,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 56,
			'DEBUG' => 58,
			'RAWPERL' => 15,
			'META' => 17,
			"(" => 64,
			'SWITCH' => 210,
			'MACRO' => 20,
			'WRAPPER' => 68,
			";" => -33,
			'FOR' => 23,
			'LITERAL' => 70,
			'NEXT' => 25,
			"\"" => 74,
			'TEXT' => 27,
			'RETURN' => 78,
			'FILTER' => 28,
			'INSERT' => 79,
			'NUMBER' => 29,
			'REF' => 30,
			'WHILE' => 81,
			'BLOCK' => 31,
			'DEFAULT' => 83,
			"{" => 33,
			'USE' => 35,
			'VIEW' => 39,
			"\${" => 41
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 208,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'defblock_ev' => 48,
			'capture' => 49,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 53,
			'atomexpr' => 55,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 57,
			'defblockname' => 16,
			'loopwhilevar' => 209,
			'ident' => 18,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 67,
			'defblock_std' => 24,
			'node' => 26,
			'term' => 72,
			'rawperl' => 73,
			'expr' => 75,
			'use' => 76,
			'defblock' => 80,
			'sterm' => 82,
			'filter' => 32,
			'perl' => 34,
			'setlist' => 85,
			'chunks' => 207,
			'try' => 38,
			'switch' => 37,
			'block' => 280,
			'directive' => 86,
			'condition' => 87
		}
	},
	{#State 196
		ACTIONS => {
			'FILENAME' => 97,
			'IDENT' => 95,
			'NUMBER' => 98
		},
		GOTOS => {
			'filepart' => 281
		}
	},
	{#State 197
		ACTIONS => {
			'DOT' => 118
		},
		DEFAULT => -194,
		GOTOS => {
			'args' => 282
		}
	},
	{#State 198
		ACTIONS => {
			"\"" => 283,
			'TEXT' => 264,
			";" => 266,
			"\$" => 50,
			'IDENT' => 4,
			"\${" => 41
		},
		GOTOS => {
			'item' => 44,
			'node' => 26,
			'ident' => 263,
			'quotable' => 265
		}
	},
	{#State 199
		ACTIONS => {
			"\"" => 103,
			'LITERAL' => 102,
			'FILENAME' => 97,
			'IDENT' => 95,
			'NUMBER' => 98
		},
		GOTOS => {
			'filepart' => 101,
			'filename' => 99,
			'name' => 284
		}
	},
	{#State 200
		DEFAULT => -194,
		GOTOS => {
			'args' => 285
		}
	},
	{#State 201
		ACTIONS => {
			'NOT' => 43,
			'IDENT' => 4,
			"\$" => 50,
			"[" => 11,
			"(" => 64,
			'LITERAL' => 289,
			"\"" => 74,
			'REF' => 30,
			'NUMBER' => 29,
			"{" => 33,
			'COMMA' => 291,
			"\${" => 41
		},
		DEFAULT => -201,
		GOTOS => {
			'expr' => 290,
			'sterm' => 82,
			'item' => 287,
			'param' => 288,
			'node' => 26,
			'ident' => 286,
			'term' => 72,
			'lterm' => 67
		}
	},
	{#State 202
		DEFAULT => -143
	},
	{#State 203
		DEFAULT => -152
	},
	{#State 204
		DEFAULT => -153
	},
	{#State 205
		DEFAULT => -144
	},
	{#State 206
		ACTIONS => {
			"\"" => 74,
			"\$" => 50,
			'LITERAL' => 92,
			'IDENT' => 4,
			'REF' => 30,
			'NUMBER' => 29,
			"\${" => 41
		},
		GOTOS => {
			'sterm' => 292,
			'item' => 44,
			'node' => 26,
			'ident' => 91
		}
	},
	{#State 207
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 51,
			"\$" => 50,
			'STOP' => 8,
			'CALL' => 52,
			'THROW' => 10,
			'GET' => 54,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 56,
			'DEBUG' => 58,
			'RAWPERL' => 15,
			'META' => 17,
			"(" => 64,
			'SWITCH' => 210,
			'MACRO' => 20,
			'WRAPPER' => 68,
			";" => -33,
			'FOR' => 23,
			'LITERAL' => 70,
			'NEXT' => 25,
			"\"" => 74,
			'TEXT' => 27,
			'RETURN' => 78,
			'FILTER' => 28,
			'INSERT' => 79,
			'NUMBER' => 29,
			'REF' => 30,
			'WHILE' => 81,
			'BLOCK' => 31,
			'DEFAULT' => 83,
			"{" => 33,
			'USE' => 35,
			'VIEW' => 39,
			"\${" => 41
		},
		DEFAULT => -10,
		GOTOS => {
			'loopforvar' => 208,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'defblock_ev' => 48,
			'capture' => 49,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 53,
			'atomexpr' => 55,
			'chunk' => 145,
			'atomdir' => 14,
			'anonblock' => 57,
			'defblockname' => 16,
			'loopwhilevar' => 209,
			'ident' => 18,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 67,
			'defblock_std' => 24,
			'node' => 26,
			'term' => 72,
			'rawperl' => 73,
			'expr' => 75,
			'use' => 76,
			'defblock' => 80,
			'filter' => 32,
			'sterm' => 82,
			'perl' => 34,
			'setlist' => 85,
			'switch' => 37,
			'try' => 38,
			'directive' => 86,
			'condition' => 87
		}
	},
	{#State 208
		ACTIONS => {
			";" => 293
		}
	},
	{#State 209
		ACTIONS => {
			";" => 294
		}
	},
	{#State 210
		ACTIONS => {
			'NOT' => 43,
			"{" => 33,
			'LITERAL' => 92,
			'IDENT' => 4,
			"\"" => 74,
			"(" => 64,
			"\$" => 50,
			"[" => 11,
			'NUMBER' => 29,
			'REF' => 30,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 295,
			'sterm' => 82,
			'item' => 44,
			'node' => 26,
			'ident' => 91,
			'term' => 72,
			'lterm' => 67
		}
	},
	{#State 211
		ACTIONS => {
			'FINAL' => 296,
			'CATCH' => 298
		},
		DEFAULT => -107,
		GOTOS => {
			'final' => 297
		}
	},
	{#State 212
		ACTIONS => {
			'TEXT' => 299
		}
	},
	{#State 213
		ACTIONS => {
			"\"" => 302,
			'LITERAL' => 301,
			'NUMBER' => 300
		}
	},
	{#State 214
		DEFAULT => -135
	},
	{#State 215
		DEFAULT => -136
	},
	{#State 216
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 51,
			"\$" => 50,
			'STOP' => 8,
			'CALL' => 52,
			'THROW' => 10,
			'GET' => 54,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 56,
			'DEBUG' => 58,
			'RAWPERL' => 15,
			'META' => 17,
			'INCLUDE' => 19,
			"(" => 64,
			'SWITCH' => 65,
			'MACRO' => 20,
			'WRAPPER' => 68,
			";" => -33,
			'FOR' => 23,
			'LITERAL' => 70,
			'NEXT' => 25,
			"\"" => 74,
			'TEXT' => 27,
			'PROCESS' => 77,
			'RETURN' => 78,
			'FILTER' => 28,
			'INSERT' => 79,
			'NUMBER' => 29,
			'REF' => 30,
			'WHILE' => 81,
			'BLOCK' => 31,
			'DEFAULT' => 83,
			"{" => 33,
			'USE' => 35,
			'VIEW' => 39,
			'EVENT' => 40,
			"\${" => 41
		},
		DEFAULT => -11,
		GOTOS => {
			'event_switch' => 2,
			'loopforvar' => 42,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'defblock_ev' => 48,
			'capture' => 49,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 53,
			'atomexpr' => 55,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 57,
			'defblockname' => 16,
			'event_process' => 60,
			'loopwhilevar' => 61,
			'event' => 62,
			'ident' => 18,
			'event_loop' => 66,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 67,
			'event_plug' => 69,
			'defblock_std' => 24,
			'node' => 26,
			'rawperl' => 73,
			'term' => 72,
			'use' => 76,
			'expr' => 75,
			'defblock' => 80,
			'sterm' => 82,
			'filter' => 32,
			'eventblock' => 303,
			'perl' => 34,
			'setlist' => 85,
			'chunks' => 244,
			'try' => 38,
			'switch' => 37,
			'block' => 304,
			'directive' => 86,
			'condition' => 87
		}
	},
	{#State 217
		DEFAULT => -163
	},
	{#State 218
		DEFAULT => -164
	},
	{#State 219
		ACTIONS => {
			";" => 305
		}
	},
	{#State 220
		DEFAULT => -127
	},
	{#State 221
		ACTIONS => {
			";" => -188,
			"+" => 177,
			'LITERAL' => -188,
			'IDENT' => -188,
			'CAT' => 183,
			"\$" => -188,
			'CMPOP' => 184,
			"?" => 178,
			'DIV' => 179,
			'MOD' => 185,
			'COMMA' => -188,
			"/" => 186,
			'AND' => 180,
			'BINOP' => 181,
			'OR' => 182,
			"\${" => -188
		},
		DEFAULT => -41
	},
	{#State 222
		DEFAULT => -130
	},
	{#State 223
		DEFAULT => -57
	},
	{#State 224
		DEFAULT => -129
	},
	{#State 225
		ACTIONS => {
			'NOT' => 43,
			"{" => 33,
			'LITERAL' => 70,
			'IDENT' => 306,
			"\"" => 74,
			"(" => 64,
			"\$" => 50,
			"[" => 11,
			'NUMBER' => 29,
			'REF' => 30,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 171,
			'sterm' => 82,
			'item' => 44,
			'assign' => 170,
			'margs' => 307,
			'node' => 26,
			'ident' => 169,
			'term' => 72,
			'lterm' => 67
		}
	},
	{#State 226
		ACTIONS => {
			"+" => 177,
			'CAT' => 183,
			'CMPOP' => 184,
			"?" => 178,
			'DIV' => 179,
			'MOD' => 185,
			"/" => 186,
			'AND' => 180,
			'BINOP' => 181,
			'OR' => 182
		},
		DEFAULT => -41
	},
	{#State 227
		ACTIONS => {
			"{" => 33,
			'LITERAL' => 92,
			'IDENT' => 4,
			"\"" => 74,
			"\$" => 50,
			"[" => 11,
			'NUMBER' => 29,
			'REF' => 30,
			"\${" => 41
		},
		GOTOS => {
			'sterm' => 82,
			'item' => 44,
			'node' => 26,
			'ident' => 91,
			'term' => 308,
			'lterm' => 67
		}
	},
	{#State 228
		ACTIONS => {
			"{" => 33,
			'LITERAL' => 92,
			'IDENT' => 4,
			"\"" => 74,
			"\$" => 50,
			"[" => 11,
			'NUMBER' => 29,
			'REF' => 30,
			"\${" => 41
		},
		GOTOS => {
			'sterm' => 82,
			'item' => 44,
			'node' => 26,
			'ident' => 91,
			'term' => 309,
			'lterm' => 67
		}
	},
	{#State 229
		ACTIONS => {
			'NOT' => 43,
			"{" => 33,
			'COMMA' => 291,
			'LITERAL' => 289,
			'IDENT' => 4,
			"\"" => 74,
			"(" => 64,
			"\$" => 50,
			"[" => 11,
			'NUMBER' => 29,
			'REF' => 30,
			"\${" => 41
		},
		DEFAULT => -99,
		GOTOS => {
			'expr' => 290,
			'sterm' => 82,
			'item' => 287,
			'param' => 288,
			'node' => 26,
			'ident' => 286,
			'term' => 72,
			'lterm' => 67
		}
	},
	{#State 230
		ACTIONS => {
			"\"" => 103,
			"\$" => 100,
			'LITERAL' => 102,
			'FILENAME' => 97,
			'IDENT' => 95,
			'NUMBER' => 98
		},
		GOTOS => {
			'filepart' => 101,
			'names' => 105,
			'nameargs' => 310,
			'filename' => 99,
			'name' => 96
		}
	},
	{#State 231
		ACTIONS => {
			'ASSIGN' => -170
		},
		DEFAULT => -168
	},
	{#State 232
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 51,
			"\$" => 50,
			'STOP' => 8,
			'CALL' => 52,
			'THROW' => 10,
			'GET' => 54,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 56,
			'DEBUG' => 58,
			'RAWPERL' => 15,
			'META' => 17,
			"(" => 64,
			'SWITCH' => 210,
			'MACRO' => 20,
			'WRAPPER' => 68,
			";" => -33,
			'FOR' => 23,
			'LITERAL' => 70,
			'NEXT' => 25,
			"\"" => 74,
			'TEXT' => 27,
			'RETURN' => 78,
			'FILTER' => 28,
			'INSERT' => 79,
			'NUMBER' => 29,
			'REF' => 30,
			'WHILE' => 81,
			'BLOCK' => 31,
			'DEFAULT' => 83,
			"{" => 33,
			'USE' => 35,
			'VIEW' => 39,
			"\${" => 41
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 208,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'defblock_ev' => 48,
			'capture' => 49,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 53,
			'atomexpr' => 55,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 57,
			'defblockname' => 16,
			'loopwhilevar' => 209,
			'ident' => 18,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 67,
			'defblock_std' => 24,
			'node' => 26,
			'term' => 72,
			'rawperl' => 73,
			'expr' => 75,
			'use' => 76,
			'defblock' => 80,
			'sterm' => 82,
			'filter' => 32,
			'perl' => 34,
			'setlist' => 85,
			'chunks' => 207,
			'try' => 38,
			'switch' => 37,
			'block' => 311,
			'directive' => 86,
			'condition' => 87
		}
	},
	{#State 233
		ACTIONS => {
			"\"" => 312,
			'TEXT' => 264,
			";" => 266,
			"\$" => 50,
			'IDENT' => 4,
			"\${" => 41
		},
		GOTOS => {
			'item' => 44,
			'node' => 26,
			'ident' => 263,
			'quotable' => 265
		}
	},
	{#State 234
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 51,
			"\$" => 50,
			'STOP' => 8,
			'CALL' => 52,
			'THROW' => 10,
			'GET' => 54,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 56,
			'DEBUG' => 58,
			'RAWPERL' => 15,
			'META' => 17,
			"(" => 64,
			'SWITCH' => 210,
			'MACRO' => 20,
			'WRAPPER' => 68,
			";" => -33,
			'FOR' => 23,
			'LITERAL' => 70,
			'NEXT' => 25,
			"\"" => 74,
			'TEXT' => 27,
			'RETURN' => 78,
			'FILTER' => 28,
			'INSERT' => 79,
			'NUMBER' => 29,
			'REF' => 30,
			'WHILE' => 81,
			'BLOCK' => 31,
			'DEFAULT' => 83,
			"{" => 33,
			'USE' => 35,
			'VIEW' => 39,
			"\${" => 41
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 208,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'defblock_ev' => 48,
			'capture' => 49,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 53,
			'atomexpr' => 55,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 57,
			'defblockname' => 16,
			'loopwhilevar' => 209,
			'ident' => 18,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 67,
			'defblock_std' => 24,
			'node' => 26,
			'term' => 72,
			'rawperl' => 73,
			'expr' => 75,
			'use' => 76,
			'defblock' => 80,
			'sterm' => 82,
			'filter' => 32,
			'perl' => 34,
			'setlist' => 85,
			'chunks' => 207,
			'try' => 38,
			'switch' => 37,
			'block' => 313,
			'directive' => 86,
			'condition' => 87
		}
	},
	{#State 235
		DEFAULT => -146
	},
	{#State 236
		ACTIONS => {
			'NOT' => 43,
			"{" => 33,
			'LITERAL' => 92,
			'IDENT' => 4,
			"\"" => 74,
			"(" => 64,
			"\$" => 50,
			"[" => 11,
			'NUMBER' => 29,
			'REF' => 30,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 314,
			'sterm' => 82,
			'item' => 44,
			'node' => 26,
			'ident' => 91,
			'term' => 72,
			'lterm' => 67
		}
	},
	{#State 237
		DEFAULT => -158
	},
	{#State 238
		DEFAULT => -159
	},
	{#State 239
		ACTIONS => {
			'NOT' => 43,
			"{" => 33,
			'LITERAL' => 92,
			'IDENT' => 4,
			"\"" => 74,
			"(" => 64,
			"\$" => 50,
			"[" => 11,
			'NUMBER' => 29,
			'REF' => 30,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 315,
			'sterm' => 82,
			'item' => 44,
			'node' => 26,
			'ident' => 91,
			'term' => 72,
			'lterm' => 67
		}
	},
	{#State 240
		DEFAULT => -109,
		GOTOS => {
			'@1-3' => 316
		}
	},
	{#State 241
		ACTIONS => {
			"\$" => 50,
			'IDENT' => 4,
			"\${" => 41
		},
		GOTOS => {
			'item' => 44,
			'node' => 26,
			'ident' => 317
		}
	},
	{#State 242
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 51,
			"\$" => 50,
			'STOP' => 8,
			'CALL' => 52,
			'THROW' => 10,
			'GET' => 54,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 56,
			'DEBUG' => 58,
			'RAWPERL' => 15,
			'META' => 17,
			'INCLUDE' => 19,
			"(" => 64,
			'SWITCH' => 65,
			'MACRO' => 20,
			'WRAPPER' => 68,
			";" => -33,
			'FOR' => 23,
			'LITERAL' => 70,
			'NEXT' => 25,
			"\"" => 74,
			'TEXT' => 27,
			'PROCESS' => 77,
			'RETURN' => 78,
			'FILTER' => 28,
			'INSERT' => 79,
			'NUMBER' => 29,
			'REF' => 30,
			'WHILE' => 81,
			'BLOCK' => 31,
			'DEFAULT' => 83,
			"{" => 33,
			'USE' => 35,
			'VIEW' => 39,
			'EVENT' => 40,
			"\${" => 41
		},
		DEFAULT => -9,
		GOTOS => {
			'event_switch' => 2,
			'loopforvar' => 42,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'defblock_ev' => 48,
			'capture' => 49,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 53,
			'atomexpr' => 55,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 57,
			'defblockname' => 16,
			'event_process' => 60,
			'loopwhilevar' => 61,
			'event' => 62,
			'ident' => 18,
			'event_template' => 318,
			'event_loop' => 66,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 67,
			'event_plug' => 69,
			'defblock_std' => 24,
			'finalblock' => 71,
			'node' => 26,
			'rawperl' => 73,
			'term' => 72,
			'use' => 76,
			'expr' => 75,
			'defblock' => 80,
			'sterm' => 82,
			'filter' => 32,
			'eventblock' => 84,
			'perl' => 34,
			'setlist' => 85,
			'chunks' => 36,
			'try' => 38,
			'switch' => 37,
			'directive' => 86,
			'condition' => 87
		}
	},
	{#State 243
		DEFAULT => -169
	},
	{#State 244
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 51,
			"\$" => 50,
			'STOP' => 8,
			'CALL' => 52,
			'THROW' => 10,
			'GET' => 54,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 56,
			'DEBUG' => 58,
			'RAWPERL' => 15,
			'META' => 17,
			'INCLUDE' => 19,
			"(" => 64,
			'SWITCH' => 65,
			'MACRO' => 20,
			'WRAPPER' => 68,
			";" => -33,
			'FOR' => 23,
			'LITERAL' => 70,
			'NEXT' => 25,
			"\"" => 74,
			'TEXT' => 27,
			'PROCESS' => 77,
			'RETURN' => 78,
			'FILTER' => 28,
			'INSERT' => 79,
			'NUMBER' => 29,
			'REF' => 30,
			'WHILE' => 81,
			'BLOCK' => 31,
			'DEFAULT' => 83,
			"{" => 33,
			'USE' => 35,
			'VIEW' => 39,
			'EVENT' => 40,
			"\${" => 41
		},
		DEFAULT => -10,
		GOTOS => {
			'event_switch' => 2,
			'loopforvar' => 42,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'defblock_ev' => 48,
			'capture' => 49,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 53,
			'atomexpr' => 55,
			'chunk' => 145,
			'atomdir' => 14,
			'anonblock' => 57,
			'defblockname' => 16,
			'event_process' => 60,
			'loopwhilevar' => 61,
			'event' => 146,
			'ident' => 18,
			'event_loop' => 66,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 67,
			'event_plug' => 69,
			'defblock_std' => 24,
			'node' => 26,
			'rawperl' => 73,
			'term' => 72,
			'use' => 76,
			'expr' => 75,
			'defblock' => 80,
			'sterm' => 82,
			'filter' => 32,
			'perl' => 34,
			'setlist' => 85,
			'try' => 38,
			'switch' => 37,
			'directive' => 86,
			'condition' => 87
		}
	},
	{#State 245
		ACTIONS => {
			'END' => 319
		}
	},
	{#State 246
		ACTIONS => {
			'END' => 320
		}
	},
	{#State 247
		ACTIONS => {
			'NOT' => 43,
			"{" => 33,
			'COMMA' => 291,
			'LITERAL' => 289,
			'IDENT' => 4,
			"\"" => 74,
			"(" => 64,
			"\$" => 50,
			"[" => 11,
			'NUMBER' => 29,
			'REF' => 30,
			")" => 321,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 290,
			'sterm' => 82,
			'item' => 287,
			'param' => 288,
			'node' => 26,
			'ident' => 286,
			'term' => 72,
			'lterm' => 67
		}
	},
	{#State 248
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 51,
			"\$" => 50,
			'STOP' => 8,
			'CALL' => 52,
			'THROW' => 10,
			'GET' => 54,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 56,
			'DEBUG' => 58,
			'RAWPERL' => 15,
			'META' => 17,
			"(" => 64,
			'SWITCH' => 210,
			'MACRO' => 20,
			'WRAPPER' => 68,
			";" => -33,
			'FOR' => 23,
			'LITERAL' => 70,
			'NEXT' => 25,
			"\"" => 74,
			'TEXT' => 27,
			'RETURN' => 78,
			'FILTER' => 28,
			'INSERT' => 79,
			'NUMBER' => 29,
			'REF' => 30,
			'WHILE' => 81,
			'BLOCK' => 31,
			'DEFAULT' => 83,
			"{" => 33,
			'USE' => 35,
			'VIEW' => 39,
			"\${" => 41
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 208,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'defblock_ev' => 48,
			'capture' => 49,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 53,
			'atomexpr' => 55,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 57,
			'defblockname' => 16,
			'loopwhilevar' => 209,
			'ident' => 18,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 67,
			'defblock_std' => 24,
			'node' => 26,
			'term' => 72,
			'rawperl' => 73,
			'expr' => 75,
			'use' => 76,
			'defblock' => 80,
			'sterm' => 82,
			'filter' => 32,
			'perl' => 34,
			'setlist' => 85,
			'chunks' => 207,
			'try' => 38,
			'switch' => 37,
			'block' => 322,
			'directive' => 86,
			'condition' => 87
		}
	},
	{#State 249
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 51,
			"\$" => 50,
			'STOP' => 8,
			'CALL' => 52,
			'THROW' => 10,
			'GET' => 54,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 56,
			'DEBUG' => 58,
			'RAWPERL' => 15,
			'META' => 17,
			"(" => 64,
			'SWITCH' => 210,
			'MACRO' => 20,
			'WRAPPER' => 68,
			";" => -33,
			'FOR' => 23,
			'LITERAL' => 70,
			'NEXT' => 25,
			"\"" => 74,
			'TEXT' => 27,
			'RETURN' => 78,
			'FILTER' => 28,
			'INSERT' => 79,
			'NUMBER' => 29,
			'REF' => 30,
			'WHILE' => 81,
			'BLOCK' => 31,
			'DEFAULT' => 83,
			"{" => 33,
			'USE' => 35,
			'VIEW' => 39,
			"\${" => 41
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 208,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'defblock_ev' => 48,
			'capture' => 49,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 53,
			'atomexpr' => 55,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 57,
			'defblockname' => 16,
			'loopwhilevar' => 209,
			'ident' => 18,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 67,
			'defblock_std' => 24,
			'node' => 26,
			'term' => 72,
			'rawperl' => 73,
			'expr' => 75,
			'use' => 76,
			'defblock' => 80,
			'sterm' => 82,
			'filter' => 32,
			'perl' => 34,
			'setlist' => 85,
			'chunks' => 207,
			'try' => 38,
			'switch' => 37,
			'block' => 323,
			'directive' => 86,
			'condition' => 87
		}
	},
	{#State 250
		ACTIONS => {
			'CMPOP' => 184,
			"?" => 178,
			"+" => 177,
			'MOD' => 185,
			'DIV' => 179,
			"/" => 186,
			'AND' => 180,
			'CAT' => 183,
			'BINOP' => 181,
			'OR' => 182
		},
		DEFAULT => -62
	},
	{#State 251
		DEFAULT => -91
	},
	{#State 252
		DEFAULT => -116
	},
	{#State 253
		ACTIONS => {
			'CMPOP' => 184,
			"?" => 178,
			"+" => 177,
			'MOD' => 185,
			'DIV' => 179,
			"/" => 186,
			'AND' => 180,
			'CAT' => 183,
			'BINOP' => 181,
			'OR' => 182
		},
		DEFAULT => -60
	},
	{#State 254
		DEFAULT => -101
	},
	{#State 255
		ACTIONS => {
			'CMPOP' => 184,
			"?" => 178,
			"+" => 177,
			'MOD' => 185,
			'DIV' => 179,
			"/" => 186,
			'AND' => 180,
			'CAT' => 183,
			'BINOP' => 181,
			'OR' => 182
		},
		DEFAULT => -92
	},
	{#State 256
		ACTIONS => {
			'END' => 324
		}
	},
	{#State 257
		ACTIONS => {
			'END' => 325
		}
	},
	{#State 258
		DEFAULT => -182
	},
	{#State 259
		DEFAULT => -183
	},
	{#State 260
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 51,
			"\$" => 50,
			'STOP' => 8,
			'CALL' => 52,
			'THROW' => 10,
			'GET' => 54,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 56,
			'DEBUG' => 58,
			'RAWPERL' => 15,
			'META' => 17,
			"(" => 64,
			'SWITCH' => 210,
			'MACRO' => 20,
			'WRAPPER' => 68,
			";" => -33,
			'FOR' => 23,
			'LITERAL' => 70,
			'NEXT' => 25,
			"\"" => 74,
			'TEXT' => 27,
			'RETURN' => 78,
			'FILTER' => 28,
			'INSERT' => 79,
			'NUMBER' => 29,
			'REF' => 30,
			'WHILE' => 81,
			'BLOCK' => 31,
			'DEFAULT' => 83,
			"{" => 33,
			'USE' => 35,
			'VIEW' => 39,
			"\${" => 41
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 208,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'defblock_ev' => 48,
			'capture' => 49,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 53,
			'atomexpr' => 55,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 57,
			'defblockname' => 16,
			'loopwhilevar' => 209,
			'ident' => 18,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 67,
			'defblock_std' => 24,
			'node' => 26,
			'term' => 72,
			'rawperl' => 73,
			'expr' => 75,
			'use' => 76,
			'defblock' => 80,
			'sterm' => 82,
			'filter' => 32,
			'perl' => 34,
			'setlist' => 85,
			'chunks' => 207,
			'try' => 38,
			'switch' => 37,
			'block' => 326,
			'directive' => 86,
			'condition' => 87
		}
	},
	{#State 261
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 51,
			"\$" => 50,
			'STOP' => 8,
			'CALL' => 52,
			'THROW' => 10,
			'GET' => 54,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 56,
			'DEBUG' => 58,
			'RAWPERL' => 15,
			'META' => 17,
			"(" => 64,
			'SWITCH' => 210,
			'MACRO' => 20,
			'WRAPPER' => 68,
			";" => -33,
			'FOR' => 23,
			'LITERAL' => 70,
			'NEXT' => 25,
			"\"" => 74,
			'TEXT' => 27,
			'RETURN' => 78,
			'FILTER' => 28,
			'INSERT' => 79,
			'NUMBER' => 29,
			'REF' => 30,
			'WHILE' => 81,
			'BLOCK' => 31,
			'DEFAULT' => 83,
			"{" => 33,
			'USE' => 35,
			'VIEW' => 39,
			"\${" => 41
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 208,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'defblock_ev' => 48,
			'capture' => 49,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 53,
			'atomexpr' => 55,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 57,
			'defblockname' => 16,
			'loopwhilevar' => 209,
			'ident' => 18,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 67,
			'defblock_std' => 24,
			'node' => 26,
			'term' => 72,
			'rawperl' => 73,
			'expr' => 75,
			'use' => 76,
			'defblock' => 80,
			'sterm' => 82,
			'filter' => 32,
			'perl' => 34,
			'setlist' => 85,
			'chunks' => 207,
			'try' => 38,
			'switch' => 37,
			'block' => 327,
			'directive' => 86,
			'condition' => 87
		}
	},
	{#State 262
		ACTIONS => {
			"+" => 177,
			'CAT' => 183,
			'CMPOP' => 184,
			"?" => 178,
			'DIV' => 179,
			'MOD' => 185,
			"/" => 186,
			'AND' => 180,
			'BINOP' => 181,
			'OR' => 182
		},
		DEFAULT => -189
	},
	{#State 263
		ACTIONS => {
			'DOT' => 118
		},
		DEFAULT => -215
	},
	{#State 264
		DEFAULT => -216
	},
	{#State 265
		DEFAULT => -213
	},
	{#State 266
		DEFAULT => -217
	},
	{#State 267
		DEFAULT => -149
	},
	{#State 268
		ACTIONS => {
			'DIV' => 179,
			'MOD' => 185,
			"/" => 186
		},
		DEFAULT => -173
	},
	{#State 269
		ACTIONS => {
			":" => 328,
			'CMPOP' => 184,
			"?" => 178,
			"+" => 177,
			'MOD' => 185,
			'DIV' => 179,
			"/" => 186,
			'AND' => 180,
			'CAT' => 183,
			'BINOP' => 181,
			'OR' => 182
		}
	},
	{#State 270
		ACTIONS => {
			'MOD' => 185
		},
		DEFAULT => -174
	},
	{#State 271
		ACTIONS => {
			'DIV' => 179,
			'BINOP' => 181,
			"+" => 177,
			'CAT' => 183,
			'CMPOP' => 184,
			'MOD' => 185,
			"/" => 186
		},
		DEFAULT => -178
	},
	{#State 272
		ACTIONS => {
			'DIV' => 179,
			"+" => 177,
			'MOD' => 185,
			"/" => 186
		},
		DEFAULT => -171
	},
	{#State 273
		ACTIONS => {
			'DIV' => 179,
			'BINOP' => 181,
			"+" => 177,
			'CAT' => 183,
			'CMPOP' => 184,
			'MOD' => 185,
			"/" => 186
		},
		DEFAULT => -179
	},
	{#State 274
		ACTIONS => {
			'DIV' => 179,
			'BINOP' => 181,
			"+" => 177,
			'CMPOP' => 184,
			'MOD' => 185,
			"/" => 186
		},
		DEFAULT => -177
	},
	{#State 275
		ACTIONS => {
			'DIV' => 179,
			'BINOP' => 181,
			"+" => 177,
			'MOD' => 185,
			"/" => 186
		},
		DEFAULT => -176
	},
	{#State 276
		DEFAULT => -175
	},
	{#State 277
		ACTIONS => {
			'DIV' => 179,
			'MOD' => 185
		},
		DEFAULT => -172
	},
	{#State 278
		DEFAULT => -58
	},
	{#State 279
		ACTIONS => {
			"+" => 177,
			'CAT' => 183,
			'CMPOP' => 184,
			"?" => 178,
			'DIV' => 179,
			'MOD' => 185,
			"/" => 186,
			'AND' => 180,
			'BINOP' => 181,
			'OR' => 182
		},
		DEFAULT => -188
	},
	{#State 280
		ACTIONS => {
			'ELSIF' => 331,
			'ELSE' => 329
		},
		DEFAULT => -65,
		GOTOS => {
			'else' => 330
		}
	},
	{#State 281
		DEFAULT => -208
	},
	{#State 282
		ACTIONS => {
			'NOT' => 43,
			'IDENT' => 4,
			"\$" => 50,
			"[" => 11,
			"(" => 64,
			'LITERAL' => 289,
			"\"" => 74,
			'REF' => 30,
			'NUMBER' => 29,
			"{" => 33,
			'COMMA' => 291,
			"\${" => 41
		},
		DEFAULT => -200,
		GOTOS => {
			'expr' => 290,
			'sterm' => 82,
			'item' => 287,
			'param' => 288,
			'node' => 26,
			'ident' => 286,
			'term' => 72,
			'lterm' => 67
		}
	},
	{#State 283
		DEFAULT => -205
	},
	{#State 284
		DEFAULT => -203
	},
	{#State 285
		ACTIONS => {
			'NOT' => 43,
			"{" => 33,
			'COMMA' => 291,
			'LITERAL' => 289,
			'IDENT' => 4,
			"\"" => 74,
			"(" => 64,
			"\$" => 50,
			"[" => 11,
			'NUMBER' => 29,
			'REF' => 30,
			")" => 332,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 290,
			'sterm' => 82,
			'item' => 287,
			'param' => 288,
			'node' => 26,
			'ident' => 286,
			'term' => 72,
			'lterm' => 67
		}
	},
	{#State 286
		ACTIONS => {
			'DOT' => 118,
			'ASSIGN' => 333
		},
		DEFAULT => -147
	},
	{#State 287
		ACTIONS => {
			"(" => 154,
			'ASSIGN' => 236
		},
		DEFAULT => -166
	},
	{#State 288
		DEFAULT => -191
	},
	{#State 289
		ACTIONS => {
			'ASSIGN' => 239
		},
		DEFAULT => -150
	},
	{#State 290
		ACTIONS => {
			'DIV' => 179,
			'AND' => 180,
			'BINOP' => 181,
			'OR' => 182,
			"+" => 177,
			'CAT' => 183,
			'CMPOP' => 184,
			"?" => 178,
			'MOD' => 185,
			"/" => 186
		},
		DEFAULT => -190
	},
	{#State 291
		DEFAULT => -193
	},
	{#State 292
		DEFAULT => -155
	},
	{#State 293
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 51,
			"\$" => 50,
			'STOP' => 8,
			'CALL' => 52,
			'THROW' => 10,
			'GET' => 54,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 56,
			'DEBUG' => 58,
			'RAWPERL' => 15,
			'META' => 17,
			"(" => 64,
			'SWITCH' => 210,
			'MACRO' => 20,
			'WRAPPER' => 68,
			";" => -33,
			'FOR' => 23,
			'LITERAL' => 70,
			'NEXT' => 25,
			"\"" => 74,
			'TEXT' => 27,
			'RETURN' => 78,
			'FILTER' => 28,
			'INSERT' => 79,
			'NUMBER' => 29,
			'REF' => 30,
			'WHILE' => 81,
			'BLOCK' => 31,
			'DEFAULT' => 83,
			"{" => 33,
			'USE' => 35,
			'VIEW' => 39,
			"\${" => 41
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 208,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'defblock_ev' => 48,
			'capture' => 49,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 53,
			'atomexpr' => 55,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 57,
			'defblockname' => 16,
			'loopwhilevar' => 209,
			'ident' => 18,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 67,
			'defblock_std' => 24,
			'node' => 26,
			'term' => 72,
			'rawperl' => 73,
			'expr' => 75,
			'use' => 76,
			'defblock' => 80,
			'sterm' => 82,
			'filter' => 32,
			'perl' => 34,
			'setlist' => 85,
			'chunks' => 207,
			'try' => 38,
			'switch' => 37,
			'block' => 246,
			'directive' => 86,
			'condition' => 87
		}
	},
	{#State 294
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 51,
			"\$" => 50,
			'STOP' => 8,
			'CALL' => 52,
			'THROW' => 10,
			'GET' => 54,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 56,
			'DEBUG' => 58,
			'RAWPERL' => 15,
			'META' => 17,
			"(" => 64,
			'SWITCH' => 210,
			'MACRO' => 20,
			'WRAPPER' => 68,
			";" => -33,
			'FOR' => 23,
			'LITERAL' => 70,
			'NEXT' => 25,
			"\"" => 74,
			'TEXT' => 27,
			'RETURN' => 78,
			'FILTER' => 28,
			'INSERT' => 79,
			'NUMBER' => 29,
			'REF' => 30,
			'WHILE' => 81,
			'BLOCK' => 31,
			'DEFAULT' => 83,
			"{" => 33,
			'USE' => 35,
			'VIEW' => 39,
			"\${" => 41
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 208,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'defblock_ev' => 48,
			'capture' => 49,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 53,
			'atomexpr' => 55,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 57,
			'defblockname' => 16,
			'loopwhilevar' => 209,
			'ident' => 18,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 67,
			'defblock_std' => 24,
			'node' => 26,
			'term' => 72,
			'rawperl' => 73,
			'expr' => 75,
			'use' => 76,
			'defblock' => 80,
			'sterm' => 82,
			'filter' => 32,
			'perl' => 34,
			'setlist' => 85,
			'chunks' => 207,
			'try' => 38,
			'switch' => 37,
			'block' => 257,
			'directive' => 86,
			'condition' => 87
		}
	},
	{#State 295
		ACTIONS => {
			'CMPOP' => 184,
			"?" => 178,
			";" => 334,
			"+" => 177,
			'MOD' => 185,
			'DIV' => 179,
			"/" => 186,
			'AND' => 180,
			'CAT' => 183,
			'BINOP' => 181,
			'OR' => 182
		}
	},
	{#State 296
		ACTIONS => {
			";" => 335
		}
	},
	{#State 297
		ACTIONS => {
			'END' => 336
		}
	},
	{#State 298
		ACTIONS => {
			";" => 338,
			'DEFAULT' => 339,
			'FILENAME' => 97,
			'IDENT' => 95,
			'NUMBER' => 98
		},
		GOTOS => {
			'filepart' => 101,
			'filename' => 337
		}
	},
	{#State 299
		ACTIONS => {
			'END' => 340
		}
	},
	{#State 300
		DEFAULT => -140
	},
	{#State 301
		DEFAULT => -138
	},
	{#State 302
		ACTIONS => {
			'TEXT' => 341
		}
	},
	{#State 303
		ACTIONS => {
			'END' => 342
		}
	},
	{#State 304
		ACTIONS => {
			'END' => 343
		}
	},
	{#State 305
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 51,
			"\$" => 50,
			'STOP' => 8,
			'CALL' => 52,
			'THROW' => 10,
			'GET' => 54,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 56,
			'DEBUG' => 58,
			'RAWPERL' => 15,
			'META' => 17,
			"(" => 64,
			'SWITCH' => 210,
			'MACRO' => 20,
			'WRAPPER' => 68,
			";" => -33,
			'FOR' => 23,
			'LITERAL' => 70,
			'NEXT' => 25,
			"\"" => 74,
			'TEXT' => 27,
			'RETURN' => 78,
			'FILTER' => 28,
			'INSERT' => 79,
			'NUMBER' => 29,
			'REF' => 30,
			'WHILE' => 81,
			'BLOCK' => 31,
			'DEFAULT' => 83,
			"{" => 33,
			'USE' => 35,
			'VIEW' => 39,
			"\${" => 41
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 208,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'defblock_ev' => 48,
			'capture' => 49,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 53,
			'atomexpr' => 55,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 57,
			'defblockname' => 16,
			'loopwhilevar' => 209,
			'ident' => 18,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 67,
			'defblock_std' => 24,
			'node' => 26,
			'term' => 72,
			'rawperl' => 73,
			'expr' => 75,
			'use' => 76,
			'defblock' => 80,
			'sterm' => 82,
			'filter' => 32,
			'perl' => 34,
			'setlist' => 85,
			'chunks' => 207,
			'try' => 38,
			'switch' => 37,
			'block' => 344,
			'directive' => 86,
			'condition' => 87
		}
	},
	{#State 306
		ACTIONS => {
			'IDENT' => -134,
			")" => -134,
			'COMMA' => -134
		},
		DEFAULT => -168
	},
	{#State 307
		ACTIONS => {
			'COMMA' => 347,
			'IDENT' => 345,
			")" => 346
		}
	},
	{#State 308
		DEFAULT => -194,
		GOTOS => {
			'args' => 348
		}
	},
	{#State 309
		DEFAULT => -194,
		GOTOS => {
			'args' => 349
		}
	},
	{#State 310
		DEFAULT => -195
	},
	{#State 311
		ACTIONS => {
			'END' => 350
		}
	},
	{#State 312
		ACTIONS => {
			'ASSIGN' => -198
		},
		DEFAULT => -205
	},
	{#State 313
		ACTIONS => {
			'END' => 351
		}
	},
	{#State 314
		ACTIONS => {
			'DIV' => 179,
			'AND' => 180,
			'BINOP' => 181,
			'OR' => 182,
			"+" => 177,
			'CAT' => 183,
			'CMPOP' => 184,
			"?" => 178,
			'MOD' => 185,
			"/" => 186
		},
		DEFAULT => -162
	},
	{#State 315
		ACTIONS => {
			'DIV' => 179,
			'AND' => 180,
			'BINOP' => 181,
			'OR' => 182,
			"+" => 177,
			'CAT' => 183,
			'CMPOP' => 184,
			"?" => 178,
			'MOD' => 185,
			"/" => 186
		},
		DEFAULT => -161
	},
	{#State 316
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 51,
			"\$" => 50,
			'STOP' => 8,
			'CALL' => 52,
			'THROW' => 10,
			'GET' => 54,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 56,
			'DEBUG' => 58,
			'RAWPERL' => 15,
			'META' => 17,
			"(" => 64,
			'SWITCH' => 210,
			'MACRO' => 20,
			'WRAPPER' => 68,
			";" => -33,
			'FOR' => 23,
			'LITERAL' => 70,
			'NEXT' => 25,
			"\"" => 74,
			'TEXT' => 27,
			'RETURN' => 78,
			'FILTER' => 28,
			'INSERT' => 79,
			'NUMBER' => 29,
			'REF' => 30,
			'WHILE' => 81,
			'BLOCK' => 31,
			'DEFAULT' => 83,
			"{" => 33,
			'USE' => 35,
			'VIEW' => 39,
			"\${" => 41
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 208,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'defblock_ev' => 48,
			'capture' => 49,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 53,
			'atomexpr' => 55,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 57,
			'defblockname' => 16,
			'loopwhilevar' => 209,
			'ident' => 18,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 67,
			'defblock_std' => 24,
			'node' => 26,
			'term' => 72,
			'rawperl' => 73,
			'expr' => 75,
			'use' => 76,
			'defblock' => 80,
			'sterm' => 82,
			'filter' => 32,
			'perl' => 34,
			'setlist' => 85,
			'chunks' => 207,
			'try' => 38,
			'switch' => 37,
			'block' => 352,
			'directive' => 86,
			'condition' => 87
		}
	},
	{#State 317
		ACTIONS => {
			'DOT' => 118
		},
		DEFAULT => -20
	},
	{#State 318
		DEFAULT => -18
	},
	{#State 319
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 51,
			"\$" => 50,
			'STOP' => 8,
			'CALL' => 52,
			'THROW' => 10,
			'GET' => 54,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 56,
			'DEBUG' => 58,
			'RAWPERL' => 15,
			'META' => 17,
			'INCLUDE' => 19,
			"(" => 64,
			'SWITCH' => 65,
			'MACRO' => 20,
			'WRAPPER' => 68,
			";" => -33,
			'FOR' => 23,
			'LITERAL' => 70,
			'NEXT' => 25,
			"\"" => 74,
			'TEXT' => 27,
			'PROCESS' => 77,
			'RETURN' => 78,
			'FILTER' => 28,
			'INSERT' => 79,
			'NUMBER' => 29,
			'REF' => 30,
			'WHILE' => 81,
			'BLOCK' => 31,
			'DEFAULT' => 83,
			"{" => 33,
			'USE' => 35,
			'VIEW' => 39,
			'EVENT' => 40,
			"\${" => 41
		},
		DEFAULT => -9,
		GOTOS => {
			'event_switch' => 2,
			'loopforvar' => 42,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'defblock_ev' => 48,
			'capture' => 49,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 53,
			'atomexpr' => 55,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 57,
			'defblockname' => 16,
			'event_process' => 60,
			'loopwhilevar' => 61,
			'event' => 62,
			'ident' => 18,
			'event_template' => 353,
			'event_loop' => 66,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 67,
			'event_plug' => 69,
			'defblock_std' => 24,
			'finalblock' => 71,
			'node' => 26,
			'rawperl' => 73,
			'term' => 72,
			'use' => 76,
			'expr' => 75,
			'defblock' => 80,
			'sterm' => 82,
			'filter' => 32,
			'eventblock' => 84,
			'perl' => 34,
			'setlist' => 85,
			'chunks' => 36,
			'try' => 38,
			'switch' => 37,
			'directive' => 86,
			'condition' => 87
		}
	},
	{#State 320
		DEFAULT => -93
	},
	{#State 321
		DEFAULT => -167
	},
	{#State 322
		ACTIONS => {
			'END' => 354
		}
	},
	{#State 323
		ACTIONS => {
			'ELSIF' => 331,
			'ELSE' => 329
		},
		DEFAULT => -65,
		GOTOS => {
			'else' => 355
		}
	},
	{#State 324
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 51,
			"\$" => 50,
			'STOP' => 8,
			'CALL' => 52,
			'THROW' => 10,
			'GET' => 54,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 56,
			'DEBUG' => 58,
			'RAWPERL' => 15,
			'META' => 17,
			'INCLUDE' => 19,
			"(" => 64,
			'SWITCH' => 65,
			'MACRO' => 20,
			'WRAPPER' => 68,
			";" => -33,
			'FOR' => 23,
			'LITERAL' => 70,
			'NEXT' => 25,
			"\"" => 74,
			'TEXT' => 27,
			'PROCESS' => 77,
			'RETURN' => 78,
			'FILTER' => 28,
			'INSERT' => 79,
			'NUMBER' => 29,
			'REF' => 30,
			'WHILE' => 81,
			'BLOCK' => 31,
			'DEFAULT' => 83,
			"{" => 33,
			'USE' => 35,
			'VIEW' => 39,
			'EVENT' => 40,
			"\${" => 41
		},
		DEFAULT => -9,
		GOTOS => {
			'event_switch' => 2,
			'loopforvar' => 42,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'defblock_ev' => 48,
			'capture' => 49,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 53,
			'atomexpr' => 55,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 57,
			'defblockname' => 16,
			'event_process' => 60,
			'loopwhilevar' => 61,
			'event' => 62,
			'ident' => 18,
			'event_template' => 356,
			'event_loop' => 66,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 67,
			'event_plug' => 69,
			'defblock_std' => 24,
			'finalblock' => 71,
			'node' => 26,
			'rawperl' => 73,
			'term' => 72,
			'use' => 76,
			'expr' => 75,
			'defblock' => 80,
			'sterm' => 82,
			'filter' => 32,
			'eventblock' => 84,
			'perl' => 34,
			'setlist' => 85,
			'chunks' => 36,
			'try' => 38,
			'switch' => 37,
			'directive' => 86,
			'condition' => 87
		}
	},
	{#State 325
		DEFAULT => -94
	},
	{#State 326
		ACTIONS => {
			'CASE' => 358
		},
		GOTOS => {
			'caselst' => 357,
			'onecase' => 363,
			'eventcaselst' => 362,
			'eventcase' => 364,
			'case' => 361,
			'eventdefcase' => 360,
			'eventonecase' => 359
		}
	},
	{#State 327
		ACTIONS => {
			'END' => 365
		}
	},
	{#State 328
		ACTIONS => {
			'NOT' => 43,
			"{" => 33,
			'LITERAL' => 92,
			'IDENT' => 4,
			"\"" => 74,
			"(" => 64,
			"\$" => 50,
			"[" => 11,
			'NUMBER' => 29,
			'REF' => 30,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 366,
			'sterm' => 82,
			'item' => 44,
			'node' => 26,
			'ident' => 91,
			'term' => 72,
			'lterm' => 67
		}
	},
	{#State 329
		ACTIONS => {
			";" => 367
		}
	},
	{#State 330
		ACTIONS => {
			'END' => 368
		}
	},
	{#State 331
		ACTIONS => {
			'NOT' => 43,
			"{" => 33,
			'LITERAL' => 92,
			'IDENT' => 4,
			"\"" => 74,
			"(" => 64,
			"\$" => 50,
			"[" => 11,
			'NUMBER' => 29,
			'REF' => 30,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 369,
			'sterm' => 82,
			'item' => 44,
			'node' => 26,
			'ident' => 91,
			'term' => 72,
			'lterm' => 67
		}
	},
	{#State 332
		DEFAULT => -202
	},
	{#State 333
		ACTIONS => {
			'NOT' => 43,
			"{" => 33,
			'LITERAL' => 92,
			'IDENT' => 4,
			"\"" => 74,
			"(" => 64,
			"\$" => 50,
			"[" => 11,
			'NUMBER' => 29,
			'REF' => 30,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 370,
			'sterm' => 82,
			'item' => 44,
			'node' => 26,
			'ident' => 91,
			'term' => 72,
			'lterm' => 67
		}
	},
	{#State 334
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 51,
			"\$" => 50,
			'STOP' => 8,
			'CALL' => 52,
			'THROW' => 10,
			'GET' => 54,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 56,
			'DEBUG' => 58,
			'RAWPERL' => 15,
			'META' => 17,
			"(" => 64,
			'SWITCH' => 210,
			'MACRO' => 20,
			'WRAPPER' => 68,
			";" => -33,
			'FOR' => 23,
			'LITERAL' => 70,
			'NEXT' => 25,
			"\"" => 74,
			'TEXT' => 27,
			'RETURN' => 78,
			'FILTER' => 28,
			'INSERT' => 79,
			'NUMBER' => 29,
			'REF' => 30,
			'WHILE' => 81,
			'BLOCK' => 31,
			'DEFAULT' => 83,
			"{" => 33,
			'USE' => 35,
			'VIEW' => 39,
			"\${" => 41
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 208,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'defblock_ev' => 48,
			'capture' => 49,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 53,
			'atomexpr' => 55,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 57,
			'defblockname' => 16,
			'loopwhilevar' => 209,
			'ident' => 18,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 67,
			'defblock_std' => 24,
			'node' => 26,
			'term' => 72,
			'rawperl' => 73,
			'expr' => 75,
			'use' => 76,
			'defblock' => 80,
			'sterm' => 82,
			'filter' => 32,
			'perl' => 34,
			'setlist' => 85,
			'chunks' => 207,
			'try' => 38,
			'switch' => 37,
			'block' => 371,
			'directive' => 86,
			'condition' => 87
		}
	},
	{#State 335
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 51,
			"\$" => 50,
			'STOP' => 8,
			'CALL' => 52,
			'THROW' => 10,
			'GET' => 54,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 56,
			'DEBUG' => 58,
			'RAWPERL' => 15,
			'META' => 17,
			"(" => 64,
			'SWITCH' => 210,
			'MACRO' => 20,
			'WRAPPER' => 68,
			";" => -33,
			'FOR' => 23,
			'LITERAL' => 70,
			'NEXT' => 25,
			"\"" => 74,
			'TEXT' => 27,
			'RETURN' => 78,
			'FILTER' => 28,
			'INSERT' => 79,
			'NUMBER' => 29,
			'REF' => 30,
			'WHILE' => 81,
			'BLOCK' => 31,
			'DEFAULT' => 83,
			"{" => 33,
			'USE' => 35,
			'VIEW' => 39,
			"\${" => 41
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 208,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'defblock_ev' => 48,
			'capture' => 49,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 53,
			'atomexpr' => 55,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 57,
			'defblockname' => 16,
			'loopwhilevar' => 209,
			'ident' => 18,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 67,
			'defblock_std' => 24,
			'node' => 26,
			'term' => 72,
			'rawperl' => 73,
			'expr' => 75,
			'use' => 76,
			'defblock' => 80,
			'sterm' => 82,
			'filter' => 32,
			'perl' => 34,
			'setlist' => 85,
			'chunks' => 207,
			'try' => 38,
			'switch' => 37,
			'block' => 372,
			'directive' => 86,
			'condition' => 87
		}
	},
	{#State 336
		DEFAULT => -102
	},
	{#State 337
		ACTIONS => {
			'DOT' => 196,
			";" => 373
		}
	},
	{#State 338
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 51,
			"\$" => 50,
			'STOP' => 8,
			'CALL' => 52,
			'THROW' => 10,
			'GET' => 54,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 56,
			'DEBUG' => 58,
			'RAWPERL' => 15,
			'META' => 17,
			"(" => 64,
			'SWITCH' => 210,
			'MACRO' => 20,
			'WRAPPER' => 68,
			";" => -33,
			'FOR' => 23,
			'LITERAL' => 70,
			'NEXT' => 25,
			"\"" => 74,
			'TEXT' => 27,
			'RETURN' => 78,
			'FILTER' => 28,
			'INSERT' => 79,
			'NUMBER' => 29,
			'REF' => 30,
			'WHILE' => 81,
			'BLOCK' => 31,
			'DEFAULT' => 83,
			"{" => 33,
			'USE' => 35,
			'VIEW' => 39,
			"\${" => 41
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 208,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'defblock_ev' => 48,
			'capture' => 49,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 53,
			'atomexpr' => 55,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 57,
			'defblockname' => 16,
			'loopwhilevar' => 209,
			'ident' => 18,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 67,
			'defblock_std' => 24,
			'node' => 26,
			'term' => 72,
			'rawperl' => 73,
			'expr' => 75,
			'use' => 76,
			'defblock' => 80,
			'sterm' => 82,
			'filter' => 32,
			'perl' => 34,
			'setlist' => 85,
			'chunks' => 207,
			'try' => 38,
			'switch' => 37,
			'block' => 374,
			'directive' => 86,
			'condition' => 87
		}
	},
	{#State 339
		ACTIONS => {
			";" => 375
		}
	},
	{#State 340
		DEFAULT => -114
	},
	{#State 341
		ACTIONS => {
			"\"" => 376
		}
	},
	{#State 342
		DEFAULT => -119
	},
	{#State 343
		DEFAULT => -120
	},
	{#State 344
		ACTIONS => {
			'END' => 377
		}
	},
	{#State 345
		DEFAULT => -132
	},
	{#State 346
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 51,
			"\$" => 50,
			'STOP' => 8,
			'CALL' => 52,
			'THROW' => 10,
			'GET' => 54,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 56,
			'DEBUG' => 58,
			"(" => 64,
			'SWITCH' => 210,
			'WRAPPER' => 68,
			'FOR' => 23,
			'NEXT' => 25,
			'LITERAL' => 70,
			"\"" => 74,
			'FILTER' => 28,
			'RETURN' => 78,
			'INSERT' => 79,
			'NUMBER' => 29,
			'REF' => 30,
			'WHILE' => 81,
			'BLOCK' => 219,
			"{" => 33,
			'DEFAULT' => 83,
			"\${" => 41
		},
		GOTOS => {
			'loopforvar' => 208,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'node' => 26,
			'term' => 72,
			'loop' => 6,
			'expr' => 226,
			'wrapper' => 53,
			'atomexpr' => 55,
			'atomdir' => 14,
			'mdir' => 378,
			'sterm' => 82,
			'filter' => 32,
			'loopwhilevar' => 209,
			'ident' => 169,
			'perl' => 34,
			'setlist' => 85,
			'try' => 38,
			'switch' => 37,
			'assign' => 21,
			'directive' => 222,
			'condition' => 87,
			'lterm' => 67
		}
	},
	{#State 347
		DEFAULT => -133
	},
	{#State 348
		ACTIONS => {
			'NOT' => 43,
			"{" => 33,
			'COMMA' => 291,
			'LITERAL' => 289,
			'IDENT' => 4,
			"\"" => 74,
			"(" => 64,
			"\$" => 50,
			"[" => 11,
			'NUMBER' => 29,
			'REF' => 30,
			"\${" => 41
		},
		DEFAULT => -97,
		GOTOS => {
			'expr' => 290,
			'sterm' => 82,
			'item' => 287,
			'param' => 288,
			'node' => 26,
			'ident' => 286,
			'term' => 72,
			'lterm' => 67
		}
	},
	{#State 349
		ACTIONS => {
			'NOT' => 43,
			"{" => 33,
			'COMMA' => 291,
			'LITERAL' => 289,
			'IDENT' => 4,
			"\"" => 74,
			"(" => 64,
			"\$" => 50,
			"[" => 11,
			'NUMBER' => 29,
			'REF' => 30,
			"\${" => 41
		},
		DEFAULT => -98,
		GOTOS => {
			'expr' => 290,
			'sterm' => 82,
			'item' => 287,
			'param' => 288,
			'node' => 26,
			'ident' => 286,
			'term' => 72,
			'lterm' => 67
		}
	},
	{#State 350
		DEFAULT => -115
	},
	{#State 351
		DEFAULT => -126
	},
	{#State 352
		ACTIONS => {
			'END' => 379
		}
	},
	{#State 353
		DEFAULT => -88
	},
	{#State 354
		DEFAULT => -112
	},
	{#State 355
		ACTIONS => {
			'END' => 380
		}
	},
	{#State 356
		DEFAULT => -87
	},
	{#State 357
		ACTIONS => {
			'CASE' => 381
		},
		DEFAULT => -78,
		GOTOS => {
			'onecase' => 385,
			'defcase' => 384,
			'eventdefcase' => 383,
			'eventonecase' => 382
		}
	},
	{#State 358
		ACTIONS => {
			";" => 386,
			'DEFAULT' => 388,
			"{" => 33,
			'LITERAL' => 92,
			'IDENT' => 4,
			"\"" => 74,
			"\$" => 50,
			"[" => 11,
			'NUMBER' => 29,
			'REF' => 30,
			"\${" => 41
		},
		GOTOS => {
			'sterm' => 82,
			'item' => 44,
			'node' => 26,
			'ident' => 91,
			'term' => 387,
			'lterm' => 67
		}
	},
	{#State 359
		DEFAULT => -75
	},
	{#State 360
		DEFAULT => -76
	},
	{#State 361
		ACTIONS => {
			'END' => 389
		}
	},
	{#State 362
		ACTIONS => {
			'CASE' => 381
		},
		DEFAULT => -68,
		GOTOS => {
			'onecase' => 393,
			'defcase' => 392,
			'eventdefcase' => 391,
			'eventonecase' => 390
		}
	},
	{#State 363
		DEFAULT => -80
	},
	{#State 364
		ACTIONS => {
			'END' => 394
		}
	},
	{#State 365
		DEFAULT => -100
	},
	{#State 366
		ACTIONS => {
			'DIV' => 179,
			'AND' => 180,
			'BINOP' => 181,
			'OR' => 182,
			"+" => 177,
			'CAT' => 183,
			'CMPOP' => 184,
			"?" => 178,
			'MOD' => 185,
			"/" => 186
		},
		DEFAULT => -181
	},
	{#State 367
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 51,
			"\$" => 50,
			'STOP' => 8,
			'CALL' => 52,
			'THROW' => 10,
			'GET' => 54,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 56,
			'DEBUG' => 58,
			'RAWPERL' => 15,
			'META' => 17,
			"(" => 64,
			'SWITCH' => 210,
			'MACRO' => 20,
			'WRAPPER' => 68,
			";" => -33,
			'FOR' => 23,
			'LITERAL' => 70,
			'NEXT' => 25,
			"\"" => 74,
			'TEXT' => 27,
			'RETURN' => 78,
			'FILTER' => 28,
			'INSERT' => 79,
			'NUMBER' => 29,
			'REF' => 30,
			'WHILE' => 81,
			'BLOCK' => 31,
			'DEFAULT' => 83,
			"{" => 33,
			'USE' => 35,
			'VIEW' => 39,
			"\${" => 41
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 208,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'defblock_ev' => 48,
			'capture' => 49,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 53,
			'atomexpr' => 55,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 57,
			'defblockname' => 16,
			'loopwhilevar' => 209,
			'ident' => 18,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 67,
			'defblock_std' => 24,
			'node' => 26,
			'term' => 72,
			'rawperl' => 73,
			'expr' => 75,
			'use' => 76,
			'defblock' => 80,
			'sterm' => 82,
			'filter' => 32,
			'perl' => 34,
			'setlist' => 85,
			'chunks' => 207,
			'try' => 38,
			'switch' => 37,
			'block' => 395,
			'directive' => 86,
			'condition' => 87
		}
	},
	{#State 368
		DEFAULT => -61
	},
	{#State 369
		ACTIONS => {
			'CMPOP' => 184,
			"?" => 178,
			";" => 396,
			"+" => 177,
			'MOD' => 185,
			'DIV' => 179,
			"/" => 186,
			'AND' => 180,
			'CAT' => 183,
			'BINOP' => 181,
			'OR' => 182
		}
	},
	{#State 370
		ACTIONS => {
			'DIV' => 179,
			'AND' => 180,
			'BINOP' => 181,
			'OR' => 182,
			"+" => 177,
			'CAT' => 183,
			'CMPOP' => 184,
			"?" => 178,
			'MOD' => 185,
			"/" => 186
		},
		DEFAULT => -192
	},
	{#State 371
		ACTIONS => {
			'CASE' => 398
		},
		GOTOS => {
			'caselst' => 397,
			'onecase' => 363,
			'case' => 361
		}
	},
	{#State 372
		DEFAULT => -106
	},
	{#State 373
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 51,
			"\$" => 50,
			'STOP' => 8,
			'CALL' => 52,
			'THROW' => 10,
			'GET' => 54,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 56,
			'DEBUG' => 58,
			'RAWPERL' => 15,
			'META' => 17,
			"(" => 64,
			'SWITCH' => 210,
			'MACRO' => 20,
			'WRAPPER' => 68,
			";" => -33,
			'FOR' => 23,
			'LITERAL' => 70,
			'NEXT' => 25,
			"\"" => 74,
			'TEXT' => 27,
			'RETURN' => 78,
			'FILTER' => 28,
			'INSERT' => 79,
			'NUMBER' => 29,
			'REF' => 30,
			'WHILE' => 81,
			'BLOCK' => 31,
			'DEFAULT' => 83,
			"{" => 33,
			'USE' => 35,
			'VIEW' => 39,
			"\${" => 41
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 208,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'defblock_ev' => 48,
			'capture' => 49,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 53,
			'atomexpr' => 55,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 57,
			'defblockname' => 16,
			'loopwhilevar' => 209,
			'ident' => 18,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 67,
			'defblock_std' => 24,
			'node' => 26,
			'term' => 72,
			'rawperl' => 73,
			'expr' => 75,
			'use' => 76,
			'defblock' => 80,
			'sterm' => 82,
			'filter' => 32,
			'perl' => 34,
			'setlist' => 85,
			'chunks' => 207,
			'try' => 38,
			'switch' => 37,
			'block' => 399,
			'directive' => 86,
			'condition' => 87
		}
	},
	{#State 374
		ACTIONS => {
			'FINAL' => 296,
			'CATCH' => 298
		},
		DEFAULT => -107,
		GOTOS => {
			'final' => 400
		}
	},
	{#State 375
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 51,
			"\$" => 50,
			'STOP' => 8,
			'CALL' => 52,
			'THROW' => 10,
			'GET' => 54,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 56,
			'DEBUG' => 58,
			'RAWPERL' => 15,
			'META' => 17,
			"(" => 64,
			'SWITCH' => 210,
			'MACRO' => 20,
			'WRAPPER' => 68,
			";" => -33,
			'FOR' => 23,
			'LITERAL' => 70,
			'NEXT' => 25,
			"\"" => 74,
			'TEXT' => 27,
			'RETURN' => 78,
			'FILTER' => 28,
			'INSERT' => 79,
			'NUMBER' => 29,
			'REF' => 30,
			'WHILE' => 81,
			'BLOCK' => 31,
			'DEFAULT' => 83,
			"{" => 33,
			'USE' => 35,
			'VIEW' => 39,
			"\${" => 41
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 208,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'defblock_ev' => 48,
			'capture' => 49,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 53,
			'atomexpr' => 55,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 57,
			'defblockname' => 16,
			'loopwhilevar' => 209,
			'ident' => 18,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 67,
			'defblock_std' => 24,
			'node' => 26,
			'term' => 72,
			'rawperl' => 73,
			'expr' => 75,
			'use' => 76,
			'defblock' => 80,
			'sterm' => 82,
			'filter' => 32,
			'perl' => 34,
			'setlist' => 85,
			'chunks' => 207,
			'try' => 38,
			'switch' => 37,
			'block' => 401,
			'directive' => 86,
			'condition' => 87
		}
	},
	{#State 376
		DEFAULT => -139
	},
	{#State 377
		DEFAULT => -131
	},
	{#State 378
		DEFAULT => -128
	},
	{#State 379
		DEFAULT => -110
	},
	{#State 380
		DEFAULT => -59
	},
	{#State 381
		ACTIONS => {
			";" => 402,
			'DEFAULT' => 403,
			"{" => 33,
			'LITERAL' => 92,
			'IDENT' => 4,
			"\"" => 74,
			"\$" => 50,
			"[" => 11,
			'NUMBER' => 29,
			'REF' => 30,
			"\${" => 41
		},
		GOTOS => {
			'sterm' => 82,
			'item' => 44,
			'node' => 26,
			'ident' => 91,
			'term' => 387,
			'lterm' => 67
		}
	},
	{#State 382
		DEFAULT => -74
	},
	{#State 383
		DEFAULT => -71
	},
	{#State 384
		DEFAULT => -77
	},
	{#State 385
		DEFAULT => -79
	},
	{#State 386
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 51,
			"\$" => 50,
			'STOP' => 8,
			'CALL' => 52,
			'THROW' => 10,
			'GET' => 54,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 56,
			'DEBUG' => 58,
			'RAWPERL' => 15,
			'META' => 17,
			'INCLUDE' => 19,
			"(" => 64,
			'SWITCH' => 65,
			'MACRO' => 20,
			'WRAPPER' => 68,
			'FOR' => 23,
			'LITERAL' => 70,
			'NEXT' => 25,
			"\"" => 74,
			'TEXT' => 27,
			'PROCESS' => 77,
			'RETURN' => 78,
			'FILTER' => 28,
			'INSERT' => 79,
			'NUMBER' => 29,
			'REF' => 30,
			'WHILE' => 81,
			'BLOCK' => 31,
			'DEFAULT' => 83,
			"{" => 33,
			'USE' => 35,
			'VIEW' => 39,
			'EVENT' => 40,
			"\${" => 41
		},
		DEFAULT => -33,
		GOTOS => {
			'event_switch' => 2,
			'loopforvar' => 42,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'defblock_ev' => 48,
			'capture' => 49,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 53,
			'atomexpr' => 55,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 57,
			'defblockname' => 16,
			'event_process' => 60,
			'loopwhilevar' => 61,
			'event' => 62,
			'ident' => 18,
			'event_loop' => 66,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 67,
			'event_plug' => 69,
			'defblock_std' => 24,
			'node' => 26,
			'rawperl' => 73,
			'term' => 72,
			'use' => 76,
			'expr' => 75,
			'defblock' => 80,
			'sterm' => 82,
			'filter' => 32,
			'eventblock' => 405,
			'perl' => 34,
			'setlist' => 85,
			'chunks' => 404,
			'try' => 38,
			'switch' => 37,
			'directive' => 86,
			'condition' => 87
		}
	},
	{#State 387
		ACTIONS => {
			";" => 406
		}
	},
	{#State 388
		ACTIONS => {
			";" => 407
		}
	},
	{#State 389
		DEFAULT => -67
	},
	{#State 390
		DEFAULT => -72
	},
	{#State 391
		DEFAULT => -69
	},
	{#State 392
		DEFAULT => -70
	},
	{#State 393
		DEFAULT => -73
	},
	{#State 394
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 51,
			"\$" => 50,
			'STOP' => 8,
			'CALL' => 52,
			'THROW' => 10,
			'GET' => 54,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 56,
			'DEBUG' => 58,
			'RAWPERL' => 15,
			'META' => 17,
			'INCLUDE' => 19,
			"(" => 64,
			'SWITCH' => 65,
			'MACRO' => 20,
			'WRAPPER' => 68,
			";" => -33,
			'FOR' => 23,
			'LITERAL' => 70,
			'NEXT' => 25,
			"\"" => 74,
			'TEXT' => 27,
			'PROCESS' => 77,
			'RETURN' => 78,
			'FILTER' => 28,
			'INSERT' => 79,
			'NUMBER' => 29,
			'REF' => 30,
			'WHILE' => 81,
			'BLOCK' => 31,
			'DEFAULT' => 83,
			"{" => 33,
			'USE' => 35,
			'VIEW' => 39,
			'EVENT' => 40,
			"\${" => 41
		},
		DEFAULT => -9,
		GOTOS => {
			'event_switch' => 2,
			'loopforvar' => 42,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'defblock_ev' => 48,
			'capture' => 49,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 53,
			'atomexpr' => 55,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 57,
			'defblockname' => 16,
			'event_process' => 60,
			'loopwhilevar' => 61,
			'event' => 62,
			'ident' => 18,
			'event_template' => 408,
			'event_loop' => 66,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 67,
			'event_plug' => 69,
			'defblock_std' => 24,
			'finalblock' => 71,
			'node' => 26,
			'rawperl' => 73,
			'term' => 72,
			'use' => 76,
			'expr' => 75,
			'defblock' => 80,
			'sterm' => 82,
			'filter' => 32,
			'eventblock' => 84,
			'perl' => 34,
			'setlist' => 85,
			'chunks' => 36,
			'try' => 38,
			'switch' => 37,
			'directive' => 86,
			'condition' => 87
		}
	},
	{#State 395
		DEFAULT => -64
	},
	{#State 396
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 51,
			"\$" => 50,
			'STOP' => 8,
			'CALL' => 52,
			'THROW' => 10,
			'GET' => 54,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 56,
			'DEBUG' => 58,
			'RAWPERL' => 15,
			'META' => 17,
			"(" => 64,
			'SWITCH' => 210,
			'MACRO' => 20,
			'WRAPPER' => 68,
			";" => -33,
			'FOR' => 23,
			'LITERAL' => 70,
			'NEXT' => 25,
			"\"" => 74,
			'TEXT' => 27,
			'RETURN' => 78,
			'FILTER' => 28,
			'INSERT' => 79,
			'NUMBER' => 29,
			'REF' => 30,
			'WHILE' => 81,
			'BLOCK' => 31,
			'DEFAULT' => 83,
			"{" => 33,
			'USE' => 35,
			'VIEW' => 39,
			"\${" => 41
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 208,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'defblock_ev' => 48,
			'capture' => 49,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 53,
			'atomexpr' => 55,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 57,
			'defblockname' => 16,
			'loopwhilevar' => 209,
			'ident' => 18,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 67,
			'defblock_std' => 24,
			'node' => 26,
			'term' => 72,
			'rawperl' => 73,
			'expr' => 75,
			'use' => 76,
			'defblock' => 80,
			'sterm' => 82,
			'filter' => 32,
			'perl' => 34,
			'setlist' => 85,
			'chunks' => 207,
			'try' => 38,
			'switch' => 37,
			'block' => 409,
			'directive' => 86,
			'condition' => 87
		}
	},
	{#State 397
		ACTIONS => {
			'CASE' => 410
		},
		DEFAULT => -78,
		GOTOS => {
			'onecase' => 385,
			'defcase' => 384
		}
	},
	{#State 398
		ACTIONS => {
			"{" => 33,
			'LITERAL' => 92,
			'IDENT' => 4,
			"\"" => 74,
			"\$" => 50,
			"[" => 11,
			'NUMBER' => 29,
			'REF' => 30,
			"\${" => 41
		},
		GOTOS => {
			'sterm' => 82,
			'item' => 44,
			'node' => 26,
			'ident' => 91,
			'term' => 411,
			'lterm' => 67
		}
	},
	{#State 399
		ACTIONS => {
			'FINAL' => 296,
			'CATCH' => 298
		},
		DEFAULT => -107,
		GOTOS => {
			'final' => 412
		}
	},
	{#State 400
		DEFAULT => -105
	},
	{#State 401
		ACTIONS => {
			'FINAL' => 296,
			'CATCH' => 298
		},
		DEFAULT => -107,
		GOTOS => {
			'final' => 413
		}
	},
	{#State 402
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 51,
			"\$" => 50,
			'STOP' => 8,
			'CALL' => 52,
			'THROW' => 10,
			'GET' => 54,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 56,
			'DEBUG' => 58,
			'RAWPERL' => 15,
			'META' => 17,
			'INCLUDE' => 19,
			"(" => 64,
			'SWITCH' => 65,
			'MACRO' => 20,
			'WRAPPER' => 68,
			";" => -33,
			'FOR' => 23,
			'LITERAL' => 70,
			'NEXT' => 25,
			"\"" => 74,
			'TEXT' => 27,
			'PROCESS' => 77,
			'RETURN' => 78,
			'FILTER' => 28,
			'INSERT' => 79,
			'NUMBER' => 29,
			'REF' => 30,
			'WHILE' => 81,
			'BLOCK' => 31,
			'DEFAULT' => 83,
			"{" => 33,
			'USE' => 35,
			'VIEW' => 39,
			'EVENT' => 40,
			"\${" => 41
		},
		DEFAULT => -11,
		GOTOS => {
			'event_switch' => 2,
			'loopforvar' => 42,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'defblock_ev' => 48,
			'capture' => 49,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 53,
			'atomexpr' => 55,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 57,
			'defblockname' => 16,
			'event_process' => 60,
			'loopwhilevar' => 61,
			'event' => 62,
			'ident' => 18,
			'event_loop' => 66,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 67,
			'event_plug' => 69,
			'defblock_std' => 24,
			'node' => 26,
			'rawperl' => 73,
			'term' => 72,
			'use' => 76,
			'expr' => 75,
			'defblock' => 80,
			'sterm' => 82,
			'filter' => 32,
			'eventblock' => 405,
			'perl' => 34,
			'setlist' => 85,
			'chunks' => 244,
			'try' => 38,
			'switch' => 37,
			'block' => 414,
			'directive' => 86,
			'condition' => 87
		}
	},
	{#State 403
		ACTIONS => {
			";" => 415
		}
	},
	{#State 404
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 51,
			"\$" => 50,
			'STOP' => 8,
			'CALL' => 52,
			'THROW' => 10,
			'GET' => 54,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 56,
			'DEBUG' => 58,
			'RAWPERL' => 15,
			'META' => 17,
			'INCLUDE' => 19,
			"(" => 64,
			'SWITCH' => 65,
			'MACRO' => 20,
			'WRAPPER' => 68,
			'FOR' => 23,
			'LITERAL' => 70,
			'NEXT' => 25,
			"\"" => 74,
			'TEXT' => 27,
			'PROCESS' => 77,
			'RETURN' => 78,
			'FILTER' => 28,
			'INSERT' => 79,
			'NUMBER' => 29,
			'REF' => 30,
			'WHILE' => 81,
			'BLOCK' => 31,
			'DEFAULT' => 83,
			"{" => 33,
			'USE' => 35,
			'VIEW' => 39,
			'EVENT' => 40,
			"\${" => 41
		},
		DEFAULT => -33,
		GOTOS => {
			'event_switch' => 2,
			'loopforvar' => 42,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'defblock_ev' => 48,
			'capture' => 49,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 53,
			'atomexpr' => 55,
			'chunk' => 145,
			'atomdir' => 14,
			'anonblock' => 57,
			'defblockname' => 16,
			'event_process' => 60,
			'loopwhilevar' => 61,
			'event' => 146,
			'ident' => 18,
			'event_loop' => 66,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 67,
			'event_plug' => 69,
			'defblock_std' => 24,
			'node' => 26,
			'rawperl' => 73,
			'term' => 72,
			'use' => 76,
			'expr' => 75,
			'defblock' => 80,
			'sterm' => 82,
			'filter' => 32,
			'perl' => 34,
			'setlist' => 85,
			'try' => 38,
			'switch' => 37,
			'directive' => 86,
			'condition' => 87
		}
	},
	{#State 405
		DEFAULT => -82
	},
	{#State 406
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 51,
			"\$" => 50,
			'STOP' => 8,
			'CALL' => 52,
			'THROW' => 10,
			'GET' => 54,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 56,
			'DEBUG' => 58,
			'RAWPERL' => 15,
			'META' => 17,
			'INCLUDE' => 19,
			"(" => 64,
			'SWITCH' => 65,
			'MACRO' => 20,
			'WRAPPER' => 68,
			";" => -33,
			'FOR' => 23,
			'LITERAL' => 70,
			'NEXT' => 25,
			"\"" => 74,
			'TEXT' => 27,
			'PROCESS' => 77,
			'RETURN' => 78,
			'FILTER' => 28,
			'INSERT' => 79,
			'NUMBER' => 29,
			'REF' => 30,
			'WHILE' => 81,
			'BLOCK' => 31,
			'DEFAULT' => 83,
			"{" => 33,
			'USE' => 35,
			'VIEW' => 39,
			'EVENT' => 40,
			"\${" => 41
		},
		DEFAULT => -11,
		GOTOS => {
			'event_switch' => 2,
			'loopforvar' => 42,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'defblock_ev' => 48,
			'capture' => 49,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 53,
			'atomexpr' => 55,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 57,
			'defblockname' => 16,
			'event_process' => 60,
			'loopwhilevar' => 61,
			'event' => 62,
			'ident' => 18,
			'event_loop' => 66,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 67,
			'event_plug' => 69,
			'defblock_std' => 24,
			'node' => 26,
			'rawperl' => 73,
			'term' => 72,
			'use' => 76,
			'expr' => 75,
			'defblock' => 80,
			'sterm' => 82,
			'filter' => 32,
			'eventblock' => 416,
			'perl' => 34,
			'setlist' => 85,
			'chunks' => 244,
			'try' => 38,
			'switch' => 37,
			'block' => 417,
			'directive' => 86,
			'condition' => 87
		}
	},
	{#State 407
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 51,
			"\$" => 50,
			'STOP' => 8,
			'CALL' => 52,
			'THROW' => 10,
			'GET' => 54,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 56,
			'DEBUG' => 58,
			'RAWPERL' => 15,
			'META' => 17,
			'INCLUDE' => 19,
			"(" => 64,
			'SWITCH' => 65,
			'MACRO' => 20,
			'WRAPPER' => 68,
			'FOR' => 23,
			'LITERAL' => 70,
			'NEXT' => 25,
			"\"" => 74,
			'TEXT' => 27,
			'PROCESS' => 77,
			'RETURN' => 78,
			'FILTER' => 28,
			'INSERT' => 79,
			'NUMBER' => 29,
			'REF' => 30,
			'WHILE' => 81,
			'BLOCK' => 31,
			'DEFAULT' => 83,
			"{" => 33,
			'USE' => 35,
			'VIEW' => 39,
			'EVENT' => 40,
			"\${" => 41
		},
		DEFAULT => -33,
		GOTOS => {
			'event_switch' => 2,
			'loopforvar' => 42,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'defblock_ev' => 48,
			'capture' => 49,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 53,
			'atomexpr' => 55,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 57,
			'defblockname' => 16,
			'event_process' => 60,
			'loopwhilevar' => 61,
			'event' => 62,
			'ident' => 18,
			'event_loop' => 66,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 67,
			'event_plug' => 69,
			'defblock_std' => 24,
			'node' => 26,
			'rawperl' => 73,
			'term' => 72,
			'use' => 76,
			'expr' => 75,
			'defblock' => 80,
			'sterm' => 82,
			'filter' => 32,
			'eventblock' => 418,
			'perl' => 34,
			'setlist' => 85,
			'chunks' => 404,
			'try' => 38,
			'switch' => 37,
			'directive' => 86,
			'condition' => 87
		}
	},
	{#State 408
		DEFAULT => -66
	},
	{#State 409
		ACTIONS => {
			'ELSIF' => 331,
			'ELSE' => 329
		},
		DEFAULT => -65,
		GOTOS => {
			'else' => 419
		}
	},
	{#State 410
		ACTIONS => {
			";" => 420,
			'DEFAULT' => 421,
			"{" => 33,
			'LITERAL' => 92,
			'IDENT' => 4,
			"\"" => 74,
			"\$" => 50,
			"[" => 11,
			'NUMBER' => 29,
			'REF' => 30,
			"\${" => 41
		},
		GOTOS => {
			'sterm' => 82,
			'item' => 44,
			'node' => 26,
			'ident' => 91,
			'term' => 411,
			'lterm' => 67
		}
	},
	{#State 411
		ACTIONS => {
			";" => 422
		}
	},
	{#State 412
		DEFAULT => -103
	},
	{#State 413
		DEFAULT => -104
	},
	{#State 414
		DEFAULT => -84
	},
	{#State 415
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 51,
			"\$" => 50,
			'STOP' => 8,
			'CALL' => 52,
			'THROW' => 10,
			'GET' => 54,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 56,
			'DEBUG' => 58,
			'RAWPERL' => 15,
			'META' => 17,
			'INCLUDE' => 19,
			"(" => 64,
			'SWITCH' => 65,
			'MACRO' => 20,
			'WRAPPER' => 68,
			";" => -33,
			'FOR' => 23,
			'LITERAL' => 70,
			'NEXT' => 25,
			"\"" => 74,
			'TEXT' => 27,
			'PROCESS' => 77,
			'RETURN' => 78,
			'FILTER' => 28,
			'INSERT' => 79,
			'NUMBER' => 29,
			'REF' => 30,
			'WHILE' => 81,
			'BLOCK' => 31,
			'DEFAULT' => 83,
			"{" => 33,
			'USE' => 35,
			'VIEW' => 39,
			'EVENT' => 40,
			"\${" => 41
		},
		DEFAULT => -11,
		GOTOS => {
			'event_switch' => 2,
			'loopforvar' => 42,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'defblock_ev' => 48,
			'capture' => 49,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 53,
			'atomexpr' => 55,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 57,
			'defblockname' => 16,
			'event_process' => 60,
			'loopwhilevar' => 61,
			'event' => 62,
			'ident' => 18,
			'event_loop' => 66,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 67,
			'event_plug' => 69,
			'defblock_std' => 24,
			'node' => 26,
			'rawperl' => 73,
			'term' => 72,
			'use' => 76,
			'expr' => 75,
			'defblock' => 80,
			'sterm' => 82,
			'filter' => 32,
			'eventblock' => 418,
			'perl' => 34,
			'setlist' => 85,
			'chunks' => 244,
			'try' => 38,
			'switch' => 37,
			'block' => 423,
			'directive' => 86,
			'condition' => 87
		}
	},
	{#State 416
		DEFAULT => -85
	},
	{#State 417
		DEFAULT => -86
	},
	{#State 418
		DEFAULT => -81
	},
	{#State 419
		DEFAULT => -63
	},
	{#State 420
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 51,
			"\$" => 50,
			'STOP' => 8,
			'CALL' => 52,
			'THROW' => 10,
			'GET' => 54,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 56,
			'DEBUG' => 58,
			'RAWPERL' => 15,
			'META' => 17,
			"(" => 64,
			'SWITCH' => 210,
			'MACRO' => 20,
			'WRAPPER' => 68,
			";" => -33,
			'FOR' => 23,
			'LITERAL' => 70,
			'NEXT' => 25,
			"\"" => 74,
			'TEXT' => 27,
			'RETURN' => 78,
			'FILTER' => 28,
			'INSERT' => 79,
			'NUMBER' => 29,
			'REF' => 30,
			'WHILE' => 81,
			'BLOCK' => 31,
			'DEFAULT' => 83,
			"{" => 33,
			'USE' => 35,
			'VIEW' => 39,
			"\${" => 41
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 208,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'defblock_ev' => 48,
			'capture' => 49,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 53,
			'atomexpr' => 55,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 57,
			'defblockname' => 16,
			'loopwhilevar' => 209,
			'ident' => 18,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 67,
			'defblock_std' => 24,
			'node' => 26,
			'term' => 72,
			'rawperl' => 73,
			'expr' => 75,
			'use' => 76,
			'defblock' => 80,
			'sterm' => 82,
			'filter' => 32,
			'perl' => 34,
			'setlist' => 85,
			'chunks' => 207,
			'try' => 38,
			'switch' => 37,
			'block' => 414,
			'directive' => 86,
			'condition' => 87
		}
	},
	{#State 421
		ACTIONS => {
			";" => 424
		}
	},
	{#State 422
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 51,
			"\$" => 50,
			'STOP' => 8,
			'CALL' => 52,
			'THROW' => 10,
			'GET' => 54,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 56,
			'DEBUG' => 58,
			'RAWPERL' => 15,
			'META' => 17,
			"(" => 64,
			'SWITCH' => 210,
			'MACRO' => 20,
			'WRAPPER' => 68,
			";" => -33,
			'FOR' => 23,
			'LITERAL' => 70,
			'NEXT' => 25,
			"\"" => 74,
			'TEXT' => 27,
			'RETURN' => 78,
			'FILTER' => 28,
			'INSERT' => 79,
			'NUMBER' => 29,
			'REF' => 30,
			'WHILE' => 81,
			'BLOCK' => 31,
			'DEFAULT' => 83,
			"{" => 33,
			'USE' => 35,
			'VIEW' => 39,
			"\${" => 41
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 208,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'defblock_ev' => 48,
			'capture' => 49,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 53,
			'atomexpr' => 55,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 57,
			'defblockname' => 16,
			'loopwhilevar' => 209,
			'ident' => 18,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 67,
			'defblock_std' => 24,
			'node' => 26,
			'term' => 72,
			'rawperl' => 73,
			'expr' => 75,
			'use' => 76,
			'defblock' => 80,
			'sterm' => 82,
			'filter' => 32,
			'perl' => 34,
			'setlist' => 85,
			'chunks' => 207,
			'try' => 38,
			'switch' => 37,
			'block' => 417,
			'directive' => 86,
			'condition' => 87
		}
	},
	{#State 423
		DEFAULT => -83
	},
	{#State 424
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 51,
			"\$" => 50,
			'STOP' => 8,
			'CALL' => 52,
			'THROW' => 10,
			'GET' => 54,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 56,
			'DEBUG' => 58,
			'RAWPERL' => 15,
			'META' => 17,
			"(" => 64,
			'SWITCH' => 210,
			'MACRO' => 20,
			'WRAPPER' => 68,
			";" => -33,
			'FOR' => 23,
			'LITERAL' => 70,
			'NEXT' => 25,
			"\"" => 74,
			'TEXT' => 27,
			'RETURN' => 78,
			'FILTER' => 28,
			'INSERT' => 79,
			'NUMBER' => 29,
			'REF' => 30,
			'WHILE' => 81,
			'BLOCK' => 31,
			'DEFAULT' => 83,
			"{" => 33,
			'USE' => 35,
			'VIEW' => 39,
			"\${" => 41
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 208,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'defblock_ev' => 48,
			'capture' => 49,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 53,
			'atomexpr' => 55,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 57,
			'defblockname' => 16,
			'loopwhilevar' => 209,
			'ident' => 18,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 67,
			'defblock_std' => 24,
			'node' => 26,
			'term' => 72,
			'rawperl' => 73,
			'expr' => 75,
			'use' => 76,
			'defblock' => 80,
			'sterm' => 82,
			'filter' => 32,
			'perl' => 34,
			'setlist' => 85,
			'chunks' => 207,
			'try' => 38,
			'switch' => 37,
			'block' => 423,
			'directive' => 86,
			'condition' => 87
		}
	}
]; 


#========================================================================
# Rules
#========================================================================

$RULES = [
	[#Rule 0
		 '$start', 2, undef
	],
	[#Rule 1
		 'template', 1,
sub
#line 66 "Parser.yp"
{ $factory->event_template( $_[1] )   }
	],
	[#Rule 2
		 'event_template', 2,
sub
#line 69 "Parser.yp"
{ $_[0]->rollback_token; $_[1]        }
	],
	[#Rule 3
		 'event_template', 2,
sub
#line 70 "Parser.yp"
{ $_[0]->rollback_token; $_[1]        }
	],
	[#Rule 4
		 'event_template', 1,
sub
#line 71 "Parser.yp"
{ $_[1]                               }
	],
	[#Rule 5
		 'event_template', 1,
sub
#line 72 "Parser.yp"
{ $_[1]                               }
	],
	[#Rule 6
		 'eventblock', 2,
sub
#line 75 "Parser.yp"
{ $factory->block([ @{$_[1]}, $_[2] ])}
	],
	[#Rule 7
		 'eventblock', 1,
sub
#line 76 "Parser.yp"
{ $factory->block( [ $_[1] ] )        }
	],
	[#Rule 8
		 'finalblock', 1,
sub
#line 79 "Parser.yp"
{ $factory->block([ @{$_[1]}, 
                                      $factory->event_finalize() ])       }
	],
	[#Rule 9
		 'finalblock', 0,
sub
#line 81 "Parser.yp"
{ $factory->block( [
                                      $factory->event_finalize() ])       }
	],
	[#Rule 10
		 'block', 1,
sub
#line 85 "Parser.yp"
{ $factory->block($_[1])              }
	],
	[#Rule 11
		 'block', 0,
sub
#line 86 "Parser.yp"
{ $factory->block()                   }
	],
	[#Rule 12
		 'chunks', 2,
sub
#line 89 "Parser.yp"
{ push(@{$_[1]}, $_[2]) 
                                        if defined $_[2]; $_[1]           }
	],
	[#Rule 13
		 'chunks', 1,
sub
#line 91 "Parser.yp"
{ defined $_[1] ? [ $_[1] ] : [ ]     }
	],
	[#Rule 14
		 'event', 1, undef
	],
	[#Rule 15
		 'event', 1, undef
	],
	[#Rule 16
		 'event', 1, undef
	],
	[#Rule 17
		 'event', 1, undef
	],
	[#Rule 18
		 'event_plug', 4,
sub
#line 101 "Parser.yp"
{ $_[0]->location() .
                                      $factory->define_event(
                                        $_[2]->[0], $_[2]->[1], $_[4])    }
	],
	[#Rule 19
		 'eventvar', 1,
sub
#line 106 "Parser.yp"
{ [ undef, $factory->ident($_[1]) ]   }
	],
	[#Rule 20
		 'eventvar', 3,
sub
#line 107 "Parser.yp"
{ [ $_[1], $factory->ident($_[3]) ]   }
	],
	[#Rule 21
		 'chunk', 1,
sub
#line 110 "Parser.yp"
{ $factory->textblock($_[1])          }
	],
	[#Rule 22
		 'chunk', 2,
sub
#line 111 "Parser.yp"
{ return '' unless $_[1];
                                      $_[0]->location() . $_[1];
                                    }
	],
	[#Rule 23
		 'statement', 1, undef
	],
	[#Rule 24
		 'statement', 1, undef
	],
	[#Rule 25
		 'statement', 1, undef
	],
	[#Rule 26
		 'statement', 1, undef
	],
	[#Rule 27
		 'statement', 1, undef
	],
	[#Rule 28
		 'statement', 1, undef
	],
	[#Rule 29
		 'statement', 1, undef
	],
	[#Rule 30
		 'statement', 1, undef
	],
	[#Rule 31
		 'statement', 1,
sub
#line 124 "Parser.yp"
{ $factory->get($_[1])                }
	],
	[#Rule 32
		 'statement', 2,
sub
#line 125 "Parser.yp"
{ $_[0]->add_metadata($_[2]);         }
	],
	[#Rule 33
		 'statement', 0, undef
	],
	[#Rule 34
		 'directive', 1,
sub
#line 129 "Parser.yp"
{ $factory->set($_[1])                }
	],
	[#Rule 35
		 'directive', 1, undef
	],
	[#Rule 36
		 'directive', 1, undef
	],
	[#Rule 37
		 'directive', 1, undef
	],
	[#Rule 38
		 'directive', 1, undef
	],
	[#Rule 39
		 'directive', 1, undef
	],
	[#Rule 40
		 'directive', 1, undef
	],
	[#Rule 41
		 'atomexpr', 1,
sub
#line 143 "Parser.yp"
{ $factory->get($_[1])                }
	],
	[#Rule 42
		 'atomexpr', 1, undef
	],
	[#Rule 43
		 'atomdir', 2,
sub
#line 147 "Parser.yp"
{ $factory->get($_[2])                }
	],
	[#Rule 44
		 'atomdir', 2,
sub
#line 148 "Parser.yp"
{ $factory->call($_[2])               }
	],
	[#Rule 45
		 'atomdir', 2,
sub
#line 149 "Parser.yp"
{ $factory->set($_[2])                }
	],
	[#Rule 46
		 'atomdir', 2,
sub
#line 150 "Parser.yp"
{ $factory->default($_[2])            }
	],
	[#Rule 47
		 'atomdir', 2,
sub
#line 151 "Parser.yp"
{ $factory->insert($_[2])             }
	],
	[#Rule 48
		 'atomdir', 2,
sub
#line 154 "Parser.yp"
{ $factory->throw($_[2])              }
	],
	[#Rule 49
		 'atomdir', 1,
sub
#line 155 "Parser.yp"
{ $factory->return()                  }
	],
	[#Rule 50
		 'atomdir', 1,
sub
#line 156 "Parser.yp"
{ $factory->stop()                    }
	],
	[#Rule 51
		 'atomdir', 1,
sub
#line 157 "Parser.yp"
{ "\$output = '';";                   }
	],
	[#Rule 52
		 'atomdir', 1,
sub
#line 158 "Parser.yp"
{ $_[0]->block_label('last ', ';')    }
	],
	[#Rule 53
		 'atomdir', 1,
sub
#line 159 "Parser.yp"
{ $_[0]->in_block('FOR')
                                        ? $factory->next($_[0]->block_label)
                                        : $_[0]->block_label('next ', ';') }
	],
	[#Rule 54
		 'atomdir', 2,
sub
#line 162 "Parser.yp"
{ if ($_[2]->[0]->[0] =~ /^'(on|off)'$/) {
                                          $_[0]->{ DEBUG_DIRS } = ($1 eq 'on');
                                          $factory->debug($_[2]);
                                      }
                                      else {
                                          $_[0]->{ DEBUG_DIRS } ? $factory->debug($_[2]) : '';
                                      }
                                    }
	],
	[#Rule 55
		 'atomdir', 1, undef
	],
	[#Rule 56
		 'atomdir', 1, undef
	],
	[#Rule 57
		 'event_process', 3,
sub
#line 177 "Parser.yp"
{ $factory->include(@_[2,3])          }
	],
	[#Rule 58
		 'event_process', 3,
sub
#line 179 "Parser.yp"
{ $factory->process(@_[2,3])          }
	],
	[#Rule 59
		 'condition', 6,
sub
#line 183 "Parser.yp"
{ $factory->if(@_[2, 4, 5])           }
	],
	[#Rule 60
		 'condition', 3,
sub
#line 184 "Parser.yp"
{ $factory->if(@_[3, 1])              }
	],
	[#Rule 61
		 'condition', 6,
sub
#line 186 "Parser.yp"
{ $factory->if("!($_[2])", @_[4, 5])  }
	],
	[#Rule 62
		 'condition', 3,
sub
#line 187 "Parser.yp"
{ $factory->if("!($_[3])", $_[1])     }
	],
	[#Rule 63
		 'else', 5,
sub
#line 191 "Parser.yp"
{ unshift(@{$_[5]}, [ @_[2, 4] ]);
                                      $_[5];                              }
	],
	[#Rule 64
		 'else', 3,
sub
#line 193 "Parser.yp"
{ [ $_[3] ]                           }
	],
	[#Rule 65
		 'else', 0,
sub
#line 194 "Parser.yp"
{ [ undef ]                           }
	],
	[#Rule 66
		 'event_switch', 7,
sub
#line 199 "Parser.yp"
{ $factory->event_switch(@_[2, 5, 7]) }
	],
	[#Rule 67
		 'switch', 6,
sub
#line 203 "Parser.yp"
{ $factory->switch(@_[2, 5])          }
	],
	[#Rule 68
		 'eventcase', 1,
sub
#line 206 "Parser.yp"
{ push( @{$_[1]}, undef ); $_[1]      }
	],
	[#Rule 69
		 'eventcase', 2,
sub
#line 207 "Parser.yp"
{ push( @{$_[1]}, $_[2] ); $_[1]      }
	],
	[#Rule 70
		 'eventcase', 2,
sub
#line 208 "Parser.yp"
{ push( @{$_[1]}, $_[2] ); $_[1]      }
	],
	[#Rule 71
		 'eventcase', 2,
sub
#line 209 "Parser.yp"
{ push( @{$_[1]}, $_[2] ); $_[1]      }
	],
	[#Rule 72
		 'eventcaselst', 2,
sub
#line 213 "Parser.yp"
{ push( @{$_[1]}, $_[2] ); $_[1]      }
	],
	[#Rule 73
		 'eventcaselst', 2,
sub
#line 214 "Parser.yp"
{ push( @{$_[1]}, $_[2] ); $_[1]      }
	],
	[#Rule 74
		 'eventcaselst', 2,
sub
#line 215 "Parser.yp"
{ push( @{$_[1]}, $_[2] ); $_[1]      }
	],
	[#Rule 75
		 'eventcaselst', 1,
sub
#line 218 "Parser.yp"
{ [ $_[1] ]                           }
	],
	[#Rule 76
		 'eventcaselst', 1,
sub
#line 219 "Parser.yp"
{ [ $_[1] ]                           }
	],
	[#Rule 77
		 'case', 2,
sub
#line 223 "Parser.yp"
{ push( @{$_[1]}, $_[2] ); $_[1]      }
	],
	[#Rule 78
		 'case', 1,
sub
#line 224 "Parser.yp"
{ push( @{$_[1]}, undef ); $_[1]      }
	],
	[#Rule 79
		 'caselst', 2,
sub
#line 227 "Parser.yp"
{ push( @{$_[1]}, $_[2] ); $_[1]      }
	],
	[#Rule 80
		 'caselst', 1,
sub
#line 228 "Parser.yp"
{ [ $_[1] ]                           }
	],
	[#Rule 81
		 'eventdefcase', 4,
sub
#line 232 "Parser.yp"
{ [ $_[4] ]                       }
	],
	[#Rule 82
		 'eventdefcase', 3,
sub
#line 233 "Parser.yp"
{ [ $_[3] ]                       }
	],
	[#Rule 83
		 'defcase', 4,
sub
#line 237 "Parser.yp"
{ $_[4]                           }
	],
	[#Rule 84
		 'defcase', 3,
sub
#line 238 "Parser.yp"
{ $_[3]                           }
	],
	[#Rule 85
		 'eventonecase', 4,
sub
#line 242 "Parser.yp"
{ [ $_[2], $_[4], 1 ]                 }
	],
	[#Rule 86
		 'onecase', 4,
sub
#line 245 "Parser.yp"
{ [ $_[2], $_[4] ]                    }
	],
	[#Rule 87
		 'event_loop', 5,
sub
#line 250 "Parser.yp"
{ $factory->event_while(@_[1, 3, 5],
                                      $_[0]->leave_block)                 }
	],
	[#Rule 88
		 'event_loop', 5,
sub
#line 254 "Parser.yp"
{ $factory->event_for(@{$_[1]},
                                      @_[3, 5], $_[0]->leave_block)       }
	],
	[#Rule 89
		 'loop', 1,
sub
#line 258 "Parser.yp"
{ $_[1]                               }
	],
	[#Rule 90
		 'loop', 1,
sub
#line 259 "Parser.yp"
{ $_[1]                               }
	],
	[#Rule 91
		 'atomloop', 3,
sub
#line 262 "Parser.yp"
{ $factory->foreach(@{$_[3]}, $_[1])  }
	],
	[#Rule 92
		 'atomloop', 3,
sub
#line 263 "Parser.yp"
{ $factory->while(@_[3, 1]) }
	],
	[#Rule 93
		 'loopwf', 4,
sub
#line 267 "Parser.yp"
{ $factory->foreach(@{$_[1]}, $_[3], $_[0]->leave_block)  }
	],
	[#Rule 94
		 'loopwf', 4,
sub
#line 269 "Parser.yp"
{ $factory->while(@_[1, 3], $_[0]->leave_block) }
	],
	[#Rule 95
		 'loopforvar', 2,
sub
#line 272 "Parser.yp"
{ $_[0]->enter_block('FOR'); $_[2]    }
	],
	[#Rule 96
		 'loopwhilevar', 2,
sub
#line 275 "Parser.yp"
{ $_[0]->enter_block('WHILE'); $_[2]  }
	],
	[#Rule 97
		 'loopvar', 4,
sub
#line 278 "Parser.yp"
{ [ @_[1, 3, 4] ]                     }
	],
	[#Rule 98
		 'loopvar', 4,
sub
#line 279 "Parser.yp"
{ [ @_[1, 3, 4] ]                     }
	],
	[#Rule 99
		 'loopvar', 2,
sub
#line 280 "Parser.yp"
{ [ 0, @_[1, 2] ]                     }
	],
	[#Rule 100
		 'wrapper', 5,
sub
#line 284 "Parser.yp"
{ $factory->wrapper(@_[2, 4])         }
	],
	[#Rule 101
		 'wrapper', 3,
sub
#line 286 "Parser.yp"
{ $factory->wrapper(@_[3, 1])         }
	],
	[#Rule 102
		 'try', 5,
sub
#line 290 "Parser.yp"
{ $factory->try(@_[3, 4])             }
	],
	[#Rule 103
		 'final', 5,
sub
#line 294 "Parser.yp"
{ unshift(@{$_[5]}, [ @_[2,4] ]);
                                      $_[5];                              }
	],
	[#Rule 104
		 'final', 5,
sub
#line 297 "Parser.yp"
{ unshift(@{$_[5]}, [ undef, $_[4] ]);
                                      $_[5];                              }
	],
	[#Rule 105
		 'final', 4,
sub
#line 300 "Parser.yp"
{ unshift(@{$_[4]}, [ undef, $_[3] ]);
                                      $_[4];                              }
	],
	[#Rule 106
		 'final', 3,
sub
#line 302 "Parser.yp"
{ [ $_[3] ]                           }
	],
	[#Rule 107
		 'final', 0,
sub
#line 303 "Parser.yp"
{ [ 0 ] }
	],
	[#Rule 108
		 'use', 2,
sub
#line 306 "Parser.yp"
{ $factory->use($_[2])                }
	],
	[#Rule 109
		 '@1-3', 0,
sub
#line 309 "Parser.yp"
{ $_[0]->push_defblock();             }
	],
	[#Rule 110
		 'view', 6,
sub
#line 310 "Parser.yp"
{ $factory->view(@_[2,5], 
                                                     $_[0]->pop_defblock) }
	],
	[#Rule 111
		 '@2-2', 0,
sub
#line 314 "Parser.yp"
{ ${$_[0]->{ INPERL }}++;             }
	],
	[#Rule 112
		 'perl', 5,
sub
#line 315 "Parser.yp"
{ ${$_[0]->{ INPERL }}--;
                                      $_[0]->{ EVAL_PERL } 
                                      ? $factory->perl($_[4])             
                                      : $factory->no_perl();              }
	],
	[#Rule 113
		 '@3-1', 0,
sub
#line 321 "Parser.yp"
{ ${$_[0]->{ INPERL }}++; 
                                      $rawstart = ${$_[0]->{'LINE'}};     }
	],
	[#Rule 114
		 'rawperl', 5,
sub
#line 323 "Parser.yp"
{ ${$_[0]->{ INPERL }}--;
                                      $_[0]->{ EVAL_PERL } 
                                      ? $factory->rawperl($_[4], $rawstart)
                                      : $factory->no_perl();              }
	],
	[#Rule 115
		 'filter', 5,
sub
#line 330 "Parser.yp"
{ $factory->filter(@_[2,4])           }
	],
	[#Rule 116
		 'filter', 3,
sub
#line 332 "Parser.yp"
{ $factory->filter(@_[3,1])           }
	],
	[#Rule 117
		 'defblock', 1, undef
	],
	[#Rule 118
		 'defblock', 1, undef
	],
	[#Rule 119
		 'defblock_ev', 5,
sub
#line 341 "Parser.yp"
{ my $name = join('/', @{ $_[0]->{ DEFBLOCKS } });
                                      pop(@{ $_[0]->{ DEFBLOCKS } });
                                      $_[0]->define_block($name, $factory->event_proc($_[4])); 
                                      undef
                                    }
	],
	[#Rule 120
		 'defblock_std', 5,
sub
#line 350 "Parser.yp"
{ my $name = join('/', @{ $_[0]->{ DEFBLOCKS } });
                                      pop(@{ $_[0]->{ DEFBLOCKS } });
                                      $_[0]->define_block($name, $factory->event_proc(
                                        $_[4] . $factory->event_finalize() ));
                                      undef
                                    }
	],
	[#Rule 121
		 'defblockname', 2,
sub
#line 358 "Parser.yp"
{ push(@{ $_[0]->{ DEFBLOCKS } }, $_[2]);
                                      $_[2];
                                    }
	],
	[#Rule 122
		 'blockname', 1, undef
	],
	[#Rule 123
		 'blockname', 1,
sub
#line 364 "Parser.yp"
{ $_[1] =~ s/^'(.*)'$/$1/; $_[1]      }
	],
	[#Rule 124
		 'blockargs', 1, undef
	],
	[#Rule 125
		 'blockargs', 0, undef
	],
	[#Rule 126
		 'anonblock', 5,
sub
#line 372 "Parser.yp"
{ local $" = ', ';
                                      print STDERR "experimental block args: [@{ $_[2] }]\n"
                                          if $_[2];
                                      $factory->anon_block($_[4])         }
	],
	[#Rule 127
		 'capture', 3,
sub
#line 378 "Parser.yp"
{ $factory->capture(@_[1, 3])         }
	],
	[#Rule 128
		 'macro', 6,
sub
#line 382 "Parser.yp"
{ $factory->macro(@_[2, 6, 4])        }
	],
	[#Rule 129
		 'macro', 3,
sub
#line 383 "Parser.yp"
{ $factory->macro(@_[2, 3])           }
	],
	[#Rule 130
		 'mdir', 1, undef
	],
	[#Rule 131
		 'mdir', 4,
sub
#line 387 "Parser.yp"
{ $_[3]                               }
	],
	[#Rule 132
		 'margs', 2,
sub
#line 390 "Parser.yp"
{ push(@{$_[1]}, $_[2]); $_[1]        }
	],
	[#Rule 133
		 'margs', 2,
sub
#line 391 "Parser.yp"
{ $_[1]                               }
	],
	[#Rule 134
		 'margs', 1,
sub
#line 392 "Parser.yp"
{ [ $_[1] ]                           }
	],
	[#Rule 135
		 'metadata', 2,
sub
#line 395 "Parser.yp"
{ push(@{$_[1]}, @{$_[2]}); $_[1]     }
	],
	[#Rule 136
		 'metadata', 2, undef
	],
	[#Rule 137
		 'metadata', 1, undef
	],
	[#Rule 138
		 'meta', 3,
sub
#line 400 "Parser.yp"
{ for ($_[3]) { s/^'//; s/'$//; 
                                                       s/\\'/'/g  }; 
                                         [ @_[1,3] ] }
	],
	[#Rule 139
		 'meta', 5,
sub
#line 403 "Parser.yp"
{ [ @_[1,4] ] }
	],
	[#Rule 140
		 'meta', 3,
sub
#line 404 "Parser.yp"
{ [ @_[1,3] ] }
	],
	[#Rule 141
		 'term', 1, undef
	],
	[#Rule 142
		 'term', 1, undef
	],
	[#Rule 143
		 'lterm', 3,
sub
#line 416 "Parser.yp"
{ "[ $_[2] ]"                         }
	],
	[#Rule 144
		 'lterm', 3,
sub
#line 417 "Parser.yp"
{ "[ $_[2] ]"                         }
	],
	[#Rule 145
		 'lterm', 2,
sub
#line 418 "Parser.yp"
{ "[ ]"                               }
	],
	[#Rule 146
		 'lterm', 3,
sub
#line 419 "Parser.yp"
{ "{ $_[2]  }"                        }
	],
	[#Rule 147
		 'sterm', 1,
sub
#line 422 "Parser.yp"
{ $factory->ident($_[1])              }
	],
	[#Rule 148
		 'sterm', 2,
sub
#line 423 "Parser.yp"
{ $factory->identref($_[2])           }
	],
	[#Rule 149
		 'sterm', 3,
sub
#line 424 "Parser.yp"
{ $factory->quoted($_[2])             }
	],
	[#Rule 150
		 'sterm', 1, undef
	],
	[#Rule 151
		 'sterm', 1, undef
	],
	[#Rule 152
		 'list', 2,
sub
#line 429 "Parser.yp"
{ "$_[1], $_[2]"                      }
	],
	[#Rule 153
		 'list', 2, undef
	],
	[#Rule 154
		 'list', 1, undef
	],
	[#Rule 155
		 'range', 3,
sub
#line 434 "Parser.yp"
{ $_[1] . '..' . $_[3]                }
	],
	[#Rule 156
		 'hash', 1, undef
	],
	[#Rule 157
		 'hash', 0,
sub
#line 439 "Parser.yp"
{ "" }
	],
	[#Rule 158
		 'params', 2,
sub
#line 442 "Parser.yp"
{ "$_[1], $_[2]"                      }
	],
	[#Rule 159
		 'params', 2, undef
	],
	[#Rule 160
		 'params', 1, undef
	],
	[#Rule 161
		 'param', 3,
sub
#line 447 "Parser.yp"
{ "$_[1] => $_[3]"                    }
	],
	[#Rule 162
		 'param', 3,
sub
#line 448 "Parser.yp"
{ "$_[1] => $_[3]"                    }
	],
	[#Rule 163
		 'ident', 3,
sub
#line 451 "Parser.yp"
{ push(@{$_[1]}, @{$_[3]}); $_[1]     }
	],
	[#Rule 164
		 'ident', 3,
sub
#line 452 "Parser.yp"
{ push(@{$_[1]}, 
                                           map {($_, 0)} split(/\./, $_[3]));
                                      $_[1];                              }
	],
	[#Rule 165
		 'ident', 1, undef
	],
	[#Rule 166
		 'node', 1,
sub
#line 458 "Parser.yp"
{ [ $_[1], 0 ]                        }
	],
	[#Rule 167
		 'node', 4,
sub
#line 459 "Parser.yp"
{ [ $_[1], $factory->args($_[3]) ]    }
	],
	[#Rule 168
		 'item', 1,
sub
#line 462 "Parser.yp"
{ "'$_[1]'"                           }
	],
	[#Rule 169
		 'item', 3,
sub
#line 463 "Parser.yp"
{ $_[2]                               }
	],
	[#Rule 170
		 'item', 2,
sub
#line 464 "Parser.yp"
{ $_[0]->{ V1DOLLAR }
                                       ? "'$_[2]'" 
                                       : $factory->ident(["'$_[2]'", 0])  }
	],
	[#Rule 171
		 'expr', 3,
sub
#line 469 "Parser.yp"
{ "$_[1] $_[2] $_[3]"                 }
	],
	[#Rule 172
		 'expr', 3,
sub
#line 470 "Parser.yp"
{ "$_[1] $_[2] $_[3]"                 }
	],
	[#Rule 173
		 'expr', 3,
sub
#line 471 "Parser.yp"
{ "$_[1] $_[2] $_[3]"                 }
	],
	[#Rule 174
		 'expr', 3,
sub
#line 472 "Parser.yp"
{ "int($_[1] / $_[3])"                }
	],
	[#Rule 175
		 'expr', 3,
sub
#line 473 "Parser.yp"
{ "$_[1] % $_[3]"                     }
	],
	[#Rule 176
		 'expr', 3,
sub
#line 474 "Parser.yp"
{ "$_[1] $CMPOP{ $_[2] } $_[3]"       }
	],
	[#Rule 177
		 'expr', 3,
sub
#line 475 "Parser.yp"
{ "$_[1]  . $_[3]"                    }
	],
	[#Rule 178
		 'expr', 3,
sub
#line 476 "Parser.yp"
{ "$_[1] && $_[3]"                    }
	],
	[#Rule 179
		 'expr', 3,
sub
#line 477 "Parser.yp"
{ "$_[1] || $_[3]"                    }
	],
	[#Rule 180
		 'expr', 2,
sub
#line 478 "Parser.yp"
{ "! $_[2]"                           }
	],
	[#Rule 181
		 'expr', 5,
sub
#line 479 "Parser.yp"
{ "$_[1] ? $_[3] : $_[5]"             }
	],
	[#Rule 182
		 'expr', 3,
sub
#line 480 "Parser.yp"
{ $factory->assign(@{$_[2]})          }
	],
	[#Rule 183
		 'expr', 3,
sub
#line 481 "Parser.yp"
{ "($_[2])"                           }
	],
	[#Rule 184
		 'expr', 1, undef
	],
	[#Rule 185
		 'setlist', 2,
sub
#line 485 "Parser.yp"
{ push(@{$_[1]}, @{$_[2]}); $_[1]     }
	],
	[#Rule 186
		 'setlist', 2, undef
	],
	[#Rule 187
		 'setlist', 1, undef
	],
	[#Rule 188
		 'assign', 3,
sub
#line 491 "Parser.yp"
{ [ $_[1], $_[3] ]                    }
	],
	[#Rule 189
		 'assign', 3,
sub
#line 492 "Parser.yp"
{ [ @_[1,3] ]                         }
	],
	[#Rule 190
		 'args', 2,
sub
#line 499 "Parser.yp"
{ push(@{$_[1]}, $_[2]); $_[1]        }
	],
	[#Rule 191
		 'args', 2,
sub
#line 500 "Parser.yp"
{ push(@{$_[1]->[0]}, $_[2]); $_[1]   }
	],
	[#Rule 192
		 'args', 4,
sub
#line 501 "Parser.yp"
{ push(@{$_[1]->[0]}, "'', " . 
                                      $factory->assign(@_[2,4])); $_[1]  }
	],
	[#Rule 193
		 'args', 2,
sub
#line 503 "Parser.yp"
{ $_[1]                               }
	],
	[#Rule 194
		 'args', 0,
sub
#line 504 "Parser.yp"
{ [ [ ] ]                             }
	],
	[#Rule 195
		 'lnameargs', 3,
sub
#line 514 "Parser.yp"
{ push(@{$_[3]}, $_[1]); $_[3]        }
	],
	[#Rule 196
		 'lnameargs', 1, undef
	],
	[#Rule 197
		 'lvalue', 1, undef
	],
	[#Rule 198
		 'lvalue', 3,
sub
#line 519 "Parser.yp"
{ $factory->quoted($_[2])             }
	],
	[#Rule 199
		 'lvalue', 1, undef
	],
	[#Rule 200
		 'nameargs', 3,
sub
#line 523 "Parser.yp"
{ [ [$factory->ident($_[2])], $_[3] ]   }
	],
	[#Rule 201
		 'nameargs', 2,
sub
#line 524 "Parser.yp"
{ [ @_[1,2] ] }
	],
	[#Rule 202
		 'nameargs', 4,
sub
#line 525 "Parser.yp"
{ [ @_[1,3] ] }
	],
	[#Rule 203
		 'names', 3,
sub
#line 528 "Parser.yp"
{ push(@{$_[1]}, $_[3]); $_[1] }
	],
	[#Rule 204
		 'names', 1,
sub
#line 529 "Parser.yp"
{ [ $_[1] ]                    }
	],
	[#Rule 205
		 'name', 3,
sub
#line 532 "Parser.yp"
{ $factory->quoted($_[2])  }
	],
	[#Rule 206
		 'name', 1,
sub
#line 533 "Parser.yp"
{ "'$_[1]'" }
	],
	[#Rule 207
		 'name', 1, undef
	],
	[#Rule 208
		 'filename', 3,
sub
#line 537 "Parser.yp"
{ "$_[1].$_[3]" }
	],
	[#Rule 209
		 'filename', 1, undef
	],
	[#Rule 210
		 'filepart', 1, undef
	],
	[#Rule 211
		 'filepart', 1, undef
	],
	[#Rule 212
		 'filepart', 1, undef
	],
	[#Rule 213
		 'quoted', 2,
sub
#line 551 "Parser.yp"
{ push(@{$_[1]}, $_[2]) 
                                          if defined $_[2]; $_[1]         }
	],
	[#Rule 214
		 'quoted', 0,
sub
#line 553 "Parser.yp"
{ [ ]                                 }
	],
	[#Rule 215
		 'quotable', 1,
sub
#line 556 "Parser.yp"
{ $factory->ident($_[1])              }
	],
	[#Rule 216
		 'quotable', 1,
sub
#line 557 "Parser.yp"
{ $factory->text($_[1])               }
	],
	[#Rule 217
		 'quotable', 1,
sub
#line 558 "Parser.yp"
{ undef                               }
	]
];



1;

__END__

=head1 NAME

Template::Grammar - Parser state/rule tables for the TT grammar

=head1 SYNOPSIS

    # no user serviceable parts inside

=head1 DESCRIPTION

This module defines the state and rule tables that the L<Template::Parser>
module uses to parse templates.  It is generated from a YACC-like grammar
using the C<Parse::Yapp> module.  The F<parser> sub-directory of the 
Template Toolkit source distribution contains the grammar and other 
files required to generate this module.

But you don't need to worry about any of that unless you're planning to 
modify the Template Toolkit language.

=head1 AUTHOR

Andy Wardley E<lt>abw@wardley.orgE<gt>

L<http://wardley.org/>

=head1 COPYRIGHT

Copyright (C) 1996-2007 Andy Wardley.  All Rights Reserved.

This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.

=head1 SEE ALSO

L<Template::Parser>

=cut

# Local Variables:
# mode: perl
# perl-indent-level: 4
# indent-tabs-mode: nil
# End:
#
# vim: expandtab shiftwidth=4:










