#============================================================= -*-Perl-*-
#
# Template::Event::Grammar
#
# DESCRIPTION
#   This file based on Template::Grammar ftom Template Toolkit
#   Grammar file for the Template Toolkit language containing token
#   definitions and parser state/rules tables generated by Parse::Yapp.
#
# AUTHOR
#   Andy Wardley   <abw@wardley.org>
#   Serguei Okladnikov <oklas@cpan.org> (EVENTs and some features)
#
# COPYRIGHT
#   Copyright (C) 1996-2006 Andy Wardley.  All Rights Reserved.
#   Copyright (C) 1998-2000 Canon Research Centre Europe Ltd.
#   Copyright (C) 2012-2012 Serguei Okladnikov
#
#   This module is free software; you can redistribute it and/or
#   modify it under the same terms as Perl itself.
#
# REVISION
#   $Id$
#
# IMPORTANT NOTE
#   This module is constructed from the parser/Grammar.pm.skel file by
#   running the parser/yc script.  You only need to do this if # you
#   have modified the grammar in the parser/Parser.yp file and need #
#   to-recompile it.  See the README in the 'parser' directory for
#   more information (sub-directory of the Template distribution).
#
#========================================================================

package Template::Event::Grammar;

use strict;
use warnings;

our $VERSION  = 2.25;

my (@RESERVED, %CMPOP, $LEXTABLE, $RULES, $STATES);
my ($factory, $rawstart);


#========================================================================

# Reserved words, comparison and binary operators
#========================================================================

@RESERVED = qw( 
	GET CALL SET DEFAULT INSERT INCLUDE PROCESS WRAPPER BLOCK END
	USE PLUGIN FILTER MACRO PERL RAWPERL TO STEP AND OR NOT DIV MOD
	IF UNLESS ELSE ELSIF FOR NEXT WHILE SWITCH CASE META IN
	TRY THROW CATCH FINAL LAST RETURN STOP CLEAR VIEW DEBUG
        EVENT
    );

# for historical reasons, != and == are converted to ne and eq to perform 
# stringwise comparison (mainly because it doesn't generate "non-numerical 
# comparison" warnings which != and == can) but the others (e.g. < > <= >=)
# are not converted to their stringwise equivalents.  I added 'gt' et al, 
# briefly for v2.04d and then took them out again in 2.04e.


%CMPOP = qw( 
    != ne
    == eq
    <  <
    >  >
    >= >=
    <= <=
);

#    eq eq  # add these lines to the above to 
#    lt lt  # enable the eq, lt and gt operators      
#    gt gt

#========================================================================
# Lexer Token Table
#========================================================================

# lookup table used by lexer is initialised with special-cases
$LEXTABLE = {
    'FOREACH' => 'FOR',
    'BREAK'   => 'LAST',
    '&&'      => 'AND',
    '||'      => 'OR',
    '!'       => 'NOT',
    '|'	      => 'FILTER',
    '.'       => 'DOT',
    '_'       => 'CAT',
    '..'      => 'TO',
#    ':'       => 'MACRO',
    '='       => 'ASSIGN',
    '=>'      => 'ASSIGN',
#    '->'      => 'ARROW',
    ','       => 'COMMA',
    '\\'      => 'REF',
    'and'     => 'AND',		# explicitly specified so that qw( and or
    'or'      => 'OR',		# not ) can always be used in lower case, 
    'not'     => 'NOT',		# regardless of ANYCASE flag
    'mod'     => 'MOD',
    'div'     => 'DIV',
};

# localise the temporary variables needed to complete lexer table
{ 
#    my @tokens = qw< ( ) [ ] { } ${ $ / ; : ? >;
    my @tokens = qw< ( ) [ ] { } ${ $ + / ; : ? >;
    my @cmpop  = keys %CMPOP;
#    my @binop  = qw( + - * % );              # '/' above, in @tokens
    my @binop  = qw( - * % );              # '+' and '/' above, in @tokens

    # fill lexer table, slice by slice, with reserved words and operators
    @$LEXTABLE{ @RESERVED, @cmpop, @binop, @tokens } 
	= ( @RESERVED, ('CMPOP') x @cmpop, ('BINOP') x @binop, @tokens );
}


#========================================================================
# CLASS METHODS
#========================================================================

sub new {
    my $class = shift;
    bless {
	LEXTABLE => $LEXTABLE,
	STATES   => $STATES,
	RULES    => $RULES,
    }, $class;
}

# update method to set package-scoped $factory lexical 
sub install_factory {
    my ($self, $new_factory) = @_;
    $factory = $new_factory;
}


#========================================================================
# States
#========================================================================

$STATES = [
	{#State 0
		ACTIONS => {
			'SET' => 1,
			'PERL' => 45,
			'NOT' => 42,
			'IDENT' => 3,
			'CLEAR' => 46,
			'UNLESS' => 4,
			'IF' => 49,
			"\$" => 48,
			'STOP' => 7,
			'CALL' => 50,
			'THROW' => 9,
			'GET' => 52,
			"[" => 10,
			'TRY' => 11,
			'LAST' => 54,
			'DEBUG' => 56,
			'RAWPERL' => 14,
			'META' => 16,
			'INCLUDE' => 18,
			"(" => 60,
			'SWITCH' => 61,
			'MACRO' => 19,
			'WRAPPER' => 64,
			";" => -31,
			'FOR' => 22,
			'LITERAL' => 66,
			'NEXT' => 23,
			"\"" => 70,
			'TEXT' => 25,
			'PROCESS' => 73,
			'RETURN' => 74,
			'FILTER' => 26,
			'INSERT' => 75,
			'NUMBER' => 27,
			'REF' => 28,
			'WHILE' => 77,
			'BLOCK' => 29,
			'DEFAULT' => 79,
			"{" => 31,
			'USE' => 34,
			'VIEW' => 38,
			'EVENT' => 39,
			"\${" => 40
		},
		DEFAULT => -9,
		GOTOS => {
			'loopforvar' => 41,
			'loopwf' => 44,
			'item' => 43,
			'atomloop' => 2,
			'loop' => 5,
			'capture' => 47,
			'statement' => 6,
			'view' => 8,
			'wrapper' => 51,
			'atomexpr' => 53,
			'chunk' => 12,
			'atomdir' => 13,
			'anonblock' => 55,
			'template' => 57,
			'defblockname' => 15,
			'loopwhilevar' => 58,
			'event' => 59,
			'ident' => 17,
			'event_loop' => 62,
			'assign' => 20,
			'macro' => 21,
			'lterm' => 63,
			'event_plug' => 65,
			'node' => 24,
			'finalblock' => 67,
			'rawperl' => 69,
			'term' => 68,
			'use' => 72,
			'expr' => 71,
			'defblock' => 76,
			'sterm' => 78,
			'filter' => 30,
			'eventblock' => 80,
			'templatecode' => 32,
			'perl' => 33,
			'setlist' => 81,
			'chunks' => 35,
			'switch' => 36,
			'try' => 37,
			'directive' => 82,
			'condition' => 83
		}
	},
	{#State 1
		ACTIONS => {
			"\$" => 48,
			'LITERAL' => 85,
			'IDENT' => 3,
			"\${" => 40
		},
		GOTOS => {
			'setlist' => 86,
			'item' => 43,
			'assign' => 20,
			'node' => 24,
			'ident' => 84
		}
	},
	{#State 2
		DEFAULT => -71
	},
	{#State 3
		DEFAULT => -146
	},
	{#State 4
		ACTIONS => {
			'NOT' => 42,
			"{" => 31,
			'LITERAL' => 88,
			'IDENT' => 3,
			"\"" => 70,
			"(" => 60,
			"\$" => 48,
			"[" => 10,
			'NUMBER' => 27,
			'REF' => 28,
			"\${" => 40
		},
		GOTOS => {
			'expr' => 89,
			'sterm' => 78,
			'item' => 43,
			'node' => 24,
			'ident' => 87,
			'term' => 68,
			'lterm' => 63
		}
	},
	{#State 5
		DEFAULT => -36
	},
	{#State 6
		ACTIONS => {
			";" => 90
		}
	},
	{#State 7
		DEFAULT => -50
	},
	{#State 8
		DEFAULT => -27
	},
	{#State 9
		ACTIONS => {
			"\"" => 99,
			"\$" => 96,
			'LITERAL' => 98,
			'FILENAME' => 93,
			'IDENT' => 91,
			'NUMBER' => 94
		},
		GOTOS => {
			'filepart' => 97,
			'names' => 101,
			'nameargs' => 100,
			'filename' => 95,
			'name' => 92
		}
	},
	{#State 10
		ACTIONS => {
			"{" => 31,
			'LITERAL' => 88,
			'IDENT' => 3,
			"\"" => 70,
			"\$" => 48,
			"[" => 10,
			'NUMBER' => 27,
			'REF' => 28,
			"]" => 104,
			"\${" => 40
		},
		GOTOS => {
			'sterm' => 106,
			'item' => 43,
			'range' => 103,
			'node' => 24,
			'ident' => 87,
			'term' => 105,
			'lterm' => 63,
			'list' => 102
		}
	},
	{#State 11
		ACTIONS => {
			";" => 107
		}
	},
	{#State 12
		DEFAULT => -13
	},
	{#State 13
		ACTIONS => {
			";" => -33
		},
		DEFAULT => -40
	},
	{#State 14
		DEFAULT => -94,
		GOTOS => {
			'@3-1' => 108
		}
	},
	{#State 15
		ACTIONS => {
			'IDENT' => 109
		},
		DEFAULT => -103,
		GOTOS => {
			'blockargs' => 112,
			'metadata' => 111,
			'meta' => 110
		}
	},
	{#State 16
		ACTIONS => {
			'IDENT' => 109
		},
		GOTOS => {
			'metadata' => 113,
			'meta' => 110
		}
	},
	{#State 17
		ACTIONS => {
			'DOT' => 114,
			'ASSIGN' => 115
		},
		DEFAULT => -125
	},
	{#State 18
		ACTIONS => {
			"\"" => 99,
			"\$" => 96,
			'LITERAL' => 98,
			'FILENAME' => 93,
			'IDENT' => 91,
			'NUMBER' => 94
		},
		GOTOS => {
			'filepart' => 97,
			'names' => 101,
			'nameargs' => 116,
			'filename' => 95,
			'name' => 92
		}
	},
	{#State 19
		ACTIONS => {
			'IDENT' => 117
		}
	},
	{#State 20
		DEFAULT => -165
	},
	{#State 21
		DEFAULT => -25
	},
	{#State 22
		ACTIONS => {
			"{" => 31,
			'LITERAL' => 88,
			'IDENT' => 118,
			"\"" => 70,
			"\$" => 48,
			"[" => 10,
			'NUMBER' => 27,
			'REF' => 28,
			"\${" => 40
		},
		GOTOS => {
			'sterm' => 78,
			'item' => 43,
			'loopvar' => 120,
			'node' => 24,
			'ident' => 87,
			'term' => 119,
			'lterm' => 63
		}
	},
	{#State 23
		DEFAULT => -53
	},
	{#State 24
		DEFAULT => -143
	},
	{#State 25
		DEFAULT => -19
	},
	{#State 26
		ACTIONS => {
			"\"" => 127,
			"\$" => 124,
			'LITERAL' => 126,
			'FILENAME' => 93,
			'IDENT' => 121,
			'NUMBER' => 94,
			"\${" => 40
		},
		GOTOS => {
			'names' => 101,
			'lvalue' => 122,
			'item' => 123,
			'name' => 92,
			'filepart' => 97,
			'filename' => 95,
			'nameargs' => 128,
			'lnameargs' => 125
		}
	},
	{#State 27
		DEFAULT => -129
	},
	{#State 28
		ACTIONS => {
			"\$" => 48,
			'IDENT' => 3,
			"\${" => 40
		},
		GOTOS => {
			'item' => 43,
			'node' => 24,
			'ident' => 129
		}
	},
	{#State 29
		ACTIONS => {
			'LITERAL' => 134,
			'FILENAME' => 93,
			'IDENT' => 130,
			'NUMBER' => 94
		},
		DEFAULT => -103,
		GOTOS => {
			'blockargs' => 133,
			'filepart' => 97,
			'filename' => 132,
			'blockname' => 131,
			'metadata' => 111,
			'meta' => 110
		}
	},
	{#State 30
		DEFAULT => -56
	},
	{#State 31
		ACTIONS => {
			"\$" => 48,
			'LITERAL' => 139,
			'IDENT' => 3,
			"\${" => 40
		},
		DEFAULT => -135,
		GOTOS => {
			'params' => 138,
			'hash' => 135,
			'item' => 136,
			'param' => 137
		}
	},
	{#State 32
		DEFAULT => -1
	},
	{#State 33
		DEFAULT => -38
	},
	{#State 34
		ACTIONS => {
			"\"" => 127,
			"\$" => 124,
			'LITERAL' => 126,
			'FILENAME' => 93,
			'IDENT' => 121,
			'NUMBER' => 94,
			"\${" => 40
		},
		GOTOS => {
			'names' => 101,
			'lvalue' => 122,
			'item' => 123,
			'name' => 92,
			'filepart' => 97,
			'filename' => 95,
			'nameargs' => 128,
			'lnameargs' => 140
		}
	},
	{#State 35
		ACTIONS => {
			'SET' => 1,
			'PERL' => 45,
			'NOT' => 42,
			'IDENT' => 3,
			'CLEAR' => 46,
			'UNLESS' => 4,
			'IF' => 49,
			"\$" => 48,
			'STOP' => 7,
			'CALL' => 50,
			'THROW' => 9,
			'GET' => 52,
			"[" => 10,
			'TRY' => 11,
			'LAST' => 54,
			'DEBUG' => 56,
			'RAWPERL' => 14,
			'META' => 16,
			'INCLUDE' => 18,
			"(" => 60,
			'SWITCH' => 61,
			'MACRO' => 19,
			'WRAPPER' => 64,
			";" => -31,
			'FOR' => 22,
			'LITERAL' => 66,
			'NEXT' => 23,
			"\"" => 70,
			'TEXT' => 25,
			'PROCESS' => 73,
			'RETURN' => 74,
			'FILTER' => 26,
			'INSERT' => 75,
			'NUMBER' => 27,
			'REF' => 28,
			'WHILE' => 77,
			'BLOCK' => 29,
			'DEFAULT' => 79,
			"{" => 31,
			'USE' => 34,
			'VIEW' => 38,
			'EVENT' => 39,
			"\${" => 40
		},
		DEFAULT => -8,
		GOTOS => {
			'loopforvar' => 41,
			'loopwf' => 44,
			'item' => 43,
			'atomloop' => 2,
			'loop' => 5,
			'capture' => 47,
			'statement' => 6,
			'view' => 8,
			'wrapper' => 51,
			'atomexpr' => 53,
			'chunk' => 141,
			'atomdir' => 13,
			'anonblock' => 55,
			'defblockname' => 15,
			'loopwhilevar' => 58,
			'event' => 142,
			'ident' => 17,
			'event_loop' => 62,
			'assign' => 20,
			'macro' => 21,
			'lterm' => 63,
			'event_plug' => 65,
			'node' => 24,
			'term' => 68,
			'rawperl' => 69,
			'expr' => 71,
			'use' => 72,
			'defblock' => 76,
			'sterm' => 78,
			'filter' => 30,
			'perl' => 33,
			'setlist' => 81,
			'switch' => 36,
			'try' => 37,
			'directive' => 82,
			'condition' => 83
		}
	},
	{#State 36
		DEFAULT => -35
	},
	{#State 37
		DEFAULT => -37
	},
	{#State 38
		ACTIONS => {
			"\"" => 99,
			"\$" => 96,
			'LITERAL' => 98,
			'FILENAME' => 93,
			'IDENT' => 91,
			'NUMBER' => 94
		},
		GOTOS => {
			'filepart' => 97,
			'names' => 101,
			'nameargs' => 143,
			'filename' => 95,
			'name' => 92
		}
	},
	{#State 39
		ACTIONS => {
			"\$" => 48,
			'IDENT' => 144,
			"\${" => 40
		},
		GOTOS => {
			'eventvar' => 146,
			'item' => 43,
			'node' => 24,
			'ident' => 145
		}
	},
	{#State 40
		ACTIONS => {
			"\"" => 70,
			"\$" => 48,
			'LITERAL' => 88,
			'IDENT' => 3,
			'REF' => 28,
			'NUMBER' => 27,
			"\${" => 40
		},
		GOTOS => {
			'sterm' => 147,
			'item' => 43,
			'node' => 24,
			'ident' => 87
		}
	},
	{#State 41
		ACTIONS => {
			";" => 148
		}
	},
	{#State 42
		ACTIONS => {
			'NOT' => 42,
			"{" => 31,
			'LITERAL' => 88,
			'IDENT' => 3,
			"\"" => 70,
			"(" => 60,
			"\$" => 48,
			"[" => 10,
			'NUMBER' => 27,
			'REF' => 28,
			"\${" => 40
		},
		GOTOS => {
			'expr' => 149,
			'sterm' => 78,
			'item' => 43,
			'node' => 24,
			'ident' => 87,
			'term' => 68,
			'lterm' => 63
		}
	},
	{#State 43
		ACTIONS => {
			"(" => 150
		},
		DEFAULT => -144
	},
	{#State 44
		DEFAULT => -70
	},
	{#State 45
		ACTIONS => {
			";" => 151
		}
	},
	{#State 46
		DEFAULT => -51
	},
	{#State 47
		DEFAULT => -24
	},
	{#State 48
		ACTIONS => {
			'IDENT' => 152
		}
	},
	{#State 49
		ACTIONS => {
			'NOT' => 42,
			"{" => 31,
			'LITERAL' => 88,
			'IDENT' => 3,
			"\"" => 70,
			"(" => 60,
			"\$" => 48,
			"[" => 10,
			'NUMBER' => 27,
			'REF' => 28,
			"\${" => 40
		},
		GOTOS => {
			'expr' => 153,
			'sterm' => 78,
			'item' => 43,
			'node' => 24,
			'ident' => 87,
			'term' => 68,
			'lterm' => 63
		}
	},
	{#State 50
		ACTIONS => {
			'NOT' => 42,
			"{" => 31,
			'LITERAL' => 88,
			'IDENT' => 3,
			"\"" => 70,
			"(" => 60,
			"\$" => 48,
			"[" => 10,
			'NUMBER' => 27,
			'REF' => 28,
			"\${" => 40
		},
		GOTOS => {
			'expr' => 154,
			'sterm' => 78,
			'item' => 43,
			'node' => 24,
			'ident' => 87,
			'term' => 68,
			'lterm' => 63
		}
	},
	{#State 51
		DEFAULT => -55
	},
	{#State 52
		ACTIONS => {
			'NOT' => 42,
			"{" => 31,
			'LITERAL' => 88,
			'IDENT' => 3,
			"\"" => 70,
			"(" => 60,
			"\$" => 48,
			"[" => 10,
			'NUMBER' => 27,
			'REF' => 28,
			"\${" => 40
		},
		GOTOS => {
			'expr' => 155,
			'sterm' => 78,
			'item' => 43,
			'node' => 24,
			'ident' => 87,
			'term' => 68,
			'lterm' => 63
		}
	},
	{#State 53
		ACTIONS => {
			'IF' => 159,
			'FILTER' => 158,
			'FOR' => 157,
			'WHILE' => 161,
			'WRAPPER' => 160,
			'UNLESS' => 156
		}
	},
	{#State 54
		DEFAULT => -52
	},
	{#State 55
		DEFAULT => -23
	},
	{#State 56
		ACTIONS => {
			"\"" => 99,
			"\$" => 96,
			'LITERAL' => 98,
			'FILENAME' => 93,
			'IDENT' => 91,
			'NUMBER' => 94
		},
		GOTOS => {
			'filepart' => 97,
			'names' => 101,
			'nameargs' => 162,
			'filename' => 95,
			'name' => 92
		}
	},
	{#State 57
		ACTIONS => {
			'' => 163
		}
	},
	{#State 58
		ACTIONS => {
			";" => 164
		}
	},
	{#State 59
		DEFAULT => -7
	},
	{#State 60
		ACTIONS => {
			'NOT' => 42,
			"{" => 31,
			'LITERAL' => 66,
			'IDENT' => 3,
			"\"" => 70,
			"(" => 60,
			"\$" => 48,
			"[" => 10,
			'NUMBER' => 27,
			'REF' => 28,
			"\${" => 40
		},
		GOTOS => {
			'expr' => 167,
			'sterm' => 78,
			'item' => 43,
			'assign' => 166,
			'node' => 24,
			'ident' => 165,
			'term' => 68,
			'lterm' => 63
		}
	},
	{#State 61
		ACTIONS => {
			'NOT' => 42,
			"{" => 31,
			'LITERAL' => 88,
			'IDENT' => 3,
			"\"" => 70,
			"(" => 60,
			"\$" => 48,
			"[" => 10,
			'NUMBER' => 27,
			'REF' => 28,
			"\${" => 40
		},
		GOTOS => {
			'expr' => 168,
			'sterm' => 78,
			'item' => 43,
			'node' => 24,
			'ident' => 87,
			'term' => 68,
			'lterm' => 63
		}
	},
	{#State 62
		DEFAULT => -15
	},
	{#State 63
		DEFAULT => -119
	},
	{#State 64
		ACTIONS => {
			"\"" => 99,
			"\$" => 96,
			'LITERAL' => 98,
			'FILENAME' => 93,
			'IDENT' => 91,
			'NUMBER' => 94
		},
		GOTOS => {
			'filepart' => 97,
			'names' => 101,
			'nameargs' => 169,
			'filename' => 95,
			'name' => 92
		}
	},
	{#State 65
		DEFAULT => -14
	},
	{#State 66
		ACTIONS => {
			'ASSIGN' => 170
		},
		DEFAULT => -128
	},
	{#State 67
		ACTIONS => {
			'END' => 171
		},
		DEFAULT => -5
	},
	{#State 68
		DEFAULT => -162
	},
	{#State 69
		DEFAULT => -28
	},
	{#State 70
		DEFAULT => -192,
		GOTOS => {
			'quoted' => 172
		}
	},
	{#State 71
		ACTIONS => {
			";" => -29,
			"+" => 173,
			'CAT' => 179,
			'CMPOP' => 180,
			"?" => 174,
			'DIV' => 175,
			'MOD' => 181,
			"/" => 182,
			'AND' => 176,
			'BINOP' => 177,
			'OR' => 178
		},
		DEFAULT => -39
	},
	{#State 72
		DEFAULT => -26
	},
	{#State 73
		ACTIONS => {
			"\"" => 99,
			"\$" => 96,
			'LITERAL' => 98,
			'FILENAME' => 93,
			'IDENT' => 91,
			'NUMBER' => 94
		},
		GOTOS => {
			'filepart' => 97,
			'names' => 101,
			'nameargs' => 183,
			'filename' => 95,
			'name' => 92
		}
	},
	{#State 74
		DEFAULT => -49
	},
	{#State 75
		ACTIONS => {
			"\"" => 99,
			"\$" => 96,
			'LITERAL' => 98,
			'FILENAME' => 93,
			'IDENT' => 91,
			'NUMBER' => 94
		},
		GOTOS => {
			'filepart' => 97,
			'names' => 101,
			'nameargs' => 184,
			'filename' => 95,
			'name' => 92
		}
	},
	{#State 76
		DEFAULT => -22
	},
	{#State 77
		ACTIONS => {
			'NOT' => 42,
			"{" => 31,
			'LITERAL' => 88,
			'IDENT' => 3,
			"\"" => 70,
			"(" => 60,
			"\$" => 48,
			"[" => 10,
			'NUMBER' => 27,
			'REF' => 28,
			"\${" => 40
		},
		GOTOS => {
			'expr' => 185,
			'sterm' => 78,
			'item' => 43,
			'node' => 24,
			'ident' => 87,
			'term' => 68,
			'lterm' => 63
		}
	},
	{#State 78
		DEFAULT => -120
	},
	{#State 79
		ACTIONS => {
			"\$" => 48,
			'LITERAL' => 85,
			'IDENT' => 3,
			"\${" => 40
		},
		GOTOS => {
			'setlist' => 186,
			'item' => 43,
			'assign' => 20,
			'node' => 24,
			'ident' => 84
		}
	},
	{#State 80
		ACTIONS => {
			'END' => 187
		},
		DEFAULT => -4
	},
	{#State 81
		ACTIONS => {
			"\$" => 48,
			'COMMA' => 189,
			'LITERAL' => 85,
			'IDENT' => 3,
			"\${" => 40
		},
		DEFAULT => -32,
		GOTOS => {
			'item' => 43,
			'assign' => 188,
			'node' => 24,
			'ident' => 84
		}
	},
	{#State 82
		DEFAULT => -21
	},
	{#State 83
		DEFAULT => -34
	},
	{#State 84
		ACTIONS => {
			'ASSIGN' => 190,
			'DOT' => 114
		}
	},
	{#State 85
		ACTIONS => {
			'ASSIGN' => 170
		}
	},
	{#State 86
		ACTIONS => {
			'COMMA' => 189,
			'LITERAL' => 85,
			'IDENT' => 3,
			"\$" => 48,
			"\${" => 40
		},
		DEFAULT => -43,
		GOTOS => {
			'item' => 43,
			'assign' => 188,
			'node' => 24,
			'ident' => 84
		}
	},
	{#State 87
		ACTIONS => {
			'DOT' => 114
		},
		DEFAULT => -125
	},
	{#State 88
		DEFAULT => -128
	},
	{#State 89
		ACTIONS => {
			'CMPOP' => 180,
			"?" => 174,
			";" => 191,
			"+" => 173,
			'MOD' => 181,
			'DIV' => 175,
			"/" => 182,
			'AND' => 176,
			'CAT' => 179,
			'BINOP' => 177,
			'OR' => 178
		}
	},
	{#State 90
		DEFAULT => -20
	},
	{#State 91
		DEFAULT => -189
	},
	{#State 92
		DEFAULT => -182
	},
	{#State 93
		DEFAULT => -188
	},
	{#State 94
		DEFAULT => -190
	},
	{#State 95
		ACTIONS => {
			'DOT' => 192
		},
		DEFAULT => -184
	},
	{#State 96
		ACTIONS => {
			"\$" => 48,
			'IDENT' => 3,
			"\${" => 40
		},
		GOTOS => {
			'item' => 43,
			'node' => 24,
			'ident' => 193
		}
	},
	{#State 97
		DEFAULT => -187
	},
	{#State 98
		DEFAULT => -185
	},
	{#State 99
		DEFAULT => -192,
		GOTOS => {
			'quoted' => 194
		}
	},
	{#State 100
		DEFAULT => -48
	},
	{#State 101
		ACTIONS => {
			"+" => 195,
			"(" => 196
		},
		DEFAULT => -172,
		GOTOS => {
			'args' => 197
		}
	},
	{#State 102
		ACTIONS => {
			"{" => 31,
			'COMMA' => 200,
			'LITERAL' => 88,
			'IDENT' => 3,
			"\"" => 70,
			"\$" => 48,
			"[" => 10,
			'NUMBER' => 27,
			'REF' => 28,
			"]" => 198,
			"\${" => 40
		},
		GOTOS => {
			'sterm' => 78,
			'item' => 43,
			'node' => 24,
			'ident' => 87,
			'term' => 199,
			'lterm' => 63
		}
	},
	{#State 103
		ACTIONS => {
			"]" => 201
		}
	},
	{#State 104
		DEFAULT => -123
	},
	{#State 105
		DEFAULT => -132
	},
	{#State 106
		ACTIONS => {
			'TO' => 202
		},
		DEFAULT => -120
	},
	{#State 107
		ACTIONS => {
			'SET' => 1,
			'PERL' => 45,
			'NOT' => 42,
			'IDENT' => 3,
			'CLEAR' => 46,
			'UNLESS' => 4,
			'IF' => 49,
			"\$" => 48,
			'STOP' => 7,
			'CALL' => 50,
			'THROW' => 9,
			'GET' => 52,
			"[" => 10,
			'TRY' => 11,
			'LAST' => 54,
			'DEBUG' => 56,
			'RAWPERL' => 14,
			'META' => 16,
			'INCLUDE' => 18,
			"(" => 60,
			'SWITCH' => 61,
			'MACRO' => 19,
			'WRAPPER' => 64,
			";" => -31,
			'FOR' => 22,
			'LITERAL' => 66,
			'NEXT' => 23,
			"\"" => 70,
			'TEXT' => 25,
			'PROCESS' => 73,
			'RETURN' => 74,
			'FILTER' => 26,
			'INSERT' => 75,
			'NUMBER' => 27,
			'REF' => 28,
			'WHILE' => 77,
			'BLOCK' => 29,
			'DEFAULT' => 79,
			"{" => 31,
			'USE' => 34,
			'VIEW' => 38,
			"\${" => 40
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 41,
			'loopwf' => 44,
			'item' => 43,
			'atomloop' => 2,
			'loop' => 5,
			'capture' => 47,
			'statement' => 6,
			'view' => 8,
			'wrapper' => 51,
			'atomexpr' => 53,
			'chunk' => 12,
			'atomdir' => 13,
			'anonblock' => 55,
			'defblockname' => 15,
			'loopwhilevar' => 204,
			'ident' => 17,
			'assign' => 20,
			'macro' => 21,
			'lterm' => 63,
			'node' => 24,
			'term' => 68,
			'rawperl' => 69,
			'expr' => 71,
			'use' => 72,
			'defblock' => 76,
			'filter' => 30,
			'sterm' => 78,
			'perl' => 33,
			'chunks' => 203,
			'setlist' => 81,
			'switch' => 36,
			'try' => 37,
			'block' => 205,
			'directive' => 82,
			'condition' => 83
		}
	},
	{#State 108
		ACTIONS => {
			";" => 206
		}
	},
	{#State 109
		ACTIONS => {
			'ASSIGN' => 207
		}
	},
	{#State 110
		DEFAULT => -115
	},
	{#State 111
		ACTIONS => {
			'COMMA' => 209,
			'IDENT' => 109
		},
		DEFAULT => -102,
		GOTOS => {
			'meta' => 208
		}
	},
	{#State 112
		ACTIONS => {
			";" => 210
		}
	},
	{#State 113
		ACTIONS => {
			'COMMA' => 209,
			'IDENT' => 109
		},
		DEFAULT => -30,
		GOTOS => {
			'meta' => 208
		}
	},
	{#State 114
		ACTIONS => {
			"\$" => 48,
			'IDENT' => 3,
			'NUMBER' => 212,
			"\${" => 40
		},
		GOTOS => {
			'item' => 43,
			'node' => 211
		}
	},
	{#State 115
		ACTIONS => {
			'SET' => 1,
			'PERL' => 45,
			'NOT' => 42,
			'IDENT' => 3,
			'CLEAR' => 46,
			'UNLESS' => 4,
			'IF' => 49,
			"\$" => 48,
			'STOP' => 7,
			'CALL' => 50,
			'THROW' => 9,
			'GET' => 52,
			"[" => 10,
			'TRY' => 11,
			'LAST' => 54,
			'DEBUG' => 56,
			'INCLUDE' => 18,
			"(" => 60,
			'SWITCH' => 61,
			'WRAPPER' => 64,
			'FOR' => 22,
			'NEXT' => 23,
			'LITERAL' => 66,
			"\"" => 70,
			'PROCESS' => 73,
			'FILTER' => 26,
			'RETURN' => 74,
			'INSERT' => 75,
			'NUMBER' => 27,
			'REF' => 28,
			'WHILE' => 77,
			'BLOCK' => 213,
			'DEFAULT' => 79,
			"{" => 31,
			"\${" => 40
		},
		GOTOS => {
			'loopforvar' => 41,
			'loopwf' => 44,
			'item' => 43,
			'atomloop' => 2,
			'node' => 24,
			'term' => 68,
			'loop' => 5,
			'expr' => 215,
			'wrapper' => 51,
			'atomexpr' => 53,
			'atomdir' => 13,
			'mdir' => 214,
			'sterm' => 78,
			'filter' => 30,
			'loopwhilevar' => 204,
			'ident' => 165,
			'perl' => 33,
			'setlist' => 81,
			'try' => 37,
			'switch' => 36,
			'assign' => 20,
			'directive' => 216,
			'condition' => 83,
			'lterm' => 63
		}
	},
	{#State 116
		DEFAULT => -46
	},
	{#State 117
		ACTIONS => {
			'SET' => 1,
			'PERL' => 45,
			'NOT' => 42,
			'IDENT' => 3,
			'CLEAR' => 46,
			'UNLESS' => 4,
			'IF' => 49,
			"\$" => 48,
			'STOP' => 7,
			'CALL' => 50,
			'THROW' => 9,
			'GET' => 52,
			"[" => 10,
			'TRY' => 11,
			'LAST' => 54,
			'DEBUG' => 56,
			'INCLUDE' => 18,
			"(" => 218,
			'SWITCH' => 61,
			'WRAPPER' => 64,
			'FOR' => 22,
			'NEXT' => 23,
			'LITERAL' => 66,
			"\"" => 70,
			'PROCESS' => 73,
			'FILTER' => 26,
			'RETURN' => 74,
			'INSERT' => 75,
			'NUMBER' => 27,
			'REF' => 28,
			'WHILE' => 77,
			'BLOCK' => 213,
			'DEFAULT' => 79,
			"{" => 31,
			"\${" => 40
		},
		GOTOS => {
			'loopforvar' => 41,
			'loopwf' => 44,
			'item' => 43,
			'atomloop' => 2,
			'node' => 24,
			'term' => 68,
			'loop' => 5,
			'expr' => 219,
			'wrapper' => 51,
			'atomexpr' => 53,
			'atomdir' => 13,
			'mdir' => 217,
			'sterm' => 78,
			'filter' => 30,
			'loopwhilevar' => 204,
			'ident' => 165,
			'perl' => 33,
			'setlist' => 81,
			'try' => 37,
			'switch' => 36,
			'assign' => 20,
			'directive' => 216,
			'condition' => 83,
			'lterm' => 63
		}
	},
	{#State 118
		ACTIONS => {
			'IN' => 221,
			'ASSIGN' => 220
		},
		DEFAULT => -146
	},
	{#State 119
		DEFAULT => -172,
		GOTOS => {
			'args' => 222
		}
	},
	{#State 120
		DEFAULT => -76
	},
	{#State 121
		ACTIONS => {
			'ASSIGN' => -146
		},
		DEFAULT => -189
	},
	{#State 122
		ACTIONS => {
			'ASSIGN' => 223
		}
	},
	{#State 123
		DEFAULT => -175
	},
	{#State 124
		ACTIONS => {
			"\$" => 48,
			'IDENT' => 224,
			"\${" => 40
		},
		GOTOS => {
			'item' => 43,
			'node' => 24,
			'ident' => 193
		}
	},
	{#State 125
		ACTIONS => {
			";" => 225
		}
	},
	{#State 126
		ACTIONS => {
			'ASSIGN' => -177
		},
		DEFAULT => -185
	},
	{#State 127
		DEFAULT => -192,
		GOTOS => {
			'quoted' => 226
		}
	},
	{#State 128
		DEFAULT => -174
	},
	{#State 129
		ACTIONS => {
			'DOT' => 114
		},
		DEFAULT => -126
	},
	{#State 130
		ACTIONS => {
			'ASSIGN' => 207
		},
		DEFAULT => -189
	},
	{#State 131
		DEFAULT => -99
	},
	{#State 132
		ACTIONS => {
			'DOT' => 192
		},
		DEFAULT => -100
	},
	{#State 133
		ACTIONS => {
			";" => 227
		}
	},
	{#State 134
		DEFAULT => -101
	},
	{#State 135
		ACTIONS => {
			"}" => 228
		}
	},
	{#State 136
		ACTIONS => {
			'ASSIGN' => 229
		}
	},
	{#State 137
		DEFAULT => -138
	},
	{#State 138
		ACTIONS => {
			"\$" => 48,
			'COMMA' => 231,
			'LITERAL' => 139,
			'IDENT' => 3,
			"\${" => 40
		},
		DEFAULT => -134,
		GOTOS => {
			'item' => 136,
			'param' => 230
		}
	},
	{#State 139
		ACTIONS => {
			'ASSIGN' => 232
		}
	},
	{#State 140
		DEFAULT => -89
	},
	{#State 141
		DEFAULT => -12
	},
	{#State 142
		DEFAULT => -6
	},
	{#State 143
		ACTIONS => {
			";" => 233
		}
	},
	{#State 144
		ACTIONS => {
			'ASSIGN' => 234
		},
		DEFAULT => -146
	},
	{#State 145
		ACTIONS => {
			'DOT' => 114
		},
		DEFAULT => -17
	},
	{#State 146
		ACTIONS => {
			";" => 235
		}
	},
	{#State 147
		ACTIONS => {
			"}" => 236
		}
	},
	{#State 148
		ACTIONS => {
			'SET' => 1,
			'PERL' => 45,
			'NOT' => 42,
			'IDENT' => 3,
			'CLEAR' => 46,
			'UNLESS' => 4,
			'IF' => 49,
			"\$" => 48,
			'STOP' => 7,
			'CALL' => 50,
			'THROW' => 9,
			'GET' => 52,
			"[" => 10,
			'TRY' => 11,
			'LAST' => 54,
			'DEBUG' => 56,
			'RAWPERL' => 14,
			'META' => 16,
			'INCLUDE' => 18,
			"(" => 60,
			'SWITCH' => 61,
			'MACRO' => 19,
			'WRAPPER' => 64,
			";" => -31,
			'FOR' => 22,
			'LITERAL' => 66,
			'NEXT' => 23,
			"\"" => 70,
			'TEXT' => 25,
			'PROCESS' => 73,
			'RETURN' => 74,
			'FILTER' => 26,
			'INSERT' => 75,
			'NUMBER' => 27,
			'REF' => 28,
			'WHILE' => 77,
			'BLOCK' => 29,
			'DEFAULT' => 79,
			"{" => 31,
			'USE' => 34,
			'VIEW' => 38,
			"\${" => 40
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 41,
			'loopwf' => 44,
			'item' => 43,
			'atomloop' => 2,
			'loop' => 5,
			'capture' => 47,
			'statement' => 6,
			'view' => 8,
			'wrapper' => 51,
			'atomexpr' => 53,
			'chunk' => 12,
			'atomdir' => 13,
			'anonblock' => 55,
			'defblockname' => 15,
			'loopwhilevar' => 204,
			'ident' => 17,
			'assign' => 20,
			'macro' => 21,
			'lterm' => 63,
			'node' => 24,
			'term' => 68,
			'rawperl' => 69,
			'expr' => 71,
			'use' => 72,
			'defblock' => 76,
			'filter' => 30,
			'sterm' => 78,
			'perl' => 33,
			'chunks' => 203,
			'setlist' => 81,
			'switch' => 36,
			'try' => 37,
			'block' => 237,
			'directive' => 82,
			'condition' => 83
		}
	},
	{#State 149
		ACTIONS => {
			'DIV' => 175,
			'BINOP' => 177,
			"+" => 173,
			'CAT' => 179,
			'CMPOP' => 180,
			'MOD' => 181,
			"/" => 182
		},
		DEFAULT => -158
	},
	{#State 150
		DEFAULT => -172,
		GOTOS => {
			'args' => 238
		}
	},
	{#State 151
		DEFAULT => -92,
		GOTOS => {
			'@2-2' => 239
		}
	},
	{#State 152
		DEFAULT => -148
	},
	{#State 153
		ACTIONS => {
			'CMPOP' => 180,
			"?" => 174,
			";" => 240,
			"+" => 173,
			'MOD' => 181,
			'DIV' => 175,
			"/" => 182,
			'AND' => 176,
			'CAT' => 179,
			'BINOP' => 177,
			'OR' => 178
		}
	},
	{#State 154
		ACTIONS => {
			"+" => 173,
			'CAT' => 179,
			'CMPOP' => 180,
			"?" => 174,
			'DIV' => 175,
			'MOD' => 181,
			"/" => 182,
			'AND' => 176,
			'BINOP' => 177,
			'OR' => 178
		},
		DEFAULT => -42
	},
	{#State 155
		ACTIONS => {
			"+" => 173,
			'CAT' => 179,
			'CMPOP' => 180,
			"?" => 174,
			'DIV' => 175,
			'MOD' => 181,
			"/" => 182,
			'AND' => 176,
			'BINOP' => 177,
			'OR' => 178
		},
		DEFAULT => -41
	},
	{#State 156
		ACTIONS => {
			'NOT' => 42,
			"{" => 31,
			'LITERAL' => 88,
			'IDENT' => 3,
			"\"" => 70,
			"(" => 60,
			"\$" => 48,
			"[" => 10,
			'NUMBER' => 27,
			'REF' => 28,
			"\${" => 40
		},
		GOTOS => {
			'expr' => 241,
			'sterm' => 78,
			'item' => 43,
			'node' => 24,
			'ident' => 87,
			'term' => 68,
			'lterm' => 63
		}
	},
	{#State 157
		ACTIONS => {
			"{" => 31,
			'LITERAL' => 88,
			'IDENT' => 118,
			"\"" => 70,
			"\$" => 48,
			"[" => 10,
			'NUMBER' => 27,
			'REF' => 28,
			"\${" => 40
		},
		GOTOS => {
			'sterm' => 78,
			'item' => 43,
			'loopvar' => 242,
			'node' => 24,
			'ident' => 87,
			'term' => 119,
			'lterm' => 63
		}
	},
	{#State 158
		ACTIONS => {
			"\"" => 127,
			"\$" => 124,
			'LITERAL' => 126,
			'FILENAME' => 93,
			'IDENT' => 121,
			'NUMBER' => 94,
			"\${" => 40
		},
		GOTOS => {
			'names' => 101,
			'lvalue' => 122,
			'item' => 123,
			'name' => 92,
			'filepart' => 97,
			'filename' => 95,
			'nameargs' => 128,
			'lnameargs' => 243
		}
	},
	{#State 159
		ACTIONS => {
			'NOT' => 42,
			"{" => 31,
			'LITERAL' => 88,
			'IDENT' => 3,
			"\"" => 70,
			"(" => 60,
			"\$" => 48,
			"[" => 10,
			'NUMBER' => 27,
			'REF' => 28,
			"\${" => 40
		},
		GOTOS => {
			'expr' => 244,
			'sterm' => 78,
			'item' => 43,
			'node' => 24,
			'ident' => 87,
			'term' => 68,
			'lterm' => 63
		}
	},
	{#State 160
		ACTIONS => {
			"\"" => 99,
			"\$" => 96,
			'LITERAL' => 98,
			'FILENAME' => 93,
			'IDENT' => 91,
			'NUMBER' => 94
		},
		GOTOS => {
			'filepart' => 97,
			'names' => 101,
			'nameargs' => 245,
			'filename' => 95,
			'name' => 92
		}
	},
	{#State 161
		ACTIONS => {
			'NOT' => 42,
			"{" => 31,
			'LITERAL' => 88,
			'IDENT' => 3,
			"\"" => 70,
			"(" => 60,
			"\$" => 48,
			"[" => 10,
			'NUMBER' => 27,
			'REF' => 28,
			"\${" => 40
		},
		GOTOS => {
			'expr' => 246,
			'sterm' => 78,
			'item' => 43,
			'node' => 24,
			'ident' => 87,
			'term' => 68,
			'lterm' => 63
		}
	},
	{#State 162
		DEFAULT => -54
	},
	{#State 163
		DEFAULT => 0
	},
	{#State 164
		ACTIONS => {
			'SET' => 1,
			'PERL' => 45,
			'NOT' => 42,
			'IDENT' => 3,
			'CLEAR' => 46,
			'UNLESS' => 4,
			'IF' => 49,
			"\$" => 48,
			'STOP' => 7,
			'CALL' => 50,
			'THROW' => 9,
			'GET' => 52,
			"[" => 10,
			'TRY' => 11,
			'LAST' => 54,
			'DEBUG' => 56,
			'RAWPERL' => 14,
			'META' => 16,
			'INCLUDE' => 18,
			"(" => 60,
			'SWITCH' => 61,
			'MACRO' => 19,
			'WRAPPER' => 64,
			";" => -31,
			'FOR' => 22,
			'LITERAL' => 66,
			'NEXT' => 23,
			"\"" => 70,
			'TEXT' => 25,
			'PROCESS' => 73,
			'RETURN' => 74,
			'FILTER' => 26,
			'INSERT' => 75,
			'NUMBER' => 27,
			'REF' => 28,
			'WHILE' => 77,
			'BLOCK' => 29,
			'DEFAULT' => 79,
			"{" => 31,
			'USE' => 34,
			'VIEW' => 38,
			'EVENT' => 39,
			"\${" => 40
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 41,
			'loopwf' => 44,
			'item' => 43,
			'atomloop' => 2,
			'loop' => 5,
			'capture' => 47,
			'statement' => 6,
			'view' => 8,
			'wrapper' => 51,
			'atomexpr' => 53,
			'chunk' => 12,
			'atomdir' => 13,
			'anonblock' => 55,
			'defblockname' => 15,
			'loopwhilevar' => 58,
			'event' => 59,
			'ident' => 17,
			'event_loop' => 62,
			'assign' => 20,
			'macro' => 21,
			'lterm' => 63,
			'event_plug' => 65,
			'node' => 24,
			'term' => 68,
			'rawperl' => 69,
			'expr' => 71,
			'use' => 72,
			'defblock' => 76,
			'sterm' => 78,
			'filter' => 30,
			'eventblock' => 248,
			'perl' => 33,
			'setlist' => 81,
			'chunks' => 247,
			'switch' => 36,
			'try' => 37,
			'block' => 249,
			'directive' => 82,
			'condition' => 83
		}
	},
	{#State 165
		ACTIONS => {
			'DOT' => 114,
			'ASSIGN' => 190
		},
		DEFAULT => -125
	},
	{#State 166
		ACTIONS => {
			")" => 250
		}
	},
	{#State 167
		ACTIONS => {
			'CMPOP' => 180,
			"?" => 174,
			"+" => 173,
			'MOD' => 181,
			'DIV' => 175,
			"/" => 182,
			'AND' => 176,
			'CAT' => 179,
			'BINOP' => 177,
			")" => 251,
			'OR' => 178
		}
	},
	{#State 168
		ACTIONS => {
			'CMPOP' => 180,
			"?" => 174,
			";" => 252,
			"+" => 173,
			'MOD' => 181,
			'DIV' => 175,
			"/" => 182,
			'AND' => 176,
			'CAT' => 179,
			'BINOP' => 177,
			'OR' => 178
		}
	},
	{#State 169
		ACTIONS => {
			";" => 253
		}
	},
	{#State 170
		ACTIONS => {
			'NOT' => 42,
			"{" => 31,
			'LITERAL' => 88,
			'IDENT' => 3,
			"\"" => 70,
			"(" => 60,
			"\$" => 48,
			"[" => 10,
			'NUMBER' => 27,
			'REF' => 28,
			"\${" => 40
		},
		GOTOS => {
			'expr' => 254,
			'sterm' => 78,
			'item' => 43,
			'node' => 24,
			'ident' => 87,
			'term' => 68,
			'lterm' => 63
		}
	},
	{#State 171
		DEFAULT => -3
	},
	{#State 172
		ACTIONS => {
			"\"" => 259,
			'TEXT' => 256,
			";" => 258,
			"\$" => 48,
			'IDENT' => 3,
			"\${" => 40
		},
		GOTOS => {
			'item' => 43,
			'node' => 24,
			'ident' => 255,
			'quotable' => 257
		}
	},
	{#State 173
		ACTIONS => {
			'NOT' => 42,
			"{" => 31,
			'LITERAL' => 88,
			'IDENT' => 3,
			"\"" => 70,
			"(" => 60,
			"\$" => 48,
			"[" => 10,
			'NUMBER' => 27,
			'REF' => 28,
			"\${" => 40
		},
		GOTOS => {
			'expr' => 260,
			'sterm' => 78,
			'item' => 43,
			'node' => 24,
			'ident' => 87,
			'term' => 68,
			'lterm' => 63
		}
	},
	{#State 174
		ACTIONS => {
			'NOT' => 42,
			"{" => 31,
			'LITERAL' => 88,
			'IDENT' => 3,
			"\"" => 70,
			"(" => 60,
			"\$" => 48,
			"[" => 10,
			'NUMBER' => 27,
			'REF' => 28,
			"\${" => 40
		},
		GOTOS => {
			'expr' => 261,
			'sterm' => 78,
			'item' => 43,
			'node' => 24,
			'ident' => 87,
			'term' => 68,
			'lterm' => 63
		}
	},
	{#State 175
		ACTIONS => {
			'NOT' => 42,
			"{" => 31,
			'LITERAL' => 88,
			'IDENT' => 3,
			"\"" => 70,
			"(" => 60,
			"\$" => 48,
			"[" => 10,
			'NUMBER' => 27,
			'REF' => 28,
			"\${" => 40
		},
		GOTOS => {
			'expr' => 262,
			'sterm' => 78,
			'item' => 43,
			'node' => 24,
			'ident' => 87,
			'term' => 68,
			'lterm' => 63
		}
	},
	{#State 176
		ACTIONS => {
			'NOT' => 42,
			"{" => 31,
			'LITERAL' => 88,
			'IDENT' => 3,
			"\"" => 70,
			"(" => 60,
			"\$" => 48,
			"[" => 10,
			'NUMBER' => 27,
			'REF' => 28,
			"\${" => 40
		},
		GOTOS => {
			'expr' => 263,
			'sterm' => 78,
			'item' => 43,
			'node' => 24,
			'ident' => 87,
			'term' => 68,
			'lterm' => 63
		}
	},
	{#State 177
		ACTIONS => {
			'NOT' => 42,
			"{" => 31,
			'LITERAL' => 88,
			'IDENT' => 3,
			"\"" => 70,
			"(" => 60,
			"\$" => 48,
			"[" => 10,
			'NUMBER' => 27,
			'REF' => 28,
			"\${" => 40
		},
		GOTOS => {
			'expr' => 264,
			'sterm' => 78,
			'item' => 43,
			'node' => 24,
			'ident' => 87,
			'term' => 68,
			'lterm' => 63
		}
	},
	{#State 178
		ACTIONS => {
			'NOT' => 42,
			"{" => 31,
			'LITERAL' => 88,
			'IDENT' => 3,
			"\"" => 70,
			"(" => 60,
			"\$" => 48,
			"[" => 10,
			'NUMBER' => 27,
			'REF' => 28,
			"\${" => 40
		},
		GOTOS => {
			'expr' => 265,
			'sterm' => 78,
			'item' => 43,
			'node' => 24,
			'ident' => 87,
			'term' => 68,
			'lterm' => 63
		}
	},
	{#State 179
		ACTIONS => {
			'NOT' => 42,
			"{" => 31,
			'LITERAL' => 88,
			'IDENT' => 3,
			"\"" => 70,
			"(" => 60,
			"\$" => 48,
			"[" => 10,
			'NUMBER' => 27,
			'REF' => 28,
			"\${" => 40
		},
		GOTOS => {
			'expr' => 266,
			'sterm' => 78,
			'item' => 43,
			'node' => 24,
			'ident' => 87,
			'term' => 68,
			'lterm' => 63
		}
	},
	{#State 180
		ACTIONS => {
			'NOT' => 42,
			"{" => 31,
			'LITERAL' => 88,
			'IDENT' => 3,
			"\"" => 70,
			"(" => 60,
			"\$" => 48,
			"[" => 10,
			'NUMBER' => 27,
			'REF' => 28,
			"\${" => 40
		},
		GOTOS => {
			'expr' => 267,
			'sterm' => 78,
			'item' => 43,
			'node' => 24,
			'ident' => 87,
			'term' => 68,
			'lterm' => 63
		}
	},
	{#State 181
		ACTIONS => {
			'NOT' => 42,
			"{" => 31,
			'LITERAL' => 88,
			'IDENT' => 3,
			"\"" => 70,
			"(" => 60,
			"\$" => 48,
			"[" => 10,
			'NUMBER' => 27,
			'REF' => 28,
			"\${" => 40
		},
		GOTOS => {
			'expr' => 268,
			'sterm' => 78,
			'item' => 43,
			'node' => 24,
			'ident' => 87,
			'term' => 68,
			'lterm' => 63
		}
	},
	{#State 182
		ACTIONS => {
			'NOT' => 42,
			"{" => 31,
			'LITERAL' => 88,
			'IDENT' => 3,
			"\"" => 70,
			"(" => 60,
			"\$" => 48,
			"[" => 10,
			'NUMBER' => 27,
			'REF' => 28,
			"\${" => 40
		},
		GOTOS => {
			'expr' => 269,
			'sterm' => 78,
			'item' => 43,
			'node' => 24,
			'ident' => 87,
			'term' => 68,
			'lterm' => 63
		}
	},
	{#State 183
		DEFAULT => -47
	},
	{#State 184
		DEFAULT => -45
	},
	{#State 185
		ACTIONS => {
			'CMPOP' => 180,
			"?" => 174,
			"+" => 173,
			'MOD' => 181,
			'DIV' => 175,
			"/" => 182,
			'AND' => 176,
			'CAT' => 179,
			'BINOP' => 177,
			'OR' => 178
		},
		DEFAULT => -77
	},
	{#State 186
		ACTIONS => {
			'COMMA' => 189,
			'LITERAL' => 85,
			'IDENT' => 3,
			"\$" => 48,
			"\${" => 40
		},
		DEFAULT => -44,
		GOTOS => {
			'item' => 43,
			'assign' => 188,
			'node' => 24,
			'ident' => 84
		}
	},
	{#State 187
		DEFAULT => -2
	},
	{#State 188
		DEFAULT => -163
	},
	{#State 189
		DEFAULT => -164
	},
	{#State 190
		ACTIONS => {
			'NOT' => 42,
			"{" => 31,
			'LITERAL' => 88,
			'IDENT' => 3,
			"\"" => 70,
			"(" => 60,
			"\$" => 48,
			"[" => 10,
			'NUMBER' => 27,
			'REF' => 28,
			"\${" => 40
		},
		GOTOS => {
			'expr' => 270,
			'sterm' => 78,
			'item' => 43,
			'node' => 24,
			'ident' => 87,
			'term' => 68,
			'lterm' => 63
		}
	},
	{#State 191
		ACTIONS => {
			'SET' => 1,
			'PERL' => 45,
			'NOT' => 42,
			'IDENT' => 3,
			'CLEAR' => 46,
			'UNLESS' => 4,
			'IF' => 49,
			"\$" => 48,
			'STOP' => 7,
			'CALL' => 50,
			'THROW' => 9,
			'GET' => 52,
			"[" => 10,
			'TRY' => 11,
			'LAST' => 54,
			'DEBUG' => 56,
			'RAWPERL' => 14,
			'META' => 16,
			'INCLUDE' => 18,
			"(" => 60,
			'SWITCH' => 61,
			'MACRO' => 19,
			'WRAPPER' => 64,
			";" => -31,
			'FOR' => 22,
			'LITERAL' => 66,
			'NEXT' => 23,
			"\"" => 70,
			'TEXT' => 25,
			'PROCESS' => 73,
			'RETURN' => 74,
			'FILTER' => 26,
			'INSERT' => 75,
			'NUMBER' => 27,
			'REF' => 28,
			'WHILE' => 77,
			'BLOCK' => 29,
			'DEFAULT' => 79,
			"{" => 31,
			'USE' => 34,
			'VIEW' => 38,
			"\${" => 40
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 41,
			'loopwf' => 44,
			'item' => 43,
			'atomloop' => 2,
			'loop' => 5,
			'capture' => 47,
			'statement' => 6,
			'view' => 8,
			'wrapper' => 51,
			'atomexpr' => 53,
			'chunk' => 12,
			'atomdir' => 13,
			'anonblock' => 55,
			'defblockname' => 15,
			'loopwhilevar' => 204,
			'ident' => 17,
			'assign' => 20,
			'macro' => 21,
			'lterm' => 63,
			'node' => 24,
			'term' => 68,
			'rawperl' => 69,
			'expr' => 71,
			'use' => 72,
			'defblock' => 76,
			'filter' => 30,
			'sterm' => 78,
			'perl' => 33,
			'chunks' => 203,
			'setlist' => 81,
			'switch' => 36,
			'try' => 37,
			'block' => 271,
			'directive' => 82,
			'condition' => 83
		}
	},
	{#State 192
		ACTIONS => {
			'FILENAME' => 93,
			'IDENT' => 91,
			'NUMBER' => 94
		},
		GOTOS => {
			'filepart' => 272
		}
	},
	{#State 193
		ACTIONS => {
			'DOT' => 114
		},
		DEFAULT => -172,
		GOTOS => {
			'args' => 273
		}
	},
	{#State 194
		ACTIONS => {
			"\"" => 274,
			'TEXT' => 256,
			";" => 258,
			"\$" => 48,
			'IDENT' => 3,
			"\${" => 40
		},
		GOTOS => {
			'item' => 43,
			'node' => 24,
			'ident' => 255,
			'quotable' => 257
		}
	},
	{#State 195
		ACTIONS => {
			"\"" => 99,
			'LITERAL' => 98,
			'FILENAME' => 93,
			'IDENT' => 91,
			'NUMBER' => 94
		},
		GOTOS => {
			'filepart' => 97,
			'filename' => 95,
			'name' => 275
		}
	},
	{#State 196
		DEFAULT => -172,
		GOTOS => {
			'args' => 276
		}
	},
	{#State 197
		ACTIONS => {
			'NOT' => 42,
			'LITERAL' => 280,
			'IDENT' => 3,
			"\"" => 70,
			"\$" => 48,
			"[" => 10,
			'NUMBER' => 27,
			'REF' => 28,
			"{" => 31,
			'COMMA' => 282,
			"(" => 60,
			"\${" => 40
		},
		DEFAULT => -179,
		GOTOS => {
			'expr' => 281,
			'sterm' => 78,
			'item' => 278,
			'param' => 279,
			'node' => 24,
			'ident' => 277,
			'term' => 68,
			'lterm' => 63
		}
	},
	{#State 198
		DEFAULT => -121
	},
	{#State 199
		DEFAULT => -130
	},
	{#State 200
		DEFAULT => -131
	},
	{#State 201
		DEFAULT => -122
	},
	{#State 202
		ACTIONS => {
			"\"" => 70,
			"\$" => 48,
			'LITERAL' => 88,
			'IDENT' => 3,
			'REF' => 28,
			'NUMBER' => 27,
			"\${" => 40
		},
		GOTOS => {
			'sterm' => 283,
			'item' => 43,
			'node' => 24,
			'ident' => 87
		}
	},
	{#State 203
		ACTIONS => {
			'SET' => 1,
			'PERL' => 45,
			'NOT' => 42,
			'IDENT' => 3,
			'CLEAR' => 46,
			'UNLESS' => 4,
			'IF' => 49,
			"\$" => 48,
			'STOP' => 7,
			'CALL' => 50,
			'THROW' => 9,
			'GET' => 52,
			"[" => 10,
			'TRY' => 11,
			'LAST' => 54,
			'DEBUG' => 56,
			'RAWPERL' => 14,
			'META' => 16,
			'INCLUDE' => 18,
			"(" => 60,
			'SWITCH' => 61,
			'MACRO' => 19,
			'WRAPPER' => 64,
			";" => -31,
			'FOR' => 22,
			'LITERAL' => 66,
			'NEXT' => 23,
			"\"" => 70,
			'TEXT' => 25,
			'PROCESS' => 73,
			'RETURN' => 74,
			'FILTER' => 26,
			'INSERT' => 75,
			'NUMBER' => 27,
			'REF' => 28,
			'WHILE' => 77,
			'BLOCK' => 29,
			'DEFAULT' => 79,
			"{" => 31,
			'USE' => 34,
			'VIEW' => 38,
			"\${" => 40
		},
		DEFAULT => -10,
		GOTOS => {
			'loopforvar' => 41,
			'loopwf' => 44,
			'item' => 43,
			'atomloop' => 2,
			'loop' => 5,
			'capture' => 47,
			'statement' => 6,
			'view' => 8,
			'wrapper' => 51,
			'atomexpr' => 53,
			'chunk' => 141,
			'atomdir' => 13,
			'anonblock' => 55,
			'defblockname' => 15,
			'loopwhilevar' => 204,
			'ident' => 17,
			'assign' => 20,
			'macro' => 21,
			'lterm' => 63,
			'node' => 24,
			'term' => 68,
			'rawperl' => 69,
			'expr' => 71,
			'use' => 72,
			'defblock' => 76,
			'filter' => 30,
			'sterm' => 78,
			'perl' => 33,
			'setlist' => 81,
			'switch' => 36,
			'try' => 37,
			'directive' => 82,
			'condition' => 83
		}
	},
	{#State 204
		ACTIONS => {
			";" => 284
		}
	},
	{#State 205
		ACTIONS => {
			'FINAL' => 285,
			'CATCH' => 287
		},
		DEFAULT => -88,
		GOTOS => {
			'final' => 286
		}
	},
	{#State 206
		ACTIONS => {
			'TEXT' => 288
		}
	},
	{#State 207
		ACTIONS => {
			"\"" => 291,
			'LITERAL' => 290,
			'NUMBER' => 289
		}
	},
	{#State 208
		DEFAULT => -113
	},
	{#State 209
		DEFAULT => -114
	},
	{#State 210
		ACTIONS => {
			'SET' => 1,
			'PERL' => 45,
			'NOT' => 42,
			'IDENT' => 3,
			'CLEAR' => 46,
			'UNLESS' => 4,
			'IF' => 49,
			"\$" => 48,
			'STOP' => 7,
			'CALL' => 50,
			'THROW' => 9,
			'GET' => 52,
			"[" => 10,
			'TRY' => 11,
			'LAST' => 54,
			'DEBUG' => 56,
			'RAWPERL' => 14,
			'META' => 16,
			'INCLUDE' => 18,
			"(" => 60,
			'SWITCH' => 61,
			'MACRO' => 19,
			'WRAPPER' => 64,
			";" => -31,
			'FOR' => 22,
			'LITERAL' => 66,
			'NEXT' => 23,
			"\"" => 70,
			'TEXT' => 25,
			'PROCESS' => 73,
			'RETURN' => 74,
			'FILTER' => 26,
			'INSERT' => 75,
			'NUMBER' => 27,
			'REF' => 28,
			'WHILE' => 77,
			'BLOCK' => 29,
			'DEFAULT' => 79,
			"{" => 31,
			'USE' => 34,
			'VIEW' => 38,
			'EVENT' => 39,
			"\${" => 40
		},
		DEFAULT => -9,
		GOTOS => {
			'loopforvar' => 41,
			'loopwf' => 44,
			'item' => 43,
			'atomloop' => 2,
			'loop' => 5,
			'capture' => 47,
			'statement' => 6,
			'view' => 8,
			'wrapper' => 51,
			'atomexpr' => 53,
			'chunk' => 12,
			'atomdir' => 13,
			'anonblock' => 55,
			'template' => 292,
			'defblockname' => 15,
			'loopwhilevar' => 58,
			'event' => 59,
			'ident' => 17,
			'event_loop' => 62,
			'assign' => 20,
			'macro' => 21,
			'lterm' => 63,
			'event_plug' => 65,
			'node' => 24,
			'finalblock' => 67,
			'rawperl' => 69,
			'term' => 68,
			'use' => 72,
			'expr' => 71,
			'defblock' => 76,
			'sterm' => 78,
			'filter' => 30,
			'eventblock' => 80,
			'templatecode' => 32,
			'perl' => 33,
			'setlist' => 81,
			'chunks' => 35,
			'try' => 37,
			'switch' => 36,
			'directive' => 82,
			'condition' => 83
		}
	},
	{#State 211
		DEFAULT => -141
	},
	{#State 212
		DEFAULT => -142
	},
	{#State 213
		ACTIONS => {
			";" => 293
		}
	},
	{#State 214
		DEFAULT => -105
	},
	{#State 215
		ACTIONS => {
			";" => -166,
			"+" => 173,
			'LITERAL' => -166,
			'IDENT' => -166,
			'CAT' => 179,
			"\$" => -166,
			'CMPOP' => 180,
			"?" => 174,
			'DIV' => 175,
			'MOD' => 181,
			'COMMA' => -166,
			"/" => 182,
			'AND' => 176,
			'BINOP' => 177,
			'OR' => 178,
			"\${" => -166
		},
		DEFAULT => -39
	},
	{#State 216
		DEFAULT => -108
	},
	{#State 217
		DEFAULT => -107
	},
	{#State 218
		ACTIONS => {
			'NOT' => 42,
			"{" => 31,
			'LITERAL' => 66,
			'IDENT' => 294,
			"\"" => 70,
			"(" => 60,
			"\$" => 48,
			"[" => 10,
			'NUMBER' => 27,
			'REF' => 28,
			"\${" => 40
		},
		GOTOS => {
			'expr' => 167,
			'sterm' => 78,
			'item' => 43,
			'assign' => 166,
			'margs' => 295,
			'node' => 24,
			'ident' => 165,
			'term' => 68,
			'lterm' => 63
		}
	},
	{#State 219
		ACTIONS => {
			"+" => 173,
			'CAT' => 179,
			'CMPOP' => 180,
			"?" => 174,
			'DIV' => 175,
			'MOD' => 181,
			"/" => 182,
			'AND' => 176,
			'BINOP' => 177,
			'OR' => 178
		},
		DEFAULT => -39
	},
	{#State 220
		ACTIONS => {
			"{" => 31,
			'LITERAL' => 88,
			'IDENT' => 3,
			"\"" => 70,
			"\$" => 48,
			"[" => 10,
			'NUMBER' => 27,
			'REF' => 28,
			"\${" => 40
		},
		GOTOS => {
			'sterm' => 78,
			'item' => 43,
			'node' => 24,
			'ident' => 87,
			'term' => 296,
			'lterm' => 63
		}
	},
	{#State 221
		ACTIONS => {
			"{" => 31,
			'LITERAL' => 88,
			'IDENT' => 3,
			"\"" => 70,
			"\$" => 48,
			"[" => 10,
			'NUMBER' => 27,
			'REF' => 28,
			"\${" => 40
		},
		GOTOS => {
			'sterm' => 78,
			'item' => 43,
			'node' => 24,
			'ident' => 87,
			'term' => 297,
			'lterm' => 63
		}
	},
	{#State 222
		ACTIONS => {
			'NOT' => 42,
			"{" => 31,
			'COMMA' => 282,
			'LITERAL' => 280,
			'IDENT' => 3,
			"\"" => 70,
			"(" => 60,
			"\$" => 48,
			"[" => 10,
			'NUMBER' => 27,
			'REF' => 28,
			"\${" => 40
		},
		DEFAULT => -80,
		GOTOS => {
			'expr' => 281,
			'sterm' => 78,
			'item' => 278,
			'param' => 279,
			'node' => 24,
			'ident' => 277,
			'term' => 68,
			'lterm' => 63
		}
	},
	{#State 223
		ACTIONS => {
			"\"" => 99,
			"\$" => 96,
			'LITERAL' => 98,
			'FILENAME' => 93,
			'IDENT' => 91,
			'NUMBER' => 94
		},
		GOTOS => {
			'filepart' => 97,
			'names' => 101,
			'nameargs' => 298,
			'filename' => 95,
			'name' => 92
		}
	},
	{#State 224
		ACTIONS => {
			'ASSIGN' => -148
		},
		DEFAULT => -146
	},
	{#State 225
		ACTIONS => {
			'SET' => 1,
			'PERL' => 45,
			'NOT' => 42,
			'IDENT' => 3,
			'CLEAR' => 46,
			'UNLESS' => 4,
			'IF' => 49,
			"\$" => 48,
			'STOP' => 7,
			'CALL' => 50,
			'THROW' => 9,
			'GET' => 52,
			"[" => 10,
			'TRY' => 11,
			'LAST' => 54,
			'DEBUG' => 56,
			'RAWPERL' => 14,
			'META' => 16,
			'INCLUDE' => 18,
			"(" => 60,
			'SWITCH' => 61,
			'MACRO' => 19,
			'WRAPPER' => 64,
			";" => -31,
			'FOR' => 22,
			'LITERAL' => 66,
			'NEXT' => 23,
			"\"" => 70,
			'TEXT' => 25,
			'PROCESS' => 73,
			'RETURN' => 74,
			'FILTER' => 26,
			'INSERT' => 75,
			'NUMBER' => 27,
			'REF' => 28,
			'WHILE' => 77,
			'BLOCK' => 29,
			'DEFAULT' => 79,
			"{" => 31,
			'USE' => 34,
			'VIEW' => 38,
			"\${" => 40
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 41,
			'loopwf' => 44,
			'item' => 43,
			'atomloop' => 2,
			'loop' => 5,
			'capture' => 47,
			'statement' => 6,
			'view' => 8,
			'wrapper' => 51,
			'atomexpr' => 53,
			'chunk' => 12,
			'atomdir' => 13,
			'anonblock' => 55,
			'defblockname' => 15,
			'loopwhilevar' => 204,
			'ident' => 17,
			'assign' => 20,
			'macro' => 21,
			'lterm' => 63,
			'node' => 24,
			'term' => 68,
			'rawperl' => 69,
			'expr' => 71,
			'use' => 72,
			'defblock' => 76,
			'filter' => 30,
			'sterm' => 78,
			'perl' => 33,
			'chunks' => 203,
			'setlist' => 81,
			'switch' => 36,
			'try' => 37,
			'block' => 299,
			'directive' => 82,
			'condition' => 83
		}
	},
	{#State 226
		ACTIONS => {
			"\"" => 300,
			'TEXT' => 256,
			";" => 258,
			"\$" => 48,
			'IDENT' => 3,
			"\${" => 40
		},
		GOTOS => {
			'item' => 43,
			'node' => 24,
			'ident' => 255,
			'quotable' => 257
		}
	},
	{#State 227
		ACTIONS => {
			'SET' => 1,
			'PERL' => 45,
			'NOT' => 42,
			'IDENT' => 3,
			'CLEAR' => 46,
			'UNLESS' => 4,
			'IF' => 49,
			"\$" => 48,
			'STOP' => 7,
			'CALL' => 50,
			'THROW' => 9,
			'GET' => 52,
			"[" => 10,
			'TRY' => 11,
			'LAST' => 54,
			'DEBUG' => 56,
			'RAWPERL' => 14,
			'META' => 16,
			'INCLUDE' => 18,
			"(" => 60,
			'SWITCH' => 61,
			'MACRO' => 19,
			'WRAPPER' => 64,
			";" => -31,
			'FOR' => 22,
			'LITERAL' => 66,
			'NEXT' => 23,
			"\"" => 70,
			'TEXT' => 25,
			'PROCESS' => 73,
			'RETURN' => 74,
			'FILTER' => 26,
			'INSERT' => 75,
			'NUMBER' => 27,
			'REF' => 28,
			'WHILE' => 77,
			'BLOCK' => 29,
			'DEFAULT' => 79,
			"{" => 31,
			'USE' => 34,
			'VIEW' => 38,
			"\${" => 40
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 41,
			'loopwf' => 44,
			'item' => 43,
			'atomloop' => 2,
			'loop' => 5,
			'capture' => 47,
			'statement' => 6,
			'view' => 8,
			'wrapper' => 51,
			'atomexpr' => 53,
			'chunk' => 12,
			'atomdir' => 13,
			'anonblock' => 55,
			'defblockname' => 15,
			'loopwhilevar' => 204,
			'ident' => 17,
			'assign' => 20,
			'macro' => 21,
			'lterm' => 63,
			'node' => 24,
			'term' => 68,
			'rawperl' => 69,
			'expr' => 71,
			'use' => 72,
			'defblock' => 76,
			'filter' => 30,
			'sterm' => 78,
			'perl' => 33,
			'chunks' => 203,
			'setlist' => 81,
			'switch' => 36,
			'try' => 37,
			'block' => 301,
			'directive' => 82,
			'condition' => 83
		}
	},
	{#State 228
		DEFAULT => -124
	},
	{#State 229
		ACTIONS => {
			'NOT' => 42,
			"{" => 31,
			'LITERAL' => 88,
			'IDENT' => 3,
			"\"" => 70,
			"(" => 60,
			"\$" => 48,
			"[" => 10,
			'NUMBER' => 27,
			'REF' => 28,
			"\${" => 40
		},
		GOTOS => {
			'expr' => 302,
			'sterm' => 78,
			'item' => 43,
			'node' => 24,
			'ident' => 87,
			'term' => 68,
			'lterm' => 63
		}
	},
	{#State 230
		DEFAULT => -136
	},
	{#State 231
		DEFAULT => -137
	},
	{#State 232
		ACTIONS => {
			'NOT' => 42,
			"{" => 31,
			'LITERAL' => 88,
			'IDENT' => 3,
			"\"" => 70,
			"(" => 60,
			"\$" => 48,
			"[" => 10,
			'NUMBER' => 27,
			'REF' => 28,
			"\${" => 40
		},
		GOTOS => {
			'expr' => 303,
			'sterm' => 78,
			'item' => 43,
			'node' => 24,
			'ident' => 87,
			'term' => 68,
			'lterm' => 63
		}
	},
	{#State 233
		DEFAULT => -90,
		GOTOS => {
			'@1-3' => 304
		}
	},
	{#State 234
		ACTIONS => {
			"\$" => 48,
			'IDENT' => 3,
			"\${" => 40
		},
		GOTOS => {
			'item' => 43,
			'node' => 24,
			'ident' => 305
		}
	},
	{#State 235
		ACTIONS => {
			'SET' => 1,
			'PERL' => 45,
			'NOT' => 42,
			'IDENT' => 3,
			'CLEAR' => 46,
			'UNLESS' => 4,
			'IF' => 49,
			"\$" => 48,
			'STOP' => 7,
			'CALL' => 50,
			'THROW' => 9,
			'GET' => 52,
			"[" => 10,
			'TRY' => 11,
			'LAST' => 54,
			'DEBUG' => 56,
			'RAWPERL' => 14,
			'META' => 16,
			'INCLUDE' => 18,
			"(" => 60,
			'SWITCH' => 61,
			'MACRO' => 19,
			'WRAPPER' => 64,
			";" => -31,
			'FOR' => 22,
			'LITERAL' => 66,
			'NEXT' => 23,
			"\"" => 70,
			'TEXT' => 25,
			'PROCESS' => 73,
			'RETURN' => 74,
			'FILTER' => 26,
			'INSERT' => 75,
			'NUMBER' => 27,
			'REF' => 28,
			'WHILE' => 77,
			'BLOCK' => 29,
			'DEFAULT' => 79,
			"{" => 31,
			'USE' => 34,
			'VIEW' => 38,
			'EVENT' => 39,
			"\${" => 40
		},
		DEFAULT => -9,
		GOTOS => {
			'loopforvar' => 41,
			'loopwf' => 44,
			'item' => 43,
			'atomloop' => 2,
			'loop' => 5,
			'capture' => 47,
			'statement' => 6,
			'view' => 8,
			'wrapper' => 51,
			'atomexpr' => 53,
			'chunk' => 12,
			'atomdir' => 13,
			'anonblock' => 55,
			'template' => 306,
			'defblockname' => 15,
			'loopwhilevar' => 58,
			'event' => 59,
			'ident' => 17,
			'event_loop' => 62,
			'assign' => 20,
			'macro' => 21,
			'lterm' => 63,
			'event_plug' => 65,
			'node' => 24,
			'finalblock' => 67,
			'rawperl' => 69,
			'term' => 68,
			'use' => 72,
			'expr' => 71,
			'defblock' => 76,
			'sterm' => 78,
			'filter' => 30,
			'eventblock' => 80,
			'templatecode' => 32,
			'perl' => 33,
			'setlist' => 81,
			'chunks' => 35,
			'try' => 37,
			'switch' => 36,
			'directive' => 82,
			'condition' => 83
		}
	},
	{#State 236
		DEFAULT => -147
	},
	{#State 237
		ACTIONS => {
			'END' => 307
		}
	},
	{#State 238
		ACTIONS => {
			'NOT' => 42,
			"{" => 31,
			'COMMA' => 282,
			'LITERAL' => 280,
			'IDENT' => 3,
			"\"" => 70,
			"(" => 60,
			"\$" => 48,
			"[" => 10,
			'NUMBER' => 27,
			'REF' => 28,
			")" => 308,
			"\${" => 40
		},
		GOTOS => {
			'expr' => 281,
			'sterm' => 78,
			'item' => 278,
			'param' => 279,
			'node' => 24,
			'ident' => 277,
			'term' => 68,
			'lterm' => 63
		}
	},
	{#State 239
		ACTIONS => {
			'SET' => 1,
			'PERL' => 45,
			'NOT' => 42,
			'IDENT' => 3,
			'CLEAR' => 46,
			'UNLESS' => 4,
			'IF' => 49,
			"\$" => 48,
			'STOP' => 7,
			'CALL' => 50,
			'THROW' => 9,
			'GET' => 52,
			"[" => 10,
			'TRY' => 11,
			'LAST' => 54,
			'DEBUG' => 56,
			'RAWPERL' => 14,
			'META' => 16,
			'INCLUDE' => 18,
			"(" => 60,
			'SWITCH' => 61,
			'MACRO' => 19,
			'WRAPPER' => 64,
			";" => -31,
			'FOR' => 22,
			'LITERAL' => 66,
			'NEXT' => 23,
			"\"" => 70,
			'TEXT' => 25,
			'PROCESS' => 73,
			'RETURN' => 74,
			'FILTER' => 26,
			'INSERT' => 75,
			'NUMBER' => 27,
			'REF' => 28,
			'WHILE' => 77,
			'BLOCK' => 29,
			'DEFAULT' => 79,
			"{" => 31,
			'USE' => 34,
			'VIEW' => 38,
			"\${" => 40
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 41,
			'loopwf' => 44,
			'item' => 43,
			'atomloop' => 2,
			'loop' => 5,
			'capture' => 47,
			'statement' => 6,
			'view' => 8,
			'wrapper' => 51,
			'atomexpr' => 53,
			'chunk' => 12,
			'atomdir' => 13,
			'anonblock' => 55,
			'defblockname' => 15,
			'loopwhilevar' => 204,
			'ident' => 17,
			'assign' => 20,
			'macro' => 21,
			'lterm' => 63,
			'node' => 24,
			'term' => 68,
			'rawperl' => 69,
			'expr' => 71,
			'use' => 72,
			'defblock' => 76,
			'filter' => 30,
			'sterm' => 78,
			'perl' => 33,
			'chunks' => 203,
			'setlist' => 81,
			'switch' => 36,
			'try' => 37,
			'block' => 309,
			'directive' => 82,
			'condition' => 83
		}
	},
	{#State 240
		ACTIONS => {
			'SET' => 1,
			'PERL' => 45,
			'NOT' => 42,
			'IDENT' => 3,
			'CLEAR' => 46,
			'UNLESS' => 4,
			'IF' => 49,
			"\$" => 48,
			'STOP' => 7,
			'CALL' => 50,
			'THROW' => 9,
			'GET' => 52,
			"[" => 10,
			'TRY' => 11,
			'LAST' => 54,
			'DEBUG' => 56,
			'RAWPERL' => 14,
			'META' => 16,
			'INCLUDE' => 18,
			"(" => 60,
			'SWITCH' => 61,
			'MACRO' => 19,
			'WRAPPER' => 64,
			";" => -31,
			'FOR' => 22,
			'LITERAL' => 66,
			'NEXT' => 23,
			"\"" => 70,
			'TEXT' => 25,
			'PROCESS' => 73,
			'RETURN' => 74,
			'FILTER' => 26,
			'INSERT' => 75,
			'NUMBER' => 27,
			'REF' => 28,
			'WHILE' => 77,
			'BLOCK' => 29,
			'DEFAULT' => 79,
			"{" => 31,
			'USE' => 34,
			'VIEW' => 38,
			"\${" => 40
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 41,
			'loopwf' => 44,
			'item' => 43,
			'atomloop' => 2,
			'loop' => 5,
			'capture' => 47,
			'statement' => 6,
			'view' => 8,
			'wrapper' => 51,
			'atomexpr' => 53,
			'chunk' => 12,
			'atomdir' => 13,
			'anonblock' => 55,
			'defblockname' => 15,
			'loopwhilevar' => 204,
			'ident' => 17,
			'assign' => 20,
			'macro' => 21,
			'lterm' => 63,
			'node' => 24,
			'term' => 68,
			'rawperl' => 69,
			'expr' => 71,
			'use' => 72,
			'defblock' => 76,
			'filter' => 30,
			'sterm' => 78,
			'perl' => 33,
			'chunks' => 203,
			'setlist' => 81,
			'switch' => 36,
			'try' => 37,
			'block' => 310,
			'directive' => 82,
			'condition' => 83
		}
	},
	{#State 241
		ACTIONS => {
			'CMPOP' => 180,
			"?" => 174,
			"+" => 173,
			'MOD' => 181,
			'DIV' => 175,
			"/" => 182,
			'AND' => 176,
			'CAT' => 179,
			'BINOP' => 177,
			'OR' => 178
		},
		DEFAULT => -60
	},
	{#State 242
		DEFAULT => -72
	},
	{#State 243
		DEFAULT => -97
	},
	{#State 244
		ACTIONS => {
			'CMPOP' => 180,
			"?" => 174,
			"+" => 173,
			'MOD' => 181,
			'DIV' => 175,
			"/" => 182,
			'AND' => 176,
			'CAT' => 179,
			'BINOP' => 177,
			'OR' => 178
		},
		DEFAULT => -58
	},
	{#State 245
		DEFAULT => -82
	},
	{#State 246
		ACTIONS => {
			'CMPOP' => 180,
			"?" => 174,
			"+" => 173,
			'MOD' => 181,
			'DIV' => 175,
			"/" => 182,
			'AND' => 176,
			'CAT' => 179,
			'BINOP' => 177,
			'OR' => 178
		},
		DEFAULT => -73
	},
	{#State 247
		ACTIONS => {
			'SET' => 1,
			'PERL' => 45,
			'NOT' => 42,
			'IDENT' => 3,
			'CLEAR' => 46,
			'UNLESS' => 4,
			'IF' => 49,
			"\$" => 48,
			'STOP' => 7,
			'CALL' => 50,
			'THROW' => 9,
			'GET' => 52,
			"[" => 10,
			'TRY' => 11,
			'LAST' => 54,
			'DEBUG' => 56,
			'RAWPERL' => 14,
			'META' => 16,
			'INCLUDE' => 18,
			"(" => 60,
			'SWITCH' => 61,
			'MACRO' => 19,
			'WRAPPER' => 64,
			";" => -31,
			'FOR' => 22,
			'LITERAL' => 66,
			'NEXT' => 23,
			"\"" => 70,
			'TEXT' => 25,
			'PROCESS' => 73,
			'RETURN' => 74,
			'FILTER' => 26,
			'INSERT' => 75,
			'NUMBER' => 27,
			'REF' => 28,
			'WHILE' => 77,
			'BLOCK' => 29,
			'DEFAULT' => 79,
			"{" => 31,
			'USE' => 34,
			'VIEW' => 38,
			'EVENT' => 39,
			"\${" => 40
		},
		DEFAULT => -10,
		GOTOS => {
			'loopforvar' => 41,
			'loopwf' => 44,
			'item' => 43,
			'atomloop' => 2,
			'loop' => 5,
			'capture' => 47,
			'statement' => 6,
			'view' => 8,
			'wrapper' => 51,
			'atomexpr' => 53,
			'chunk' => 141,
			'atomdir' => 13,
			'anonblock' => 55,
			'defblockname' => 15,
			'loopwhilevar' => 58,
			'event' => 142,
			'ident' => 17,
			'event_loop' => 62,
			'assign' => 20,
			'macro' => 21,
			'lterm' => 63,
			'event_plug' => 65,
			'node' => 24,
			'term' => 68,
			'rawperl' => 69,
			'expr' => 71,
			'use' => 72,
			'defblock' => 76,
			'sterm' => 78,
			'filter' => 30,
			'perl' => 33,
			'setlist' => 81,
			'switch' => 36,
			'try' => 37,
			'directive' => 82,
			'condition' => 83
		}
	},
	{#State 248
		ACTIONS => {
			'END' => 311
		}
	},
	{#State 249
		ACTIONS => {
			'END' => 312
		}
	},
	{#State 250
		DEFAULT => -160
	},
	{#State 251
		DEFAULT => -161
	},
	{#State 252
		ACTIONS => {
			'SET' => 1,
			'PERL' => 45,
			'NOT' => 42,
			'IDENT' => 3,
			'CLEAR' => 46,
			'UNLESS' => 4,
			'IF' => 49,
			"\$" => 48,
			'STOP' => 7,
			'CALL' => 50,
			'THROW' => 9,
			'GET' => 52,
			"[" => 10,
			'TRY' => 11,
			'LAST' => 54,
			'DEBUG' => 56,
			'RAWPERL' => 14,
			'META' => 16,
			'INCLUDE' => 18,
			"(" => 60,
			'SWITCH' => 61,
			'MACRO' => 19,
			'WRAPPER' => 64,
			";" => -31,
			'FOR' => 22,
			'LITERAL' => 66,
			'NEXT' => 23,
			"\"" => 70,
			'TEXT' => 25,
			'PROCESS' => 73,
			'RETURN' => 74,
			'FILTER' => 26,
			'INSERT' => 75,
			'NUMBER' => 27,
			'REF' => 28,
			'WHILE' => 77,
			'BLOCK' => 29,
			'DEFAULT' => 79,
			"{" => 31,
			'USE' => 34,
			'VIEW' => 38,
			"\${" => 40
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 41,
			'loopwf' => 44,
			'item' => 43,
			'atomloop' => 2,
			'loop' => 5,
			'capture' => 47,
			'statement' => 6,
			'view' => 8,
			'wrapper' => 51,
			'atomexpr' => 53,
			'chunk' => 12,
			'atomdir' => 13,
			'anonblock' => 55,
			'defblockname' => 15,
			'loopwhilevar' => 204,
			'ident' => 17,
			'assign' => 20,
			'macro' => 21,
			'lterm' => 63,
			'node' => 24,
			'term' => 68,
			'rawperl' => 69,
			'expr' => 71,
			'use' => 72,
			'defblock' => 76,
			'filter' => 30,
			'sterm' => 78,
			'perl' => 33,
			'chunks' => 203,
			'setlist' => 81,
			'switch' => 36,
			'try' => 37,
			'block' => 313,
			'directive' => 82,
			'condition' => 83
		}
	},
	{#State 253
		ACTIONS => {
			'SET' => 1,
			'PERL' => 45,
			'NOT' => 42,
			'IDENT' => 3,
			'CLEAR' => 46,
			'UNLESS' => 4,
			'IF' => 49,
			"\$" => 48,
			'STOP' => 7,
			'CALL' => 50,
			'THROW' => 9,
			'GET' => 52,
			"[" => 10,
			'TRY' => 11,
			'LAST' => 54,
			'DEBUG' => 56,
			'RAWPERL' => 14,
			'META' => 16,
			'INCLUDE' => 18,
			"(" => 60,
			'SWITCH' => 61,
			'MACRO' => 19,
			'WRAPPER' => 64,
			";" => -31,
			'FOR' => 22,
			'LITERAL' => 66,
			'NEXT' => 23,
			"\"" => 70,
			'TEXT' => 25,
			'PROCESS' => 73,
			'RETURN' => 74,
			'FILTER' => 26,
			'INSERT' => 75,
			'NUMBER' => 27,
			'REF' => 28,
			'WHILE' => 77,
			'BLOCK' => 29,
			'DEFAULT' => 79,
			"{" => 31,
			'USE' => 34,
			'VIEW' => 38,
			"\${" => 40
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 41,
			'loopwf' => 44,
			'item' => 43,
			'atomloop' => 2,
			'loop' => 5,
			'capture' => 47,
			'statement' => 6,
			'view' => 8,
			'wrapper' => 51,
			'atomexpr' => 53,
			'chunk' => 12,
			'atomdir' => 13,
			'anonblock' => 55,
			'defblockname' => 15,
			'loopwhilevar' => 204,
			'ident' => 17,
			'assign' => 20,
			'macro' => 21,
			'lterm' => 63,
			'node' => 24,
			'term' => 68,
			'rawperl' => 69,
			'expr' => 71,
			'use' => 72,
			'defblock' => 76,
			'filter' => 30,
			'sterm' => 78,
			'perl' => 33,
			'chunks' => 203,
			'setlist' => 81,
			'switch' => 36,
			'try' => 37,
			'block' => 314,
			'directive' => 82,
			'condition' => 83
		}
	},
	{#State 254
		ACTIONS => {
			"+" => 173,
			'CAT' => 179,
			'CMPOP' => 180,
			"?" => 174,
			'DIV' => 175,
			'MOD' => 181,
			"/" => 182,
			'AND' => 176,
			'BINOP' => 177,
			'OR' => 178
		},
		DEFAULT => -167
	},
	{#State 255
		ACTIONS => {
			'DOT' => 114
		},
		DEFAULT => -193
	},
	{#State 256
		DEFAULT => -194
	},
	{#State 257
		DEFAULT => -191
	},
	{#State 258
		DEFAULT => -195
	},
	{#State 259
		DEFAULT => -127
	},
	{#State 260
		ACTIONS => {
			'DIV' => 175,
			'MOD' => 181,
			"/" => 182
		},
		DEFAULT => -151
	},
	{#State 261
		ACTIONS => {
			":" => 315,
			'CMPOP' => 180,
			"?" => 174,
			"+" => 173,
			'MOD' => 181,
			'DIV' => 175,
			"/" => 182,
			'AND' => 176,
			'CAT' => 179,
			'BINOP' => 177,
			'OR' => 178
		}
	},
	{#State 262
		ACTIONS => {
			'MOD' => 181
		},
		DEFAULT => -152
	},
	{#State 263
		ACTIONS => {
			'DIV' => 175,
			'BINOP' => 177,
			"+" => 173,
			'CAT' => 179,
			'CMPOP' => 180,
			'MOD' => 181,
			"/" => 182
		},
		DEFAULT => -156
	},
	{#State 264
		ACTIONS => {
			'DIV' => 175,
			"+" => 173,
			'MOD' => 181,
			"/" => 182
		},
		DEFAULT => -149
	},
	{#State 265
		ACTIONS => {
			'DIV' => 175,
			'BINOP' => 177,
			"+" => 173,
			'CAT' => 179,
			'CMPOP' => 180,
			'MOD' => 181,
			"/" => 182
		},
		DEFAULT => -157
	},
	{#State 266
		ACTIONS => {
			'DIV' => 175,
			'BINOP' => 177,
			"+" => 173,
			'CMPOP' => 180,
			'MOD' => 181,
			"/" => 182
		},
		DEFAULT => -155
	},
	{#State 267
		ACTIONS => {
			'DIV' => 175,
			'BINOP' => 177,
			"+" => 173,
			'MOD' => 181,
			"/" => 182
		},
		DEFAULT => -154
	},
	{#State 268
		DEFAULT => -153
	},
	{#State 269
		ACTIONS => {
			'DIV' => 175,
			'MOD' => 181
		},
		DEFAULT => -150
	},
	{#State 270
		ACTIONS => {
			"+" => 173,
			'CAT' => 179,
			'CMPOP' => 180,
			"?" => 174,
			'DIV' => 175,
			'MOD' => 181,
			"/" => 182,
			'AND' => 176,
			'BINOP' => 177,
			'OR' => 178
		},
		DEFAULT => -166
	},
	{#State 271
		ACTIONS => {
			'ELSIF' => 318,
			'ELSE' => 316
		},
		DEFAULT => -63,
		GOTOS => {
			'else' => 317
		}
	},
	{#State 272
		DEFAULT => -186
	},
	{#State 273
		ACTIONS => {
			'NOT' => 42,
			'LITERAL' => 280,
			'IDENT' => 3,
			"\"" => 70,
			"\$" => 48,
			"[" => 10,
			'NUMBER' => 27,
			'REF' => 28,
			"{" => 31,
			'COMMA' => 282,
			"(" => 60,
			"\${" => 40
		},
		DEFAULT => -178,
		GOTOS => {
			'expr' => 281,
			'sterm' => 78,
			'item' => 278,
			'param' => 279,
			'node' => 24,
			'ident' => 277,
			'term' => 68,
			'lterm' => 63
		}
	},
	{#State 274
		DEFAULT => -183
	},
	{#State 275
		DEFAULT => -181
	},
	{#State 276
		ACTIONS => {
			'NOT' => 42,
			"{" => 31,
			'COMMA' => 282,
			'LITERAL' => 280,
			'IDENT' => 3,
			"\"" => 70,
			"(" => 60,
			"\$" => 48,
			"[" => 10,
			'NUMBER' => 27,
			'REF' => 28,
			")" => 319,
			"\${" => 40
		},
		GOTOS => {
			'expr' => 281,
			'sterm' => 78,
			'item' => 278,
			'param' => 279,
			'node' => 24,
			'ident' => 277,
			'term' => 68,
			'lterm' => 63
		}
	},
	{#State 277
		ACTIONS => {
			'DOT' => 114,
			'ASSIGN' => 320
		},
		DEFAULT => -125
	},
	{#State 278
		ACTIONS => {
			"(" => 150,
			'ASSIGN' => 229
		},
		DEFAULT => -144
	},
	{#State 279
		DEFAULT => -169
	},
	{#State 280
		ACTIONS => {
			'ASSIGN' => 232
		},
		DEFAULT => -128
	},
	{#State 281
		ACTIONS => {
			"+" => 173,
			'CAT' => 179,
			'CMPOP' => 180,
			"?" => 174,
			'DIV' => 175,
			'MOD' => 181,
			"/" => 182,
			'AND' => 176,
			'BINOP' => 177,
			'OR' => 178
		},
		DEFAULT => -168
	},
	{#State 282
		DEFAULT => -171
	},
	{#State 283
		DEFAULT => -133
	},
	{#State 284
		ACTIONS => {
			'SET' => 1,
			'PERL' => 45,
			'NOT' => 42,
			'IDENT' => 3,
			'CLEAR' => 46,
			'UNLESS' => 4,
			'IF' => 49,
			"\$" => 48,
			'STOP' => 7,
			'CALL' => 50,
			'THROW' => 9,
			'GET' => 52,
			"[" => 10,
			'TRY' => 11,
			'LAST' => 54,
			'DEBUG' => 56,
			'RAWPERL' => 14,
			'META' => 16,
			'INCLUDE' => 18,
			"(" => 60,
			'SWITCH' => 61,
			'MACRO' => 19,
			'WRAPPER' => 64,
			";" => -31,
			'FOR' => 22,
			'LITERAL' => 66,
			'NEXT' => 23,
			"\"" => 70,
			'TEXT' => 25,
			'PROCESS' => 73,
			'RETURN' => 74,
			'FILTER' => 26,
			'INSERT' => 75,
			'NUMBER' => 27,
			'REF' => 28,
			'WHILE' => 77,
			'BLOCK' => 29,
			'DEFAULT' => 79,
			"{" => 31,
			'USE' => 34,
			'VIEW' => 38,
			"\${" => 40
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 41,
			'loopwf' => 44,
			'item' => 43,
			'atomloop' => 2,
			'loop' => 5,
			'capture' => 47,
			'statement' => 6,
			'view' => 8,
			'wrapper' => 51,
			'atomexpr' => 53,
			'chunk' => 12,
			'atomdir' => 13,
			'anonblock' => 55,
			'defblockname' => 15,
			'loopwhilevar' => 204,
			'ident' => 17,
			'assign' => 20,
			'macro' => 21,
			'lterm' => 63,
			'node' => 24,
			'term' => 68,
			'rawperl' => 69,
			'expr' => 71,
			'use' => 72,
			'defblock' => 76,
			'filter' => 30,
			'sterm' => 78,
			'perl' => 33,
			'chunks' => 203,
			'setlist' => 81,
			'switch' => 36,
			'try' => 37,
			'block' => 249,
			'directive' => 82,
			'condition' => 83
		}
	},
	{#State 285
		ACTIONS => {
			";" => 321
		}
	},
	{#State 286
		ACTIONS => {
			'END' => 322
		}
	},
	{#State 287
		ACTIONS => {
			";" => 324,
			'DEFAULT' => 325,
			'FILENAME' => 93,
			'IDENT' => 91,
			'NUMBER' => 94
		},
		GOTOS => {
			'filepart' => 97,
			'filename' => 323
		}
	},
	{#State 288
		ACTIONS => {
			'END' => 326
		}
	},
	{#State 289
		DEFAULT => -118
	},
	{#State 290
		DEFAULT => -116
	},
	{#State 291
		ACTIONS => {
			'TEXT' => 327
		}
	},
	{#State 292
		ACTIONS => {
			'END' => 328
		}
	},
	{#State 293
		ACTIONS => {
			'SET' => 1,
			'PERL' => 45,
			'NOT' => 42,
			'IDENT' => 3,
			'CLEAR' => 46,
			'UNLESS' => 4,
			'IF' => 49,
			"\$" => 48,
			'STOP' => 7,
			'CALL' => 50,
			'THROW' => 9,
			'GET' => 52,
			"[" => 10,
			'TRY' => 11,
			'LAST' => 54,
			'DEBUG' => 56,
			'RAWPERL' => 14,
			'META' => 16,
			'INCLUDE' => 18,
			"(" => 60,
			'SWITCH' => 61,
			'MACRO' => 19,
			'WRAPPER' => 64,
			";" => -31,
			'FOR' => 22,
			'LITERAL' => 66,
			'NEXT' => 23,
			"\"" => 70,
			'TEXT' => 25,
			'PROCESS' => 73,
			'RETURN' => 74,
			'FILTER' => 26,
			'INSERT' => 75,
			'NUMBER' => 27,
			'REF' => 28,
			'WHILE' => 77,
			'BLOCK' => 29,
			'DEFAULT' => 79,
			"{" => 31,
			'USE' => 34,
			'VIEW' => 38,
			"\${" => 40
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 41,
			'loopwf' => 44,
			'item' => 43,
			'atomloop' => 2,
			'loop' => 5,
			'capture' => 47,
			'statement' => 6,
			'view' => 8,
			'wrapper' => 51,
			'atomexpr' => 53,
			'chunk' => 12,
			'atomdir' => 13,
			'anonblock' => 55,
			'defblockname' => 15,
			'loopwhilevar' => 204,
			'ident' => 17,
			'assign' => 20,
			'macro' => 21,
			'lterm' => 63,
			'node' => 24,
			'term' => 68,
			'rawperl' => 69,
			'expr' => 71,
			'use' => 72,
			'defblock' => 76,
			'filter' => 30,
			'sterm' => 78,
			'perl' => 33,
			'chunks' => 203,
			'setlist' => 81,
			'switch' => 36,
			'try' => 37,
			'block' => 329,
			'directive' => 82,
			'condition' => 83
		}
	},
	{#State 294
		ACTIONS => {
			'IDENT' => -112,
			")" => -112,
			'COMMA' => -112
		},
		DEFAULT => -146
	},
	{#State 295
		ACTIONS => {
			'COMMA' => 332,
			'IDENT' => 330,
			")" => 331
		}
	},
	{#State 296
		DEFAULT => -172,
		GOTOS => {
			'args' => 333
		}
	},
	{#State 297
		DEFAULT => -172,
		GOTOS => {
			'args' => 334
		}
	},
	{#State 298
		DEFAULT => -173
	},
	{#State 299
		ACTIONS => {
			'END' => 335
		}
	},
	{#State 300
		ACTIONS => {
			'ASSIGN' => -176
		},
		DEFAULT => -183
	},
	{#State 301
		ACTIONS => {
			'END' => 336
		}
	},
	{#State 302
		ACTIONS => {
			'DIV' => 175,
			'AND' => 176,
			'BINOP' => 177,
			'OR' => 178,
			"+" => 173,
			'CAT' => 179,
			'CMPOP' => 180,
			"?" => 174,
			'MOD' => 181,
			"/" => 182
		},
		DEFAULT => -140
	},
	{#State 303
		ACTIONS => {
			'DIV' => 175,
			'AND' => 176,
			'BINOP' => 177,
			'OR' => 178,
			"+" => 173,
			'CAT' => 179,
			'CMPOP' => 180,
			"?" => 174,
			'MOD' => 181,
			"/" => 182
		},
		DEFAULT => -139
	},
	{#State 304
		ACTIONS => {
			'SET' => 1,
			'PERL' => 45,
			'NOT' => 42,
			'IDENT' => 3,
			'CLEAR' => 46,
			'UNLESS' => 4,
			'IF' => 49,
			"\$" => 48,
			'STOP' => 7,
			'CALL' => 50,
			'THROW' => 9,
			'GET' => 52,
			"[" => 10,
			'TRY' => 11,
			'LAST' => 54,
			'DEBUG' => 56,
			'RAWPERL' => 14,
			'META' => 16,
			'INCLUDE' => 18,
			"(" => 60,
			'SWITCH' => 61,
			'MACRO' => 19,
			'WRAPPER' => 64,
			";" => -31,
			'FOR' => 22,
			'LITERAL' => 66,
			'NEXT' => 23,
			"\"" => 70,
			'TEXT' => 25,
			'PROCESS' => 73,
			'RETURN' => 74,
			'FILTER' => 26,
			'INSERT' => 75,
			'NUMBER' => 27,
			'REF' => 28,
			'WHILE' => 77,
			'BLOCK' => 29,
			'DEFAULT' => 79,
			"{" => 31,
			'USE' => 34,
			'VIEW' => 38,
			"\${" => 40
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 41,
			'loopwf' => 44,
			'item' => 43,
			'atomloop' => 2,
			'loop' => 5,
			'capture' => 47,
			'statement' => 6,
			'view' => 8,
			'wrapper' => 51,
			'atomexpr' => 53,
			'chunk' => 12,
			'atomdir' => 13,
			'anonblock' => 55,
			'defblockname' => 15,
			'loopwhilevar' => 204,
			'ident' => 17,
			'assign' => 20,
			'macro' => 21,
			'lterm' => 63,
			'node' => 24,
			'term' => 68,
			'rawperl' => 69,
			'expr' => 71,
			'use' => 72,
			'defblock' => 76,
			'filter' => 30,
			'sterm' => 78,
			'perl' => 33,
			'chunks' => 203,
			'setlist' => 81,
			'switch' => 36,
			'try' => 37,
			'block' => 337,
			'directive' => 82,
			'condition' => 83
		}
	},
	{#State 305
		ACTIONS => {
			'DOT' => 114
		},
		DEFAULT => -18
	},
	{#State 306
		DEFAULT => -16
	},
	{#State 307
		DEFAULT => -74
	},
	{#State 308
		DEFAULT => -145
	},
	{#State 309
		ACTIONS => {
			'END' => 338
		}
	},
	{#State 310
		ACTIONS => {
			'ELSIF' => 318,
			'ELSE' => 316
		},
		DEFAULT => -63,
		GOTOS => {
			'else' => 339
		}
	},
	{#State 311
		ACTIONS => {
			'SET' => 1,
			'PERL' => 45,
			'NOT' => 42,
			'IDENT' => 3,
			'CLEAR' => 46,
			'UNLESS' => 4,
			'IF' => 49,
			"\$" => 48,
			'STOP' => 7,
			'CALL' => 50,
			'THROW' => 9,
			'GET' => 52,
			"[" => 10,
			'TRY' => 11,
			'LAST' => 54,
			'DEBUG' => 56,
			'RAWPERL' => 14,
			'META' => 16,
			'INCLUDE' => 18,
			"(" => 60,
			'SWITCH' => 61,
			'MACRO' => 19,
			'WRAPPER' => 64,
			";" => -31,
			'FOR' => 22,
			'LITERAL' => 66,
			'NEXT' => 23,
			"\"" => 70,
			'TEXT' => 25,
			'PROCESS' => 73,
			'RETURN' => 74,
			'FILTER' => 26,
			'INSERT' => 75,
			'NUMBER' => 27,
			'REF' => 28,
			'WHILE' => 77,
			'BLOCK' => 29,
			'DEFAULT' => 79,
			"{" => 31,
			'USE' => 34,
			'VIEW' => 38,
			'EVENT' => 39,
			"\${" => 40
		},
		DEFAULT => -9,
		GOTOS => {
			'loopforvar' => 41,
			'loopwf' => 44,
			'item' => 43,
			'atomloop' => 2,
			'loop' => 5,
			'capture' => 47,
			'statement' => 6,
			'view' => 8,
			'wrapper' => 51,
			'atomexpr' => 53,
			'chunk' => 12,
			'atomdir' => 13,
			'anonblock' => 55,
			'defblockname' => 15,
			'loopwhilevar' => 58,
			'event' => 59,
			'ident' => 17,
			'event_loop' => 62,
			'assign' => 20,
			'macro' => 21,
			'lterm' => 63,
			'event_plug' => 65,
			'node' => 24,
			'finalblock' => 67,
			'term' => 68,
			'rawperl' => 69,
			'use' => 72,
			'expr' => 71,
			'defblock' => 76,
			'sterm' => 78,
			'filter' => 30,
			'eventblock' => 80,
			'templatecode' => 340,
			'perl' => 33,
			'setlist' => 81,
			'chunks' => 35,
			'try' => 37,
			'switch' => 36,
			'directive' => 82,
			'condition' => 83
		}
	},
	{#State 312
		DEFAULT => -75
	},
	{#State 313
		ACTIONS => {
			'CASE' => 341
		},
		DEFAULT => -68,
		GOTOS => {
			'case' => 342
		}
	},
	{#State 314
		ACTIONS => {
			'END' => 343
		}
	},
	{#State 315
		ACTIONS => {
			'NOT' => 42,
			"{" => 31,
			'LITERAL' => 88,
			'IDENT' => 3,
			"\"" => 70,
			"(" => 60,
			"\$" => 48,
			"[" => 10,
			'NUMBER' => 27,
			'REF' => 28,
			"\${" => 40
		},
		GOTOS => {
			'expr' => 344,
			'sterm' => 78,
			'item' => 43,
			'node' => 24,
			'ident' => 87,
			'term' => 68,
			'lterm' => 63
		}
	},
	{#State 316
		ACTIONS => {
			";" => 345
		}
	},
	{#State 317
		ACTIONS => {
			'END' => 346
		}
	},
	{#State 318
		ACTIONS => {
			'NOT' => 42,
			"{" => 31,
			'LITERAL' => 88,
			'IDENT' => 3,
			"\"" => 70,
			"(" => 60,
			"\$" => 48,
			"[" => 10,
			'NUMBER' => 27,
			'REF' => 28,
			"\${" => 40
		},
		GOTOS => {
			'expr' => 347,
			'sterm' => 78,
			'item' => 43,
			'node' => 24,
			'ident' => 87,
			'term' => 68,
			'lterm' => 63
		}
	},
	{#State 319
		DEFAULT => -180
	},
	{#State 320
		ACTIONS => {
			'NOT' => 42,
			"{" => 31,
			'LITERAL' => 88,
			'IDENT' => 3,
			"\"" => 70,
			"(" => 60,
			"\$" => 48,
			"[" => 10,
			'NUMBER' => 27,
			'REF' => 28,
			"\${" => 40
		},
		GOTOS => {
			'expr' => 348,
			'sterm' => 78,
			'item' => 43,
			'node' => 24,
			'ident' => 87,
			'term' => 68,
			'lterm' => 63
		}
	},
	{#State 321
		ACTIONS => {
			'SET' => 1,
			'PERL' => 45,
			'NOT' => 42,
			'IDENT' => 3,
			'CLEAR' => 46,
			'UNLESS' => 4,
			'IF' => 49,
			"\$" => 48,
			'STOP' => 7,
			'CALL' => 50,
			'THROW' => 9,
			'GET' => 52,
			"[" => 10,
			'TRY' => 11,
			'LAST' => 54,
			'DEBUG' => 56,
			'RAWPERL' => 14,
			'META' => 16,
			'INCLUDE' => 18,
			"(" => 60,
			'SWITCH' => 61,
			'MACRO' => 19,
			'WRAPPER' => 64,
			";" => -31,
			'FOR' => 22,
			'LITERAL' => 66,
			'NEXT' => 23,
			"\"" => 70,
			'TEXT' => 25,
			'PROCESS' => 73,
			'RETURN' => 74,
			'FILTER' => 26,
			'INSERT' => 75,
			'NUMBER' => 27,
			'REF' => 28,
			'WHILE' => 77,
			'BLOCK' => 29,
			'DEFAULT' => 79,
			"{" => 31,
			'USE' => 34,
			'VIEW' => 38,
			"\${" => 40
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 41,
			'loopwf' => 44,
			'item' => 43,
			'atomloop' => 2,
			'loop' => 5,
			'capture' => 47,
			'statement' => 6,
			'view' => 8,
			'wrapper' => 51,
			'atomexpr' => 53,
			'chunk' => 12,
			'atomdir' => 13,
			'anonblock' => 55,
			'defblockname' => 15,
			'loopwhilevar' => 204,
			'ident' => 17,
			'assign' => 20,
			'macro' => 21,
			'lterm' => 63,
			'node' => 24,
			'term' => 68,
			'rawperl' => 69,
			'expr' => 71,
			'use' => 72,
			'defblock' => 76,
			'filter' => 30,
			'sterm' => 78,
			'perl' => 33,
			'chunks' => 203,
			'setlist' => 81,
			'switch' => 36,
			'try' => 37,
			'block' => 349,
			'directive' => 82,
			'condition' => 83
		}
	},
	{#State 322
		DEFAULT => -83
	},
	{#State 323
		ACTIONS => {
			'DOT' => 192,
			";" => 350
		}
	},
	{#State 324
		ACTIONS => {
			'SET' => 1,
			'PERL' => 45,
			'NOT' => 42,
			'IDENT' => 3,
			'CLEAR' => 46,
			'UNLESS' => 4,
			'IF' => 49,
			"\$" => 48,
			'STOP' => 7,
			'CALL' => 50,
			'THROW' => 9,
			'GET' => 52,
			"[" => 10,
			'TRY' => 11,
			'LAST' => 54,
			'DEBUG' => 56,
			'RAWPERL' => 14,
			'META' => 16,
			'INCLUDE' => 18,
			"(" => 60,
			'SWITCH' => 61,
			'MACRO' => 19,
			'WRAPPER' => 64,
			";" => -31,
			'FOR' => 22,
			'LITERAL' => 66,
			'NEXT' => 23,
			"\"" => 70,
			'TEXT' => 25,
			'PROCESS' => 73,
			'RETURN' => 74,
			'FILTER' => 26,
			'INSERT' => 75,
			'NUMBER' => 27,
			'REF' => 28,
			'WHILE' => 77,
			'BLOCK' => 29,
			'DEFAULT' => 79,
			"{" => 31,
			'USE' => 34,
			'VIEW' => 38,
			"\${" => 40
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 41,
			'loopwf' => 44,
			'item' => 43,
			'atomloop' => 2,
			'loop' => 5,
			'capture' => 47,
			'statement' => 6,
			'view' => 8,
			'wrapper' => 51,
			'atomexpr' => 53,
			'chunk' => 12,
			'atomdir' => 13,
			'anonblock' => 55,
			'defblockname' => 15,
			'loopwhilevar' => 204,
			'ident' => 17,
			'assign' => 20,
			'macro' => 21,
			'lterm' => 63,
			'node' => 24,
			'term' => 68,
			'rawperl' => 69,
			'expr' => 71,
			'use' => 72,
			'defblock' => 76,
			'filter' => 30,
			'sterm' => 78,
			'perl' => 33,
			'chunks' => 203,
			'setlist' => 81,
			'switch' => 36,
			'try' => 37,
			'block' => 351,
			'directive' => 82,
			'condition' => 83
		}
	},
	{#State 325
		ACTIONS => {
			";" => 352
		}
	},
	{#State 326
		DEFAULT => -95
	},
	{#State 327
		ACTIONS => {
			"\"" => 353
		}
	},
	{#State 328
		DEFAULT => -98
	},
	{#State 329
		ACTIONS => {
			'END' => 354
		}
	},
	{#State 330
		DEFAULT => -110
	},
	{#State 331
		ACTIONS => {
			'SET' => 1,
			'PERL' => 45,
			'NOT' => 42,
			'IDENT' => 3,
			'CLEAR' => 46,
			'UNLESS' => 4,
			'IF' => 49,
			"\$" => 48,
			'STOP' => 7,
			'CALL' => 50,
			'THROW' => 9,
			'GET' => 52,
			"[" => 10,
			'TRY' => 11,
			'LAST' => 54,
			'DEBUG' => 56,
			'INCLUDE' => 18,
			"(" => 60,
			'SWITCH' => 61,
			'WRAPPER' => 64,
			'FOR' => 22,
			'NEXT' => 23,
			'LITERAL' => 66,
			"\"" => 70,
			'PROCESS' => 73,
			'FILTER' => 26,
			'RETURN' => 74,
			'INSERT' => 75,
			'NUMBER' => 27,
			'REF' => 28,
			'WHILE' => 77,
			'BLOCK' => 213,
			'DEFAULT' => 79,
			"{" => 31,
			"\${" => 40
		},
		GOTOS => {
			'loopforvar' => 41,
			'loopwf' => 44,
			'item' => 43,
			'atomloop' => 2,
			'node' => 24,
			'term' => 68,
			'loop' => 5,
			'expr' => 219,
			'wrapper' => 51,
			'atomexpr' => 53,
			'atomdir' => 13,
			'mdir' => 355,
			'sterm' => 78,
			'filter' => 30,
			'loopwhilevar' => 204,
			'ident' => 165,
			'perl' => 33,
			'setlist' => 81,
			'try' => 37,
			'switch' => 36,
			'assign' => 20,
			'directive' => 216,
			'condition' => 83,
			'lterm' => 63
		}
	},
	{#State 332
		DEFAULT => -111
	},
	{#State 333
		ACTIONS => {
			'NOT' => 42,
			"{" => 31,
			'COMMA' => 282,
			'LITERAL' => 280,
			'IDENT' => 3,
			"\"" => 70,
			"(" => 60,
			"\$" => 48,
			"[" => 10,
			'NUMBER' => 27,
			'REF' => 28,
			"\${" => 40
		},
		DEFAULT => -78,
		GOTOS => {
			'expr' => 281,
			'sterm' => 78,
			'item' => 278,
			'param' => 279,
			'node' => 24,
			'ident' => 277,
			'term' => 68,
			'lterm' => 63
		}
	},
	{#State 334
		ACTIONS => {
			'NOT' => 42,
			"{" => 31,
			'COMMA' => 282,
			'LITERAL' => 280,
			'IDENT' => 3,
			"\"" => 70,
			"(" => 60,
			"\$" => 48,
			"[" => 10,
			'NUMBER' => 27,
			'REF' => 28,
			"\${" => 40
		},
		DEFAULT => -79,
		GOTOS => {
			'expr' => 281,
			'sterm' => 78,
			'item' => 278,
			'param' => 279,
			'node' => 24,
			'ident' => 277,
			'term' => 68,
			'lterm' => 63
		}
	},
	{#State 335
		DEFAULT => -96
	},
	{#State 336
		DEFAULT => -104
	},
	{#State 337
		ACTIONS => {
			'END' => 356
		}
	},
	{#State 338
		DEFAULT => -93
	},
	{#State 339
		ACTIONS => {
			'END' => 357
		}
	},
	{#State 340
		DEFAULT => -69
	},
	{#State 341
		ACTIONS => {
			";" => 358,
			'DEFAULT' => 360,
			"{" => 31,
			'LITERAL' => 88,
			'IDENT' => 3,
			"\"" => 70,
			"\$" => 48,
			"[" => 10,
			'NUMBER' => 27,
			'REF' => 28,
			"\${" => 40
		},
		GOTOS => {
			'sterm' => 78,
			'item' => 43,
			'node' => 24,
			'ident' => 87,
			'term' => 359,
			'lterm' => 63
		}
	},
	{#State 342
		ACTIONS => {
			'END' => 361
		}
	},
	{#State 343
		DEFAULT => -81
	},
	{#State 344
		ACTIONS => {
			'DIV' => 175,
			'AND' => 176,
			'BINOP' => 177,
			'OR' => 178,
			"+" => 173,
			'CAT' => 179,
			'CMPOP' => 180,
			"?" => 174,
			'MOD' => 181,
			"/" => 182
		},
		DEFAULT => -159
	},
	{#State 345
		ACTIONS => {
			'SET' => 1,
			'PERL' => 45,
			'NOT' => 42,
			'IDENT' => 3,
			'CLEAR' => 46,
			'UNLESS' => 4,
			'IF' => 49,
			"\$" => 48,
			'STOP' => 7,
			'CALL' => 50,
			'THROW' => 9,
			'GET' => 52,
			"[" => 10,
			'TRY' => 11,
			'LAST' => 54,
			'DEBUG' => 56,
			'RAWPERL' => 14,
			'META' => 16,
			'INCLUDE' => 18,
			"(" => 60,
			'SWITCH' => 61,
			'MACRO' => 19,
			'WRAPPER' => 64,
			";" => -31,
			'FOR' => 22,
			'LITERAL' => 66,
			'NEXT' => 23,
			"\"" => 70,
			'TEXT' => 25,
			'PROCESS' => 73,
			'RETURN' => 74,
			'FILTER' => 26,
			'INSERT' => 75,
			'NUMBER' => 27,
			'REF' => 28,
			'WHILE' => 77,
			'BLOCK' => 29,
			'DEFAULT' => 79,
			"{" => 31,
			'USE' => 34,
			'VIEW' => 38,
			"\${" => 40
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 41,
			'loopwf' => 44,
			'item' => 43,
			'atomloop' => 2,
			'loop' => 5,
			'capture' => 47,
			'statement' => 6,
			'view' => 8,
			'wrapper' => 51,
			'atomexpr' => 53,
			'chunk' => 12,
			'atomdir' => 13,
			'anonblock' => 55,
			'defblockname' => 15,
			'loopwhilevar' => 204,
			'ident' => 17,
			'assign' => 20,
			'macro' => 21,
			'lterm' => 63,
			'node' => 24,
			'term' => 68,
			'rawperl' => 69,
			'expr' => 71,
			'use' => 72,
			'defblock' => 76,
			'filter' => 30,
			'sterm' => 78,
			'perl' => 33,
			'chunks' => 203,
			'setlist' => 81,
			'switch' => 36,
			'try' => 37,
			'block' => 362,
			'directive' => 82,
			'condition' => 83
		}
	},
	{#State 346
		DEFAULT => -59
	},
	{#State 347
		ACTIONS => {
			'CMPOP' => 180,
			"?" => 174,
			";" => 363,
			"+" => 173,
			'MOD' => 181,
			'DIV' => 175,
			"/" => 182,
			'AND' => 176,
			'CAT' => 179,
			'BINOP' => 177,
			'OR' => 178
		}
	},
	{#State 348
		ACTIONS => {
			"+" => 173,
			'CAT' => 179,
			'CMPOP' => 180,
			"?" => 174,
			'DIV' => 175,
			'MOD' => 181,
			"/" => 182,
			'AND' => 176,
			'BINOP' => 177,
			'OR' => 178
		},
		DEFAULT => -170
	},
	{#State 349
		DEFAULT => -87
	},
	{#State 350
		ACTIONS => {
			'SET' => 1,
			'PERL' => 45,
			'NOT' => 42,
			'IDENT' => 3,
			'CLEAR' => 46,
			'UNLESS' => 4,
			'IF' => 49,
			"\$" => 48,
			'STOP' => 7,
			'CALL' => 50,
			'THROW' => 9,
			'GET' => 52,
			"[" => 10,
			'TRY' => 11,
			'LAST' => 54,
			'DEBUG' => 56,
			'RAWPERL' => 14,
			'META' => 16,
			'INCLUDE' => 18,
			"(" => 60,
			'SWITCH' => 61,
			'MACRO' => 19,
			'WRAPPER' => 64,
			";" => -31,
			'FOR' => 22,
			'LITERAL' => 66,
			'NEXT' => 23,
			"\"" => 70,
			'TEXT' => 25,
			'PROCESS' => 73,
			'RETURN' => 74,
			'FILTER' => 26,
			'INSERT' => 75,
			'NUMBER' => 27,
			'REF' => 28,
			'WHILE' => 77,
			'BLOCK' => 29,
			'DEFAULT' => 79,
			"{" => 31,
			'USE' => 34,
			'VIEW' => 38,
			"\${" => 40
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 41,
			'loopwf' => 44,
			'item' => 43,
			'atomloop' => 2,
			'loop' => 5,
			'capture' => 47,
			'statement' => 6,
			'view' => 8,
			'wrapper' => 51,
			'atomexpr' => 53,
			'chunk' => 12,
			'atomdir' => 13,
			'anonblock' => 55,
			'defblockname' => 15,
			'loopwhilevar' => 204,
			'ident' => 17,
			'assign' => 20,
			'macro' => 21,
			'lterm' => 63,
			'node' => 24,
			'term' => 68,
			'rawperl' => 69,
			'expr' => 71,
			'use' => 72,
			'defblock' => 76,
			'filter' => 30,
			'sterm' => 78,
			'perl' => 33,
			'chunks' => 203,
			'setlist' => 81,
			'switch' => 36,
			'try' => 37,
			'block' => 364,
			'directive' => 82,
			'condition' => 83
		}
	},
	{#State 351
		ACTIONS => {
			'FINAL' => 285,
			'CATCH' => 287
		},
		DEFAULT => -88,
		GOTOS => {
			'final' => 365
		}
	},
	{#State 352
		ACTIONS => {
			'SET' => 1,
			'PERL' => 45,
			'NOT' => 42,
			'IDENT' => 3,
			'CLEAR' => 46,
			'UNLESS' => 4,
			'IF' => 49,
			"\$" => 48,
			'STOP' => 7,
			'CALL' => 50,
			'THROW' => 9,
			'GET' => 52,
			"[" => 10,
			'TRY' => 11,
			'LAST' => 54,
			'DEBUG' => 56,
			'RAWPERL' => 14,
			'META' => 16,
			'INCLUDE' => 18,
			"(" => 60,
			'SWITCH' => 61,
			'MACRO' => 19,
			'WRAPPER' => 64,
			";" => -31,
			'FOR' => 22,
			'LITERAL' => 66,
			'NEXT' => 23,
			"\"" => 70,
			'TEXT' => 25,
			'PROCESS' => 73,
			'RETURN' => 74,
			'FILTER' => 26,
			'INSERT' => 75,
			'NUMBER' => 27,
			'REF' => 28,
			'WHILE' => 77,
			'BLOCK' => 29,
			'DEFAULT' => 79,
			"{" => 31,
			'USE' => 34,
			'VIEW' => 38,
			"\${" => 40
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 41,
			'loopwf' => 44,
			'item' => 43,
			'atomloop' => 2,
			'loop' => 5,
			'capture' => 47,
			'statement' => 6,
			'view' => 8,
			'wrapper' => 51,
			'atomexpr' => 53,
			'chunk' => 12,
			'atomdir' => 13,
			'anonblock' => 55,
			'defblockname' => 15,
			'loopwhilevar' => 204,
			'ident' => 17,
			'assign' => 20,
			'macro' => 21,
			'lterm' => 63,
			'node' => 24,
			'term' => 68,
			'rawperl' => 69,
			'expr' => 71,
			'use' => 72,
			'defblock' => 76,
			'filter' => 30,
			'sterm' => 78,
			'perl' => 33,
			'chunks' => 203,
			'setlist' => 81,
			'switch' => 36,
			'try' => 37,
			'block' => 366,
			'directive' => 82,
			'condition' => 83
		}
	},
	{#State 353
		DEFAULT => -117
	},
	{#State 354
		DEFAULT => -109
	},
	{#State 355
		DEFAULT => -106
	},
	{#State 356
		DEFAULT => -91
	},
	{#State 357
		DEFAULT => -57
	},
	{#State 358
		ACTIONS => {
			'SET' => 1,
			'PERL' => 45,
			'NOT' => 42,
			'IDENT' => 3,
			'CLEAR' => 46,
			'UNLESS' => 4,
			'IF' => 49,
			"\$" => 48,
			'STOP' => 7,
			'CALL' => 50,
			'THROW' => 9,
			'GET' => 52,
			"[" => 10,
			'TRY' => 11,
			'LAST' => 54,
			'DEBUG' => 56,
			'RAWPERL' => 14,
			'META' => 16,
			'INCLUDE' => 18,
			"(" => 60,
			'SWITCH' => 61,
			'MACRO' => 19,
			'WRAPPER' => 64,
			";" => -31,
			'FOR' => 22,
			'LITERAL' => 66,
			'NEXT' => 23,
			"\"" => 70,
			'TEXT' => 25,
			'PROCESS' => 73,
			'RETURN' => 74,
			'FILTER' => 26,
			'INSERT' => 75,
			'NUMBER' => 27,
			'REF' => 28,
			'WHILE' => 77,
			'BLOCK' => 29,
			'DEFAULT' => 79,
			"{" => 31,
			'USE' => 34,
			'VIEW' => 38,
			"\${" => 40
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 41,
			'loopwf' => 44,
			'item' => 43,
			'atomloop' => 2,
			'loop' => 5,
			'capture' => 47,
			'statement' => 6,
			'view' => 8,
			'wrapper' => 51,
			'atomexpr' => 53,
			'chunk' => 12,
			'atomdir' => 13,
			'anonblock' => 55,
			'defblockname' => 15,
			'loopwhilevar' => 204,
			'ident' => 17,
			'assign' => 20,
			'macro' => 21,
			'lterm' => 63,
			'node' => 24,
			'term' => 68,
			'rawperl' => 69,
			'expr' => 71,
			'use' => 72,
			'defblock' => 76,
			'filter' => 30,
			'sterm' => 78,
			'perl' => 33,
			'chunks' => 203,
			'setlist' => 81,
			'switch' => 36,
			'try' => 37,
			'block' => 367,
			'directive' => 82,
			'condition' => 83
		}
	},
	{#State 359
		ACTIONS => {
			";" => 368
		}
	},
	{#State 360
		ACTIONS => {
			";" => 369
		}
	},
	{#State 361
		DEFAULT => -64
	},
	{#State 362
		DEFAULT => -62
	},
	{#State 363
		ACTIONS => {
			'SET' => 1,
			'PERL' => 45,
			'NOT' => 42,
			'IDENT' => 3,
			'CLEAR' => 46,
			'UNLESS' => 4,
			'IF' => 49,
			"\$" => 48,
			'STOP' => 7,
			'CALL' => 50,
			'THROW' => 9,
			'GET' => 52,
			"[" => 10,
			'TRY' => 11,
			'LAST' => 54,
			'DEBUG' => 56,
			'RAWPERL' => 14,
			'META' => 16,
			'INCLUDE' => 18,
			"(" => 60,
			'SWITCH' => 61,
			'MACRO' => 19,
			'WRAPPER' => 64,
			";" => -31,
			'FOR' => 22,
			'LITERAL' => 66,
			'NEXT' => 23,
			"\"" => 70,
			'TEXT' => 25,
			'PROCESS' => 73,
			'RETURN' => 74,
			'FILTER' => 26,
			'INSERT' => 75,
			'NUMBER' => 27,
			'REF' => 28,
			'WHILE' => 77,
			'BLOCK' => 29,
			'DEFAULT' => 79,
			"{" => 31,
			'USE' => 34,
			'VIEW' => 38,
			"\${" => 40
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 41,
			'loopwf' => 44,
			'item' => 43,
			'atomloop' => 2,
			'loop' => 5,
			'capture' => 47,
			'statement' => 6,
			'view' => 8,
			'wrapper' => 51,
			'atomexpr' => 53,
			'chunk' => 12,
			'atomdir' => 13,
			'anonblock' => 55,
			'defblockname' => 15,
			'loopwhilevar' => 204,
			'ident' => 17,
			'assign' => 20,
			'macro' => 21,
			'lterm' => 63,
			'node' => 24,
			'term' => 68,
			'rawperl' => 69,
			'expr' => 71,
			'use' => 72,
			'defblock' => 76,
			'filter' => 30,
			'sterm' => 78,
			'perl' => 33,
			'chunks' => 203,
			'setlist' => 81,
			'switch' => 36,
			'try' => 37,
			'block' => 370,
			'directive' => 82,
			'condition' => 83
		}
	},
	{#State 364
		ACTIONS => {
			'FINAL' => 285,
			'CATCH' => 287
		},
		DEFAULT => -88,
		GOTOS => {
			'final' => 371
		}
	},
	{#State 365
		DEFAULT => -86
	},
	{#State 366
		ACTIONS => {
			'FINAL' => 285,
			'CATCH' => 287
		},
		DEFAULT => -88,
		GOTOS => {
			'final' => 372
		}
	},
	{#State 367
		DEFAULT => -67
	},
	{#State 368
		ACTIONS => {
			'SET' => 1,
			'PERL' => 45,
			'NOT' => 42,
			'IDENT' => 3,
			'CLEAR' => 46,
			'UNLESS' => 4,
			'IF' => 49,
			"\$" => 48,
			'STOP' => 7,
			'CALL' => 50,
			'THROW' => 9,
			'GET' => 52,
			"[" => 10,
			'TRY' => 11,
			'LAST' => 54,
			'DEBUG' => 56,
			'RAWPERL' => 14,
			'META' => 16,
			'INCLUDE' => 18,
			"(" => 60,
			'SWITCH' => 61,
			'MACRO' => 19,
			'WRAPPER' => 64,
			";" => -31,
			'FOR' => 22,
			'LITERAL' => 66,
			'NEXT' => 23,
			"\"" => 70,
			'TEXT' => 25,
			'PROCESS' => 73,
			'RETURN' => 74,
			'FILTER' => 26,
			'INSERT' => 75,
			'NUMBER' => 27,
			'REF' => 28,
			'WHILE' => 77,
			'BLOCK' => 29,
			'DEFAULT' => 79,
			"{" => 31,
			'USE' => 34,
			'VIEW' => 38,
			"\${" => 40
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 41,
			'loopwf' => 44,
			'item' => 43,
			'atomloop' => 2,
			'loop' => 5,
			'capture' => 47,
			'statement' => 6,
			'view' => 8,
			'wrapper' => 51,
			'atomexpr' => 53,
			'chunk' => 12,
			'atomdir' => 13,
			'anonblock' => 55,
			'defblockname' => 15,
			'loopwhilevar' => 204,
			'ident' => 17,
			'assign' => 20,
			'macro' => 21,
			'lterm' => 63,
			'node' => 24,
			'term' => 68,
			'rawperl' => 69,
			'expr' => 71,
			'use' => 72,
			'defblock' => 76,
			'filter' => 30,
			'sterm' => 78,
			'perl' => 33,
			'chunks' => 203,
			'setlist' => 81,
			'switch' => 36,
			'try' => 37,
			'block' => 373,
			'directive' => 82,
			'condition' => 83
		}
	},
	{#State 369
		ACTIONS => {
			'SET' => 1,
			'PERL' => 45,
			'NOT' => 42,
			'IDENT' => 3,
			'CLEAR' => 46,
			'UNLESS' => 4,
			'IF' => 49,
			"\$" => 48,
			'STOP' => 7,
			'CALL' => 50,
			'THROW' => 9,
			'GET' => 52,
			"[" => 10,
			'TRY' => 11,
			'LAST' => 54,
			'DEBUG' => 56,
			'RAWPERL' => 14,
			'META' => 16,
			'INCLUDE' => 18,
			"(" => 60,
			'SWITCH' => 61,
			'MACRO' => 19,
			'WRAPPER' => 64,
			";" => -31,
			'FOR' => 22,
			'LITERAL' => 66,
			'NEXT' => 23,
			"\"" => 70,
			'TEXT' => 25,
			'PROCESS' => 73,
			'RETURN' => 74,
			'FILTER' => 26,
			'INSERT' => 75,
			'NUMBER' => 27,
			'REF' => 28,
			'WHILE' => 77,
			'BLOCK' => 29,
			'DEFAULT' => 79,
			"{" => 31,
			'USE' => 34,
			'VIEW' => 38,
			"\${" => 40
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 41,
			'loopwf' => 44,
			'item' => 43,
			'atomloop' => 2,
			'loop' => 5,
			'capture' => 47,
			'statement' => 6,
			'view' => 8,
			'wrapper' => 51,
			'atomexpr' => 53,
			'chunk' => 12,
			'atomdir' => 13,
			'anonblock' => 55,
			'defblockname' => 15,
			'loopwhilevar' => 204,
			'ident' => 17,
			'assign' => 20,
			'macro' => 21,
			'lterm' => 63,
			'node' => 24,
			'term' => 68,
			'rawperl' => 69,
			'expr' => 71,
			'use' => 72,
			'defblock' => 76,
			'filter' => 30,
			'sterm' => 78,
			'perl' => 33,
			'chunks' => 203,
			'setlist' => 81,
			'switch' => 36,
			'try' => 37,
			'block' => 374,
			'directive' => 82,
			'condition' => 83
		}
	},
	{#State 370
		ACTIONS => {
			'ELSIF' => 318,
			'ELSE' => 316
		},
		DEFAULT => -63,
		GOTOS => {
			'else' => 375
		}
	},
	{#State 371
		DEFAULT => -84
	},
	{#State 372
		DEFAULT => -85
	},
	{#State 373
		ACTIONS => {
			'CASE' => 341
		},
		DEFAULT => -68,
		GOTOS => {
			'case' => 376
		}
	},
	{#State 374
		DEFAULT => -66
	},
	{#State 375
		DEFAULT => -61
	},
	{#State 376
		DEFAULT => -65
	}
]; 


#========================================================================
# Rules
#========================================================================

$RULES = [
	[#Rule 0
		 '$start', 2, undef
	],
	[#Rule 1
		 'template', 1,
sub
#line 66 "Parser.yp"
{ $factory->template( $_[1] )         }
	],
	[#Rule 2
		 'templatecode', 2,
sub
#line 69 "Parser.yp"
{ $_[0]->rollback_token; $_[1]        }
	],
	[#Rule 3
		 'templatecode', 2,
sub
#line 70 "Parser.yp"
{ $_[0]->rollback_token; $_[1]        }
	],
	[#Rule 4
		 'templatecode', 1,
sub
#line 71 "Parser.yp"
{ $_[1]                               }
	],
	[#Rule 5
		 'templatecode', 1,
sub
#line 72 "Parser.yp"
{ $_[1]                               }
	],
	[#Rule 6
		 'eventblock', 2,
sub
#line 75 "Parser.yp"
{ $factory->block([ @{$_[1]}, $_[2] ])}
	],
	[#Rule 7
		 'eventblock', 1,
sub
#line 76 "Parser.yp"
{ $factory->block( @$_[1] )           }
	],
	[#Rule 8
		 'finalblock', 1,
sub
#line 79 "Parser.yp"
{ $factory->block([ @{$_[1]}, 
                                      $factory->event_finalize() ])       }
	],
	[#Rule 9
		 'finalblock', 0,
sub
#line 81 "Parser.yp"
{ $factory->block( [
                                      $factory->event_finalize() ])       }
	],
	[#Rule 10
		 'block', 1,
sub
#line 85 "Parser.yp"
{ $factory->block($_[1])              }
	],
	[#Rule 11
		 'block', 0,
sub
#line 86 "Parser.yp"
{ $factory->block()                   }
	],
	[#Rule 12
		 'chunks', 2,
sub
#line 89 "Parser.yp"
{ push(@{$_[1]}, $_[2]) 
                                        if defined $_[2]; $_[1]           }
	],
	[#Rule 13
		 'chunks', 1,
sub
#line 91 "Parser.yp"
{ defined $_[1] ? [ $_[1] ] : [ ]     }
	],
	[#Rule 14
		 'event', 1,
sub
#line 94 "Parser.yp"
{ $_[1]                               }
	],
	[#Rule 15
		 'event', 1,
sub
#line 95 "Parser.yp"
{ $_[1]                               }
	],
	[#Rule 16
		 'event_plug', 4,
sub
#line 99 "Parser.yp"
{ $_[0]->location() .
                                      $factory->define_event(
                                        $_[2]->[0], $_[2]->[1], $_[4])    }
	],
	[#Rule 17
		 'eventvar', 1,
sub
#line 104 "Parser.yp"
{ [ undef, $factory->ident($_[1]) ]   }
	],
	[#Rule 18
		 'eventvar', 3,
sub
#line 105 "Parser.yp"
{ [ $_[1], $factory->ident($_[3]) ]   }
	],
	[#Rule 19
		 'chunk', 1,
sub
#line 108 "Parser.yp"
{ $factory->textblock($_[1])          }
	],
	[#Rule 20
		 'chunk', 2,
sub
#line 109 "Parser.yp"
{ return '' unless $_[1];
                                      $_[0]->location() . $_[1];
                                    }
	],
	[#Rule 21
		 'statement', 1, undef
	],
	[#Rule 22
		 'statement', 1, undef
	],
	[#Rule 23
		 'statement', 1, undef
	],
	[#Rule 24
		 'statement', 1, undef
	],
	[#Rule 25
		 'statement', 1, undef
	],
	[#Rule 26
		 'statement', 1, undef
	],
	[#Rule 27
		 'statement', 1, undef
	],
	[#Rule 28
		 'statement', 1, undef
	],
	[#Rule 29
		 'statement', 1,
sub
#line 122 "Parser.yp"
{ $factory->get($_[1])                }
	],
	[#Rule 30
		 'statement', 2,
sub
#line 123 "Parser.yp"
{ $_[0]->add_metadata($_[2]);         }
	],
	[#Rule 31
		 'statement', 0, undef
	],
	[#Rule 32
		 'directive', 1,
sub
#line 127 "Parser.yp"
{ $factory->set($_[1])                }
	],
	[#Rule 33
		 'directive', 1, undef
	],
	[#Rule 34
		 'directive', 1, undef
	],
	[#Rule 35
		 'directive', 1, undef
	],
	[#Rule 36
		 'directive', 1, undef
	],
	[#Rule 37
		 'directive', 1, undef
	],
	[#Rule 38
		 'directive', 1, undef
	],
	[#Rule 39
		 'atomexpr', 1,
sub
#line 141 "Parser.yp"
{ $factory->get($_[1])                }
	],
	[#Rule 40
		 'atomexpr', 1, undef
	],
	[#Rule 41
		 'atomdir', 2,
sub
#line 145 "Parser.yp"
{ $factory->get($_[2])                }
	],
	[#Rule 42
		 'atomdir', 2,
sub
#line 146 "Parser.yp"
{ $factory->call($_[2])               }
	],
	[#Rule 43
		 'atomdir', 2,
sub
#line 147 "Parser.yp"
{ $factory->set($_[2])                }
	],
	[#Rule 44
		 'atomdir', 2,
sub
#line 148 "Parser.yp"
{ $factory->default($_[2])            }
	],
	[#Rule 45
		 'atomdir', 2,
sub
#line 149 "Parser.yp"
{ $factory->insert($_[2])             }
	],
	[#Rule 46
		 'atomdir', 2,
sub
#line 150 "Parser.yp"
{ $factory->include($_[2])            }
	],
	[#Rule 47
		 'atomdir', 2,
sub
#line 151 "Parser.yp"
{ $factory->process($_[2])            }
	],
	[#Rule 48
		 'atomdir', 2,
sub
#line 152 "Parser.yp"
{ $factory->throw($_[2])              }
	],
	[#Rule 49
		 'atomdir', 1,
sub
#line 153 "Parser.yp"
{ $factory->return()                  }
	],
	[#Rule 50
		 'atomdir', 1,
sub
#line 154 "Parser.yp"
{ $factory->stop()                    }
	],
	[#Rule 51
		 'atomdir', 1,
sub
#line 155 "Parser.yp"
{ "\$output = '';";                   }
	],
	[#Rule 52
		 'atomdir', 1,
sub
#line 156 "Parser.yp"
{ $_[0]->block_label('last ', ';')    }
	],
	[#Rule 53
		 'atomdir', 1,
sub
#line 157 "Parser.yp"
{ $_[0]->in_block('FOR')
                                        ? $factory->next($_[0]->block_label)
                                        : $_[0]->block_label('next ', ';') }
	],
	[#Rule 54
		 'atomdir', 2,
sub
#line 160 "Parser.yp"
{ if ($_[2]->[0]->[0] =~ /^'(on|off)'$/) {
                                          $_[0]->{ DEBUG_DIRS } = ($1 eq 'on');
                                          $factory->debug($_[2]);
                                      }
                                      else {
                                          $_[0]->{ DEBUG_DIRS } ? $factory->debug($_[2]) : '';
                                      }
                                    }
	],
	[#Rule 55
		 'atomdir', 1, undef
	],
	[#Rule 56
		 'atomdir', 1, undef
	],
	[#Rule 57
		 'condition', 6,
sub
#line 173 "Parser.yp"
{ $factory->if(@_[2, 4, 5])           }
	],
	[#Rule 58
		 'condition', 3,
sub
#line 174 "Parser.yp"
{ $factory->if(@_[3, 1])              }
	],
	[#Rule 59
		 'condition', 6,
sub
#line 176 "Parser.yp"
{ $factory->if("!($_[2])", @_[4, 5])  }
	],
	[#Rule 60
		 'condition', 3,
sub
#line 177 "Parser.yp"
{ $factory->if("!($_[3])", $_[1])     }
	],
	[#Rule 61
		 'else', 5,
sub
#line 181 "Parser.yp"
{ unshift(@{$_[5]}, [ @_[2, 4] ]);
                                      $_[5];                              }
	],
	[#Rule 62
		 'else', 3,
sub
#line 183 "Parser.yp"
{ [ $_[3] ]                           }
	],
	[#Rule 63
		 'else', 0,
sub
#line 184 "Parser.yp"
{ [ undef ]                           }
	],
	[#Rule 64
		 'switch', 6,
sub
#line 188 "Parser.yp"
{ $factory->switch(@_[2, 5])          }
	],
	[#Rule 65
		 'case', 5,
sub
#line 192 "Parser.yp"
{ unshift(@{$_[5]}, [ @_[2, 4] ]); 
                                      $_[5];                              }
	],
	[#Rule 66
		 'case', 4,
sub
#line 194 "Parser.yp"
{ [ $_[4] ]                           }
	],
	[#Rule 67
		 'case', 3,
sub
#line 195 "Parser.yp"
{ [ $_[3] ]                           }
	],
	[#Rule 68
		 'case', 0,
sub
#line 196 "Parser.yp"
{ [ undef ]                           }
	],
	[#Rule 69
		 'event_loop', 5,
sub
#line 201 "Parser.yp"
{ $factory->event_while(@_[1, 3, 5],
                                      $_[0]->leave_block)  }
	],
	[#Rule 70
		 'loop', 1,
sub
#line 205 "Parser.yp"
{ $_[1]                               }
	],
	[#Rule 71
		 'loop', 1,
sub
#line 206 "Parser.yp"
{ $_[1]                               }
	],
	[#Rule 72
		 'atomloop', 3,
sub
#line 209 "Parser.yp"
{ $factory->foreach(@{$_[3]}, $_[1])  }
	],
	[#Rule 73
		 'atomloop', 3,
sub
#line 210 "Parser.yp"
{ $factory->while(@_[3, 1]) }
	],
	[#Rule 74
		 'loopwf', 4,
sub
#line 214 "Parser.yp"
{ $factory->foreach(@{$_[1]}, $_[3], $_[0]->leave_block)  }
	],
	[#Rule 75
		 'loopwf', 4,
sub
#line 216 "Parser.yp"
{ $factory->while(@_[1, 3], $_[0]->leave_block) }
	],
	[#Rule 76
		 'loopforvar', 2,
sub
#line 219 "Parser.yp"
{ $_[0]->enter_block('FOR'); $_[2]    }
	],
	[#Rule 77
		 'loopwhilevar', 2,
sub
#line 222 "Parser.yp"
{ $_[0]->enter_block('WHILE'); $_[2]  }
	],
	[#Rule 78
		 'loopvar', 4,
sub
#line 225 "Parser.yp"
{ [ @_[1, 3, 4] ]                     }
	],
	[#Rule 79
		 'loopvar', 4,
sub
#line 226 "Parser.yp"
{ [ @_[1, 3, 4] ]                     }
	],
	[#Rule 80
		 'loopvar', 2,
sub
#line 227 "Parser.yp"
{ [ 0, @_[1, 2] ]                     }
	],
	[#Rule 81
		 'wrapper', 5,
sub
#line 231 "Parser.yp"
{ $factory->wrapper(@_[2, 4])         }
	],
	[#Rule 82
		 'wrapper', 3,
sub
#line 233 "Parser.yp"
{ $factory->wrapper(@_[3, 1])         }
	],
	[#Rule 83
		 'try', 5,
sub
#line 237 "Parser.yp"
{ $factory->try(@_[3, 4])             }
	],
	[#Rule 84
		 'final', 5,
sub
#line 241 "Parser.yp"
{ unshift(@{$_[5]}, [ @_[2,4] ]);
                                      $_[5];                              }
	],
	[#Rule 85
		 'final', 5,
sub
#line 244 "Parser.yp"
{ unshift(@{$_[5]}, [ undef, $_[4] ]);
                                      $_[5];                              }
	],
	[#Rule 86
		 'final', 4,
sub
#line 247 "Parser.yp"
{ unshift(@{$_[4]}, [ undef, $_[3] ]);
                                      $_[4];                              }
	],
	[#Rule 87
		 'final', 3,
sub
#line 249 "Parser.yp"
{ [ $_[3] ]                           }
	],
	[#Rule 88
		 'final', 0,
sub
#line 250 "Parser.yp"
{ [ 0 ] }
	],
	[#Rule 89
		 'use', 2,
sub
#line 253 "Parser.yp"
{ $factory->use($_[2])                }
	],
	[#Rule 90
		 '@1-3', 0,
sub
#line 256 "Parser.yp"
{ $_[0]->push_defblock();             }
	],
	[#Rule 91
		 'view', 6,
sub
#line 257 "Parser.yp"
{ $factory->view(@_[2,5], 
                                                     $_[0]->pop_defblock) }
	],
	[#Rule 92
		 '@2-2', 0,
sub
#line 261 "Parser.yp"
{ ${$_[0]->{ INPERL }}++;             }
	],
	[#Rule 93
		 'perl', 5,
sub
#line 262 "Parser.yp"
{ ${$_[0]->{ INPERL }}--;
                                      $_[0]->{ EVAL_PERL } 
                                      ? $factory->perl($_[4])             
                                      : $factory->no_perl();              }
	],
	[#Rule 94
		 '@3-1', 0,
sub
#line 268 "Parser.yp"
{ ${$_[0]->{ INPERL }}++; 
                                      $rawstart = ${$_[0]->{'LINE'}};     }
	],
	[#Rule 95
		 'rawperl', 5,
sub
#line 270 "Parser.yp"
{ ${$_[0]->{ INPERL }}--;
                                      $_[0]->{ EVAL_PERL } 
                                      ? $factory->rawperl($_[4], $rawstart)
                                      : $factory->no_perl();              }
	],
	[#Rule 96
		 'filter', 5,
sub
#line 277 "Parser.yp"
{ $factory->filter(@_[2,4])           }
	],
	[#Rule 97
		 'filter', 3,
sub
#line 279 "Parser.yp"
{ $factory->filter(@_[3,1])           }
	],
	[#Rule 98
		 'defblock', 5,
sub
#line 284 "Parser.yp"
{ my $name = join('/', @{ $_[0]->{ DEFBLOCKS } });
                                      pop(@{ $_[0]->{ DEFBLOCKS } });
                                      $_[0]->define_block($name, $_[4]); 
                                      undef
                                    }
	],
	[#Rule 99
		 'defblockname', 2,
sub
#line 291 "Parser.yp"
{ push(@{ $_[0]->{ DEFBLOCKS } }, $_[2]);
                                      $_[2];
                                    }
	],
	[#Rule 100
		 'blockname', 1, undef
	],
	[#Rule 101
		 'blockname', 1,
sub
#line 297 "Parser.yp"
{ $_[1] =~ s/^'(.*)'$/$1/; $_[1]      }
	],
	[#Rule 102
		 'blockargs', 1, undef
	],
	[#Rule 103
		 'blockargs', 0, undef
	],
	[#Rule 104
		 'anonblock', 5,
sub
#line 305 "Parser.yp"
{ local $" = ', ';
                                      print STDERR "experimental block args: [@{ $_[2] }]\n"
                                          if $_[2];
                                      $factory->anon_block($_[4])         }
	],
	[#Rule 105
		 'capture', 3,
sub
#line 311 "Parser.yp"
{ $factory->capture(@_[1, 3])         }
	],
	[#Rule 106
		 'macro', 6,
sub
#line 315 "Parser.yp"
{ $factory->macro(@_[2, 6, 4])        }
	],
	[#Rule 107
		 'macro', 3,
sub
#line 316 "Parser.yp"
{ $factory->macro(@_[2, 3])           }
	],
	[#Rule 108
		 'mdir', 1, undef
	],
	[#Rule 109
		 'mdir', 4,
sub
#line 320 "Parser.yp"
{ $_[3]                               }
	],
	[#Rule 110
		 'margs', 2,
sub
#line 323 "Parser.yp"
{ push(@{$_[1]}, $_[2]); $_[1]        }
	],
	[#Rule 111
		 'margs', 2,
sub
#line 324 "Parser.yp"
{ $_[1]                               }
	],
	[#Rule 112
		 'margs', 1,
sub
#line 325 "Parser.yp"
{ [ $_[1] ]                           }
	],
	[#Rule 113
		 'metadata', 2,
sub
#line 328 "Parser.yp"
{ push(@{$_[1]}, @{$_[2]}); $_[1]     }
	],
	[#Rule 114
		 'metadata', 2, undef
	],
	[#Rule 115
		 'metadata', 1, undef
	],
	[#Rule 116
		 'meta', 3,
sub
#line 333 "Parser.yp"
{ for ($_[3]) { s/^'//; s/'$//; 
                                                       s/\\'/'/g  }; 
                                         [ @_[1,3] ] }
	],
	[#Rule 117
		 'meta', 5,
sub
#line 336 "Parser.yp"
{ [ @_[1,4] ] }
	],
	[#Rule 118
		 'meta', 3,
sub
#line 337 "Parser.yp"
{ [ @_[1,3] ] }
	],
	[#Rule 119
		 'term', 1, undef
	],
	[#Rule 120
		 'term', 1, undef
	],
	[#Rule 121
		 'lterm', 3,
sub
#line 349 "Parser.yp"
{ "[ $_[2] ]"                         }
	],
	[#Rule 122
		 'lterm', 3,
sub
#line 350 "Parser.yp"
{ "[ $_[2] ]"                         }
	],
	[#Rule 123
		 'lterm', 2,
sub
#line 351 "Parser.yp"
{ "[ ]"                               }
	],
	[#Rule 124
		 'lterm', 3,
sub
#line 352 "Parser.yp"
{ "{ $_[2]  }"                        }
	],
	[#Rule 125
		 'sterm', 1,
sub
#line 355 "Parser.yp"
{ $factory->ident($_[1])              }
	],
	[#Rule 126
		 'sterm', 2,
sub
#line 356 "Parser.yp"
{ $factory->identref($_[2])           }
	],
	[#Rule 127
		 'sterm', 3,
sub
#line 357 "Parser.yp"
{ $factory->quoted($_[2])             }
	],
	[#Rule 128
		 'sterm', 1, undef
	],
	[#Rule 129
		 'sterm', 1, undef
	],
	[#Rule 130
		 'list', 2,
sub
#line 362 "Parser.yp"
{ "$_[1], $_[2]"                      }
	],
	[#Rule 131
		 'list', 2, undef
	],
	[#Rule 132
		 'list', 1, undef
	],
	[#Rule 133
		 'range', 3,
sub
#line 367 "Parser.yp"
{ $_[1] . '..' . $_[3]                }
	],
	[#Rule 134
		 'hash', 1, undef
	],
	[#Rule 135
		 'hash', 0,
sub
#line 372 "Parser.yp"
{ "" }
	],
	[#Rule 136
		 'params', 2,
sub
#line 375 "Parser.yp"
{ "$_[1], $_[2]"                      }
	],
	[#Rule 137
		 'params', 2, undef
	],
	[#Rule 138
		 'params', 1, undef
	],
	[#Rule 139
		 'param', 3,
sub
#line 380 "Parser.yp"
{ "$_[1] => $_[3]"                    }
	],
	[#Rule 140
		 'param', 3,
sub
#line 381 "Parser.yp"
{ "$_[1] => $_[3]"                    }
	],
	[#Rule 141
		 'ident', 3,
sub
#line 384 "Parser.yp"
{ push(@{$_[1]}, @{$_[3]}); $_[1]     }
	],
	[#Rule 142
		 'ident', 3,
sub
#line 385 "Parser.yp"
{ push(@{$_[1]}, 
                                           map {($_, 0)} split(/\./, $_[3]));
                                      $_[1];                              }
	],
	[#Rule 143
		 'ident', 1, undef
	],
	[#Rule 144
		 'node', 1,
sub
#line 391 "Parser.yp"
{ [ $_[1], 0 ]                        }
	],
	[#Rule 145
		 'node', 4,
sub
#line 392 "Parser.yp"
{ [ $_[1], $factory->args($_[3]) ]    }
	],
	[#Rule 146
		 'item', 1,
sub
#line 395 "Parser.yp"
{ "'$_[1]'"                           }
	],
	[#Rule 147
		 'item', 3,
sub
#line 396 "Parser.yp"
{ $_[2]                               }
	],
	[#Rule 148
		 'item', 2,
sub
#line 397 "Parser.yp"
{ $_[0]->{ V1DOLLAR }
                                       ? "'$_[2]'" 
                                       : $factory->ident(["'$_[2]'", 0])  }
	],
	[#Rule 149
		 'expr', 3,
sub
#line 402 "Parser.yp"
{ "$_[1] $_[2] $_[3]"                 }
	],
	[#Rule 150
		 'expr', 3,
sub
#line 403 "Parser.yp"
{ "$_[1] $_[2] $_[3]"                 }
	],
	[#Rule 151
		 'expr', 3,
sub
#line 404 "Parser.yp"
{ "$_[1] $_[2] $_[3]"                 }
	],
	[#Rule 152
		 'expr', 3,
sub
#line 405 "Parser.yp"
{ "int($_[1] / $_[3])"                }
	],
	[#Rule 153
		 'expr', 3,
sub
#line 406 "Parser.yp"
{ "$_[1] % $_[3]"                     }
	],
	[#Rule 154
		 'expr', 3,
sub
#line 407 "Parser.yp"
{ "$_[1] $CMPOP{ $_[2] } $_[3]"       }
	],
	[#Rule 155
		 'expr', 3,
sub
#line 408 "Parser.yp"
{ "$_[1]  . $_[3]"                    }
	],
	[#Rule 156
		 'expr', 3,
sub
#line 409 "Parser.yp"
{ "$_[1] && $_[3]"                    }
	],
	[#Rule 157
		 'expr', 3,
sub
#line 410 "Parser.yp"
{ "$_[1] || $_[3]"                    }
	],
	[#Rule 158
		 'expr', 2,
sub
#line 411 "Parser.yp"
{ "! $_[2]"                           }
	],
	[#Rule 159
		 'expr', 5,
sub
#line 412 "Parser.yp"
{ "$_[1] ? $_[3] : $_[5]"             }
	],
	[#Rule 160
		 'expr', 3,
sub
#line 413 "Parser.yp"
{ $factory->assign(@{$_[2]})          }
	],
	[#Rule 161
		 'expr', 3,
sub
#line 414 "Parser.yp"
{ "($_[2])"                           }
	],
	[#Rule 162
		 'expr', 1, undef
	],
	[#Rule 163
		 'setlist', 2,
sub
#line 418 "Parser.yp"
{ push(@{$_[1]}, @{$_[2]}); $_[1]     }
	],
	[#Rule 164
		 'setlist', 2, undef
	],
	[#Rule 165
		 'setlist', 1, undef
	],
	[#Rule 166
		 'assign', 3,
sub
#line 424 "Parser.yp"
{ [ $_[1], $_[3] ]                    }
	],
	[#Rule 167
		 'assign', 3,
sub
#line 425 "Parser.yp"
{ [ @_[1,3] ]                         }
	],
	[#Rule 168
		 'args', 2,
sub
#line 432 "Parser.yp"
{ push(@{$_[1]}, $_[2]); $_[1]        }
	],
	[#Rule 169
		 'args', 2,
sub
#line 433 "Parser.yp"
{ push(@{$_[1]->[0]}, $_[2]); $_[1]   }
	],
	[#Rule 170
		 'args', 4,
sub
#line 434 "Parser.yp"
{ push(@{$_[1]->[0]}, "'', " . 
                                      $factory->assign(@_[2,4])); $_[1]  }
	],
	[#Rule 171
		 'args', 2,
sub
#line 436 "Parser.yp"
{ $_[1]                               }
	],
	[#Rule 172
		 'args', 0,
sub
#line 437 "Parser.yp"
{ [ [ ] ]                             }
	],
	[#Rule 173
		 'lnameargs', 3,
sub
#line 447 "Parser.yp"
{ push(@{$_[3]}, $_[1]); $_[3]        }
	],
	[#Rule 174
		 'lnameargs', 1, undef
	],
	[#Rule 175
		 'lvalue', 1, undef
	],
	[#Rule 176
		 'lvalue', 3,
sub
#line 452 "Parser.yp"
{ $factory->quoted($_[2])             }
	],
	[#Rule 177
		 'lvalue', 1, undef
	],
	[#Rule 178
		 'nameargs', 3,
sub
#line 456 "Parser.yp"
{ [ [$factory->ident($_[2])], $_[3] ]   }
	],
	[#Rule 179
		 'nameargs', 2,
sub
#line 457 "Parser.yp"
{ [ @_[1,2] ] }
	],
	[#Rule 180
		 'nameargs', 4,
sub
#line 458 "Parser.yp"
{ [ @_[1,3] ] }
	],
	[#Rule 181
		 'names', 3,
sub
#line 461 "Parser.yp"
{ push(@{$_[1]}, $_[3]); $_[1] }
	],
	[#Rule 182
		 'names', 1,
sub
#line 462 "Parser.yp"
{ [ $_[1] ]                    }
	],
	[#Rule 183
		 'name', 3,
sub
#line 465 "Parser.yp"
{ $factory->quoted($_[2])  }
	],
	[#Rule 184
		 'name', 1,
sub
#line 466 "Parser.yp"
{ "'$_[1]'" }
	],
	[#Rule 185
		 'name', 1, undef
	],
	[#Rule 186
		 'filename', 3,
sub
#line 470 "Parser.yp"
{ "$_[1].$_[3]" }
	],
	[#Rule 187
		 'filename', 1, undef
	],
	[#Rule 188
		 'filepart', 1, undef
	],
	[#Rule 189
		 'filepart', 1, undef
	],
	[#Rule 190
		 'filepart', 1, undef
	],
	[#Rule 191
		 'quoted', 2,
sub
#line 484 "Parser.yp"
{ push(@{$_[1]}, $_[2]) 
                                          if defined $_[2]; $_[1]         }
	],
	[#Rule 192
		 'quoted', 0,
sub
#line 486 "Parser.yp"
{ [ ]                                 }
	],
	[#Rule 193
		 'quotable', 1,
sub
#line 489 "Parser.yp"
{ $factory->ident($_[1])              }
	],
	[#Rule 194
		 'quotable', 1,
sub
#line 490 "Parser.yp"
{ $factory->text($_[1])               }
	],
	[#Rule 195
		 'quotable', 1,
sub
#line 491 "Parser.yp"
{ undef                               }
	]
];



1;

__END__

=head1 NAME

Template::Grammar - Parser state/rule tables for the TT grammar

=head1 SYNOPSIS

    # no user serviceable parts inside

=head1 DESCRIPTION

This module defines the state and rule tables that the L<Template::Parser>
module uses to parse templates.  It is generated from a YACC-like grammar
using the C<Parse::Yapp> module.  The F<parser> sub-directory of the 
Template Toolkit source distribution contains the grammar and other 
files required to generate this module.

But you don't need to worry about any of that unless you're planning to 
modify the Template Toolkit language.

=head1 AUTHOR

Andy Wardley E<lt>abw@wardley.orgE<gt>

L<http://wardley.org/>

=head1 COPYRIGHT

Copyright (C) 1996-2007 Andy Wardley.  All Rights Reserved.

This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.

=head1 SEE ALSO

L<Template::Parser>

=cut

# Local Variables:
# mode: perl
# perl-indent-level: 4
# indent-tabs-mode: nil
# End:
#
# vim: expandtab shiftwidth=4:










