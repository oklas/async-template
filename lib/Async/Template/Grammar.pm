#============================================================= -*-Perl-*-
#
# Template::Event::Grammar
#
# DESCRIPTION
#   This file based on Template::Grammar ftom Template Toolkit
#   Grammar file for the Template Toolkit language containing token
#   definitions and parser state/rules tables generated by Parse::Yapp.
#
# AUTHOR
#   Andy Wardley   <abw@wardley.org>
#   Serguei Okladnikov <oklas@cpan.org> (EVENTs and some features)
#
# COPYRIGHT
#   Copyright (C) 1996-2006 Andy Wardley.  All Rights Reserved.
#   Copyright (C) 1998-2000 Canon Research Centre Europe Ltd.
#   Copyright (C) 2012-2012 Serguei Okladnikov
#
#   This module is free software; you can redistribute it and/or
#   modify it under the same terms as Perl itself.
#
# REVISION
#   $Id$
#
# IMPORTANT NOTE
#   This module is constructed from the parser/Grammar.pm.skel file by
#   running the parser/yc script.  You only need to do this if # you
#   have modified the grammar in the parser/Parser.yp file and need #
#   to-recompile it.  See the README in the 'parser' directory for
#   more information (sub-directory of the Template distribution).
#
#========================================================================

package Template::Event::Grammar;

use strict;
use warnings;

our $VERSION  = 2.25;

my (@RESERVED, %CMPOP, $LEXTABLE, $RULES, $STATES);
my ($factory, $rawstart);


#========================================================================

# Reserved words, comparison and binary operators
#========================================================================

@RESERVED = qw( 
	GET CALL SET DEFAULT INSERT INCLUDE PROCESS WRAPPER BLOCK END
	USE PLUGIN FILTER MACRO PERL RAWPERL TO STEP AND OR NOT DIV MOD
	IF UNLESS ELSE ELSIF FOR NEXT WHILE SWITCH CASE META IN
	TRY THROW CATCH FINAL LAST RETURN STOP CLEAR VIEW DEBUG
        EVENT
    );

# for historical reasons, != and == are converted to ne and eq to perform 
# stringwise comparison (mainly because it doesn't generate "non-numerical 
# comparison" warnings which != and == can) but the others (e.g. < > <= >=)
# are not converted to their stringwise equivalents.  I added 'gt' et al, 
# briefly for v2.04d and then took them out again in 2.04e.


%CMPOP = qw( 
    != ne
    == eq
    <  <
    >  >
    >= >=
    <= <=
);

#    eq eq  # add these lines to the above to 
#    lt lt  # enable the eq, lt and gt operators      
#    gt gt

#========================================================================
# Lexer Token Table
#========================================================================

# lookup table used by lexer is initialised with special-cases
$LEXTABLE = {
    'FOREACH' => 'FOR',
    'BREAK'   => 'LAST',
    '&&'      => 'AND',
    '||'      => 'OR',
    '!'       => 'NOT',
    '|'	      => 'FILTER',
    '.'       => 'DOT',
    '_'       => 'CAT',
    '..'      => 'TO',
#    ':'       => 'MACRO',
    '='       => 'ASSIGN',
    '=>'      => 'ASSIGN',
#    '->'      => 'ARROW',
    ','       => 'COMMA',
    '\\'      => 'REF',
    'and'     => 'AND',		# explicitly specified so that qw( and or
    'or'      => 'OR',		# not ) can always be used in lower case, 
    'not'     => 'NOT',		# regardless of ANYCASE flag
    'mod'     => 'MOD',
    'div'     => 'DIV',
};

# localise the temporary variables needed to complete lexer table
{ 
#    my @tokens = qw< ( ) [ ] { } ${ $ / ; : ? >;
    my @tokens = qw< ( ) [ ] { } ${ $ + / ; : ? >;
    my @cmpop  = keys %CMPOP;
#    my @binop  = qw( + - * % );              # '/' above, in @tokens
    my @binop  = qw( - * % );              # '+' and '/' above, in @tokens

    # fill lexer table, slice by slice, with reserved words and operators
    @$LEXTABLE{ @RESERVED, @cmpop, @binop, @tokens } 
	= ( @RESERVED, ('CMPOP') x @cmpop, ('BINOP') x @binop, @tokens );
}


#========================================================================
# CLASS METHODS
#========================================================================

sub new {
    my $class = shift;
    bless {
	LEXTABLE => $LEXTABLE,
	STATES   => $STATES,
	RULES    => $RULES,
    }, $class;
}

# update method to set package-scoped $factory lexical 
sub install_factory {
    my ($self, $new_factory) = @_;
    $factory = $new_factory;
}


#========================================================================
# States
#========================================================================

$STATES = [
	{#State 0
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 50,
			"\$" => 49,
			'STOP' => 8,
			'CALL' => 51,
			'THROW' => 10,
			'GET' => 53,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 55,
			'DEBUG' => 57,
			'RAWPERL' => 15,
			'META' => 17,
			'INCLUDE' => 19,
			"(" => 61,
			'SWITCH' => 62,
			'MACRO' => 20,
			'WRAPPER' => 65,
			";" => -32,
			'FOR' => 23,
			'LITERAL' => 67,
			'NEXT' => 24,
			"\"" => 71,
			'TEXT' => 26,
			'PROCESS' => 74,
			'RETURN' => 75,
			'FILTER' => 27,
			'INSERT' => 76,
			'NUMBER' => 28,
			'REF' => 29,
			'WHILE' => 78,
			'BLOCK' => 30,
			'DEFAULT' => 80,
			"{" => 32,
			'USE' => 35,
			'VIEW' => 39,
			'EVENT' => 40,
			"\${" => 41
		},
		DEFAULT => -9,
		GOTOS => {
			'event_switch' => 2,
			'loopforvar' => 42,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'capture' => 48,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 52,
			'atomexpr' => 54,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 56,
			'template' => 58,
			'defblockname' => 16,
			'loopwhilevar' => 59,
			'event' => 60,
			'ident' => 18,
			'event_loop' => 63,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 64,
			'event_plug' => 66,
			'node' => 25,
			'finalblock' => 68,
			'rawperl' => 70,
			'term' => 69,
			'use' => 73,
			'expr' => 72,
			'defblock' => 77,
			'sterm' => 79,
			'filter' => 31,
			'eventblock' => 81,
			'templatecode' => 33,
			'perl' => 34,
			'setlist' => 82,
			'chunks' => 36,
			'switch' => 37,
			'try' => 38,
			'directive' => 83,
			'condition' => 84
		}
	},
	{#State 1
		ACTIONS => {
			"\$" => 49,
			'LITERAL' => 86,
			'IDENT' => 4,
			"\${" => 41
		},
		GOTOS => {
			'setlist' => 87,
			'item' => 44,
			'assign' => 21,
			'node' => 25,
			'ident' => 85
		}
	},
	{#State 2
		DEFAULT => -16
	},
	{#State 3
		DEFAULT => -88
	},
	{#State 4
		DEFAULT => -163
	},
	{#State 5
		ACTIONS => {
			'NOT' => 43,
			"{" => 32,
			'LITERAL' => 89,
			'IDENT' => 4,
			"\"" => 71,
			"(" => 61,
			"\$" => 49,
			"[" => 11,
			'NUMBER' => 28,
			'REF' => 29,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 90,
			'sterm' => 79,
			'item' => 44,
			'node' => 25,
			'ident' => 88,
			'term' => 69,
			'lterm' => 64
		}
	},
	{#State 6
		DEFAULT => -37
	},
	{#State 7
		ACTIONS => {
			";" => 91
		}
	},
	{#State 8
		DEFAULT => -51
	},
	{#State 9
		DEFAULT => -28
	},
	{#State 10
		ACTIONS => {
			"\"" => 100,
			"\$" => 97,
			'LITERAL' => 99,
			'FILENAME' => 94,
			'IDENT' => 92,
			'NUMBER' => 95
		},
		GOTOS => {
			'filepart' => 98,
			'names' => 102,
			'nameargs' => 101,
			'filename' => 96,
			'name' => 93
		}
	},
	{#State 11
		ACTIONS => {
			"{" => 32,
			'LITERAL' => 89,
			'IDENT' => 4,
			"\"" => 71,
			"\$" => 49,
			"[" => 11,
			'NUMBER' => 28,
			'REF' => 29,
			"]" => 105,
			"\${" => 41
		},
		GOTOS => {
			'sterm' => 107,
			'item' => 44,
			'range' => 104,
			'node' => 25,
			'ident' => 88,
			'term' => 106,
			'lterm' => 64,
			'list' => 103
		}
	},
	{#State 12
		ACTIONS => {
			";" => 108
		}
	},
	{#State 13
		DEFAULT => -13
	},
	{#State 14
		ACTIONS => {
			";" => -34
		},
		DEFAULT => -41
	},
	{#State 15
		DEFAULT => -111,
		GOTOS => {
			'@3-1' => 109
		}
	},
	{#State 16
		ACTIONS => {
			'IDENT' => 110
		},
		DEFAULT => -120,
		GOTOS => {
			'blockargs' => 113,
			'metadata' => 112,
			'meta' => 111
		}
	},
	{#State 17
		ACTIONS => {
			'IDENT' => 110
		},
		GOTOS => {
			'metadata' => 114,
			'meta' => 111
		}
	},
	{#State 18
		ACTIONS => {
			'DOT' => 115,
			'ASSIGN' => 116
		},
		DEFAULT => -142
	},
	{#State 19
		ACTIONS => {
			"\"" => 100,
			"\$" => 97,
			'LITERAL' => 99,
			'FILENAME' => 94,
			'IDENT' => 92,
			'NUMBER' => 95
		},
		GOTOS => {
			'filepart' => 98,
			'names' => 102,
			'nameargs' => 117,
			'filename' => 96,
			'name' => 93
		}
	},
	{#State 20
		ACTIONS => {
			'IDENT' => 118
		}
	},
	{#State 21
		DEFAULT => -182
	},
	{#State 22
		DEFAULT => -26
	},
	{#State 23
		ACTIONS => {
			"{" => 32,
			'LITERAL' => 89,
			'IDENT' => 119,
			"\"" => 71,
			"\$" => 49,
			"[" => 11,
			'NUMBER' => 28,
			'REF' => 29,
			"\${" => 41
		},
		GOTOS => {
			'sterm' => 79,
			'item' => 44,
			'loopvar' => 121,
			'node' => 25,
			'ident' => 88,
			'term' => 120,
			'lterm' => 64
		}
	},
	{#State 24
		DEFAULT => -54
	},
	{#State 25
		DEFAULT => -160
	},
	{#State 26
		DEFAULT => -20
	},
	{#State 27
		ACTIONS => {
			"\"" => 128,
			"\$" => 125,
			'LITERAL' => 127,
			'FILENAME' => 94,
			'IDENT' => 122,
			'NUMBER' => 95,
			"\${" => 41
		},
		GOTOS => {
			'names' => 102,
			'lvalue' => 123,
			'item' => 124,
			'name' => 93,
			'filepart' => 98,
			'filename' => 96,
			'nameargs' => 129,
			'lnameargs' => 126
		}
	},
	{#State 28
		DEFAULT => -146
	},
	{#State 29
		ACTIONS => {
			"\$" => 49,
			'IDENT' => 4,
			"\${" => 41
		},
		GOTOS => {
			'item' => 44,
			'node' => 25,
			'ident' => 130
		}
	},
	{#State 30
		ACTIONS => {
			'LITERAL' => 135,
			'FILENAME' => 94,
			'IDENT' => 131,
			'NUMBER' => 95
		},
		DEFAULT => -120,
		GOTOS => {
			'blockargs' => 134,
			'filepart' => 98,
			'filename' => 133,
			'blockname' => 132,
			'metadata' => 112,
			'meta' => 111
		}
	},
	{#State 31
		DEFAULT => -57
	},
	{#State 32
		ACTIONS => {
			"\$" => 49,
			'LITERAL' => 140,
			'IDENT' => 4,
			"\${" => 41
		},
		DEFAULT => -152,
		GOTOS => {
			'params' => 139,
			'hash' => 136,
			'item' => 137,
			'param' => 138
		}
	},
	{#State 33
		DEFAULT => -1
	},
	{#State 34
		DEFAULT => -39
	},
	{#State 35
		ACTIONS => {
			"\"" => 128,
			"\$" => 125,
			'LITERAL' => 127,
			'FILENAME' => 94,
			'IDENT' => 122,
			'NUMBER' => 95,
			"\${" => 41
		},
		GOTOS => {
			'names' => 102,
			'lvalue' => 123,
			'item' => 124,
			'name' => 93,
			'filepart' => 98,
			'filename' => 96,
			'nameargs' => 129,
			'lnameargs' => 141
		}
	},
	{#State 36
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 50,
			"\$" => 49,
			'STOP' => 8,
			'CALL' => 51,
			'THROW' => 10,
			'GET' => 53,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 55,
			'DEBUG' => 57,
			'RAWPERL' => 15,
			'META' => 17,
			'INCLUDE' => 19,
			"(" => 61,
			'SWITCH' => 62,
			'MACRO' => 20,
			'WRAPPER' => 65,
			";" => -32,
			'FOR' => 23,
			'LITERAL' => 67,
			'NEXT' => 24,
			"\"" => 71,
			'TEXT' => 26,
			'PROCESS' => 74,
			'RETURN' => 75,
			'FILTER' => 27,
			'INSERT' => 76,
			'NUMBER' => 28,
			'REF' => 29,
			'WHILE' => 78,
			'BLOCK' => 30,
			'DEFAULT' => 80,
			"{" => 32,
			'USE' => 35,
			'VIEW' => 39,
			'EVENT' => 40,
			"\${" => 41
		},
		DEFAULT => -8,
		GOTOS => {
			'event_switch' => 2,
			'loopforvar' => 42,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'capture' => 48,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 52,
			'atomexpr' => 54,
			'chunk' => 142,
			'atomdir' => 14,
			'anonblock' => 56,
			'defblockname' => 16,
			'loopwhilevar' => 59,
			'event' => 143,
			'ident' => 18,
			'event_loop' => 63,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 64,
			'event_plug' => 66,
			'node' => 25,
			'term' => 69,
			'rawperl' => 70,
			'expr' => 72,
			'use' => 73,
			'defblock' => 77,
			'sterm' => 79,
			'filter' => 31,
			'perl' => 34,
			'setlist' => 82,
			'switch' => 37,
			'try' => 38,
			'directive' => 83,
			'condition' => 84
		}
	},
	{#State 37
		DEFAULT => -36
	},
	{#State 38
		DEFAULT => -38
	},
	{#State 39
		ACTIONS => {
			"\"" => 100,
			"\$" => 97,
			'LITERAL' => 99,
			'FILENAME' => 94,
			'IDENT' => 92,
			'NUMBER' => 95
		},
		GOTOS => {
			'filepart' => 98,
			'names' => 102,
			'nameargs' => 144,
			'filename' => 96,
			'name' => 93
		}
	},
	{#State 40
		ACTIONS => {
			"\$" => 49,
			'IDENT' => 145,
			"\${" => 41
		},
		GOTOS => {
			'eventvar' => 147,
			'item' => 44,
			'node' => 25,
			'ident' => 146
		}
	},
	{#State 41
		ACTIONS => {
			"\"" => 71,
			"\$" => 49,
			'LITERAL' => 89,
			'IDENT' => 4,
			'REF' => 29,
			'NUMBER' => 28,
			"\${" => 41
		},
		GOTOS => {
			'sterm' => 148,
			'item' => 44,
			'node' => 25,
			'ident' => 88
		}
	},
	{#State 42
		ACTIONS => {
			";" => 149
		}
	},
	{#State 43
		ACTIONS => {
			'NOT' => 43,
			"{" => 32,
			'LITERAL' => 89,
			'IDENT' => 4,
			"\"" => 71,
			"(" => 61,
			"\$" => 49,
			"[" => 11,
			'NUMBER' => 28,
			'REF' => 29,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 150,
			'sterm' => 79,
			'item' => 44,
			'node' => 25,
			'ident' => 88,
			'term' => 69,
			'lterm' => 64
		}
	},
	{#State 44
		ACTIONS => {
			"(" => 151
		},
		DEFAULT => -161
	},
	{#State 45
		DEFAULT => -87
	},
	{#State 46
		ACTIONS => {
			";" => 152
		}
	},
	{#State 47
		DEFAULT => -52
	},
	{#State 48
		DEFAULT => -25
	},
	{#State 49
		ACTIONS => {
			'IDENT' => 153
		}
	},
	{#State 50
		ACTIONS => {
			'NOT' => 43,
			"{" => 32,
			'LITERAL' => 89,
			'IDENT' => 4,
			"\"" => 71,
			"(" => 61,
			"\$" => 49,
			"[" => 11,
			'NUMBER' => 28,
			'REF' => 29,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 154,
			'sterm' => 79,
			'item' => 44,
			'node' => 25,
			'ident' => 88,
			'term' => 69,
			'lterm' => 64
		}
	},
	{#State 51
		ACTIONS => {
			'NOT' => 43,
			"{" => 32,
			'LITERAL' => 89,
			'IDENT' => 4,
			"\"" => 71,
			"(" => 61,
			"\$" => 49,
			"[" => 11,
			'NUMBER' => 28,
			'REF' => 29,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 155,
			'sterm' => 79,
			'item' => 44,
			'node' => 25,
			'ident' => 88,
			'term' => 69,
			'lterm' => 64
		}
	},
	{#State 52
		DEFAULT => -56
	},
	{#State 53
		ACTIONS => {
			'NOT' => 43,
			"{" => 32,
			'LITERAL' => 89,
			'IDENT' => 4,
			"\"" => 71,
			"(" => 61,
			"\$" => 49,
			"[" => 11,
			'NUMBER' => 28,
			'REF' => 29,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 156,
			'sterm' => 79,
			'item' => 44,
			'node' => 25,
			'ident' => 88,
			'term' => 69,
			'lterm' => 64
		}
	},
	{#State 54
		ACTIONS => {
			'IF' => 160,
			'FILTER' => 159,
			'FOR' => 158,
			'WHILE' => 162,
			'WRAPPER' => 161,
			'UNLESS' => 157
		}
	},
	{#State 55
		DEFAULT => -53
	},
	{#State 56
		DEFAULT => -24
	},
	{#State 57
		ACTIONS => {
			"\"" => 100,
			"\$" => 97,
			'LITERAL' => 99,
			'FILENAME' => 94,
			'IDENT' => 92,
			'NUMBER' => 95
		},
		GOTOS => {
			'filepart' => 98,
			'names' => 102,
			'nameargs' => 163,
			'filename' => 96,
			'name' => 93
		}
	},
	{#State 58
		ACTIONS => {
			'' => 164
		}
	},
	{#State 59
		ACTIONS => {
			";" => 165
		}
	},
	{#State 60
		DEFAULT => -7
	},
	{#State 61
		ACTIONS => {
			'NOT' => 43,
			"{" => 32,
			'LITERAL' => 67,
			'IDENT' => 4,
			"\"" => 71,
			"(" => 61,
			"\$" => 49,
			"[" => 11,
			'NUMBER' => 28,
			'REF' => 29,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 168,
			'sterm' => 79,
			'item' => 44,
			'assign' => 167,
			'node' => 25,
			'ident' => 166,
			'term' => 69,
			'lterm' => 64
		}
	},
	{#State 62
		ACTIONS => {
			'NOT' => 43,
			"{" => 32,
			'LITERAL' => 89,
			'IDENT' => 4,
			"\"" => 71,
			"(" => 61,
			"\$" => 49,
			"[" => 11,
			'NUMBER' => 28,
			'REF' => 29,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 169,
			'sterm' => 79,
			'item' => 44,
			'node' => 25,
			'ident' => 88,
			'term' => 69,
			'lterm' => 64
		}
	},
	{#State 63
		DEFAULT => -15
	},
	{#State 64
		DEFAULT => -136
	},
	{#State 65
		ACTIONS => {
			"\"" => 100,
			"\$" => 97,
			'LITERAL' => 99,
			'FILENAME' => 94,
			'IDENT' => 92,
			'NUMBER' => 95
		},
		GOTOS => {
			'filepart' => 98,
			'names' => 102,
			'nameargs' => 170,
			'filename' => 96,
			'name' => 93
		}
	},
	{#State 66
		DEFAULT => -14
	},
	{#State 67
		ACTIONS => {
			'ASSIGN' => 171
		},
		DEFAULT => -145
	},
	{#State 68
		ACTIONS => {
			'END' => 172
		},
		DEFAULT => -5
	},
	{#State 69
		DEFAULT => -179
	},
	{#State 70
		DEFAULT => -29
	},
	{#State 71
		DEFAULT => -209,
		GOTOS => {
			'quoted' => 173
		}
	},
	{#State 72
		ACTIONS => {
			";" => -30,
			"+" => 174,
			'CAT' => 180,
			'CMPOP' => 181,
			"?" => 175,
			'DIV' => 176,
			'MOD' => 182,
			"/" => 183,
			'AND' => 177,
			'BINOP' => 178,
			'OR' => 179
		},
		DEFAULT => -40
	},
	{#State 73
		DEFAULT => -27
	},
	{#State 74
		ACTIONS => {
			"\"" => 100,
			"\$" => 97,
			'LITERAL' => 99,
			'FILENAME' => 94,
			'IDENT' => 92,
			'NUMBER' => 95
		},
		GOTOS => {
			'filepart' => 98,
			'names' => 102,
			'nameargs' => 184,
			'filename' => 96,
			'name' => 93
		}
	},
	{#State 75
		DEFAULT => -50
	},
	{#State 76
		ACTIONS => {
			"\"" => 100,
			"\$" => 97,
			'LITERAL' => 99,
			'FILENAME' => 94,
			'IDENT' => 92,
			'NUMBER' => 95
		},
		GOTOS => {
			'filepart' => 98,
			'names' => 102,
			'nameargs' => 185,
			'filename' => 96,
			'name' => 93
		}
	},
	{#State 77
		DEFAULT => -23
	},
	{#State 78
		ACTIONS => {
			'NOT' => 43,
			"{" => 32,
			'LITERAL' => 89,
			'IDENT' => 4,
			"\"" => 71,
			"(" => 61,
			"\$" => 49,
			"[" => 11,
			'NUMBER' => 28,
			'REF' => 29,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 186,
			'sterm' => 79,
			'item' => 44,
			'node' => 25,
			'ident' => 88,
			'term' => 69,
			'lterm' => 64
		}
	},
	{#State 79
		DEFAULT => -137
	},
	{#State 80
		ACTIONS => {
			"\$" => 49,
			'LITERAL' => 86,
			'IDENT' => 4,
			"\${" => 41
		},
		GOTOS => {
			'setlist' => 187,
			'item' => 44,
			'assign' => 21,
			'node' => 25,
			'ident' => 85
		}
	},
	{#State 81
		ACTIONS => {
			'END' => 188
		},
		DEFAULT => -4
	},
	{#State 82
		ACTIONS => {
			"\$" => 49,
			'COMMA' => 190,
			'LITERAL' => 86,
			'IDENT' => 4,
			"\${" => 41
		},
		DEFAULT => -33,
		GOTOS => {
			'item' => 44,
			'assign' => 189,
			'node' => 25,
			'ident' => 85
		}
	},
	{#State 83
		DEFAULT => -22
	},
	{#State 84
		DEFAULT => -35
	},
	{#State 85
		ACTIONS => {
			'ASSIGN' => 191,
			'DOT' => 115
		}
	},
	{#State 86
		ACTIONS => {
			'ASSIGN' => 171
		}
	},
	{#State 87
		ACTIONS => {
			'COMMA' => 190,
			'LITERAL' => 86,
			'IDENT' => 4,
			"\$" => 49,
			"\${" => 41
		},
		DEFAULT => -44,
		GOTOS => {
			'item' => 44,
			'assign' => 189,
			'node' => 25,
			'ident' => 85
		}
	},
	{#State 88
		ACTIONS => {
			'DOT' => 115
		},
		DEFAULT => -142
	},
	{#State 89
		DEFAULT => -145
	},
	{#State 90
		ACTIONS => {
			'CMPOP' => 181,
			"?" => 175,
			";" => 192,
			"+" => 174,
			'MOD' => 182,
			'DIV' => 176,
			"/" => 183,
			'AND' => 177,
			'CAT' => 180,
			'BINOP' => 178,
			'OR' => 179
		}
	},
	{#State 91
		DEFAULT => -21
	},
	{#State 92
		DEFAULT => -206
	},
	{#State 93
		DEFAULT => -199
	},
	{#State 94
		DEFAULT => -205
	},
	{#State 95
		DEFAULT => -207
	},
	{#State 96
		ACTIONS => {
			'DOT' => 193
		},
		DEFAULT => -201
	},
	{#State 97
		ACTIONS => {
			"\$" => 49,
			'IDENT' => 4,
			"\${" => 41
		},
		GOTOS => {
			'item' => 44,
			'node' => 25,
			'ident' => 194
		}
	},
	{#State 98
		DEFAULT => -204
	},
	{#State 99
		DEFAULT => -202
	},
	{#State 100
		DEFAULT => -209,
		GOTOS => {
			'quoted' => 195
		}
	},
	{#State 101
		DEFAULT => -49
	},
	{#State 102
		ACTIONS => {
			"+" => 196,
			"(" => 197
		},
		DEFAULT => -189,
		GOTOS => {
			'args' => 198
		}
	},
	{#State 103
		ACTIONS => {
			"{" => 32,
			'COMMA' => 201,
			'LITERAL' => 89,
			'IDENT' => 4,
			"\"" => 71,
			"\$" => 49,
			"[" => 11,
			'NUMBER' => 28,
			'REF' => 29,
			"]" => 199,
			"\${" => 41
		},
		GOTOS => {
			'sterm' => 79,
			'item' => 44,
			'node' => 25,
			'ident' => 88,
			'term' => 200,
			'lterm' => 64
		}
	},
	{#State 104
		ACTIONS => {
			"]" => 202
		}
	},
	{#State 105
		DEFAULT => -140
	},
	{#State 106
		DEFAULT => -149
	},
	{#State 107
		ACTIONS => {
			'TO' => 203
		},
		DEFAULT => -137
	},
	{#State 108
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 50,
			"\$" => 49,
			'STOP' => 8,
			'CALL' => 51,
			'THROW' => 10,
			'GET' => 53,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 55,
			'DEBUG' => 57,
			'RAWPERL' => 15,
			'META' => 17,
			'INCLUDE' => 19,
			"(" => 61,
			'SWITCH' => 206,
			'MACRO' => 20,
			'WRAPPER' => 65,
			";" => -32,
			'FOR' => 23,
			'LITERAL' => 67,
			'NEXT' => 24,
			"\"" => 71,
			'TEXT' => 26,
			'PROCESS' => 74,
			'RETURN' => 75,
			'FILTER' => 27,
			'INSERT' => 76,
			'NUMBER' => 28,
			'REF' => 29,
			'WHILE' => 78,
			'BLOCK' => 30,
			'DEFAULT' => 80,
			"{" => 32,
			'USE' => 35,
			'VIEW' => 39,
			"\${" => 41
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 42,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'capture' => 48,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 52,
			'atomexpr' => 54,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 56,
			'defblockname' => 16,
			'loopwhilevar' => 205,
			'ident' => 18,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 64,
			'node' => 25,
			'term' => 69,
			'rawperl' => 70,
			'expr' => 72,
			'use' => 73,
			'defblock' => 77,
			'filter' => 31,
			'sterm' => 79,
			'perl' => 34,
			'chunks' => 204,
			'setlist' => 82,
			'switch' => 37,
			'try' => 38,
			'block' => 207,
			'directive' => 83,
			'condition' => 84
		}
	},
	{#State 109
		ACTIONS => {
			";" => 208
		}
	},
	{#State 110
		ACTIONS => {
			'ASSIGN' => 209
		}
	},
	{#State 111
		DEFAULT => -132
	},
	{#State 112
		ACTIONS => {
			'COMMA' => 211,
			'IDENT' => 110
		},
		DEFAULT => -119,
		GOTOS => {
			'meta' => 210
		}
	},
	{#State 113
		ACTIONS => {
			";" => 212
		}
	},
	{#State 114
		ACTIONS => {
			'COMMA' => 211,
			'IDENT' => 110
		},
		DEFAULT => -31,
		GOTOS => {
			'meta' => 210
		}
	},
	{#State 115
		ACTIONS => {
			"\$" => 49,
			'IDENT' => 4,
			'NUMBER' => 214,
			"\${" => 41
		},
		GOTOS => {
			'item' => 44,
			'node' => 213
		}
	},
	{#State 116
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 50,
			"\$" => 49,
			'STOP' => 8,
			'CALL' => 51,
			'THROW' => 10,
			'GET' => 53,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 55,
			'DEBUG' => 57,
			'INCLUDE' => 19,
			"(" => 61,
			'SWITCH' => 206,
			'WRAPPER' => 65,
			'FOR' => 23,
			'NEXT' => 24,
			'LITERAL' => 67,
			"\"" => 71,
			'PROCESS' => 74,
			'FILTER' => 27,
			'RETURN' => 75,
			'INSERT' => 76,
			'NUMBER' => 28,
			'REF' => 29,
			'WHILE' => 78,
			'BLOCK' => 215,
			'DEFAULT' => 80,
			"{" => 32,
			"\${" => 41
		},
		GOTOS => {
			'loopforvar' => 42,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'node' => 25,
			'term' => 69,
			'loop' => 6,
			'expr' => 217,
			'wrapper' => 52,
			'atomexpr' => 54,
			'atomdir' => 14,
			'mdir' => 216,
			'sterm' => 79,
			'filter' => 31,
			'loopwhilevar' => 205,
			'ident' => 166,
			'perl' => 34,
			'setlist' => 82,
			'try' => 38,
			'switch' => 37,
			'assign' => 21,
			'directive' => 218,
			'condition' => 84,
			'lterm' => 64
		}
	},
	{#State 117
		DEFAULT => -47
	},
	{#State 118
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 50,
			"\$" => 49,
			'STOP' => 8,
			'CALL' => 51,
			'THROW' => 10,
			'GET' => 53,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 55,
			'DEBUG' => 57,
			'INCLUDE' => 19,
			"(" => 220,
			'SWITCH' => 206,
			'WRAPPER' => 65,
			'FOR' => 23,
			'NEXT' => 24,
			'LITERAL' => 67,
			"\"" => 71,
			'PROCESS' => 74,
			'FILTER' => 27,
			'RETURN' => 75,
			'INSERT' => 76,
			'NUMBER' => 28,
			'REF' => 29,
			'WHILE' => 78,
			'BLOCK' => 215,
			'DEFAULT' => 80,
			"{" => 32,
			"\${" => 41
		},
		GOTOS => {
			'loopforvar' => 42,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'node' => 25,
			'term' => 69,
			'loop' => 6,
			'expr' => 221,
			'wrapper' => 52,
			'atomexpr' => 54,
			'atomdir' => 14,
			'mdir' => 219,
			'sterm' => 79,
			'filter' => 31,
			'loopwhilevar' => 205,
			'ident' => 166,
			'perl' => 34,
			'setlist' => 82,
			'try' => 38,
			'switch' => 37,
			'assign' => 21,
			'directive' => 218,
			'condition' => 84,
			'lterm' => 64
		}
	},
	{#State 119
		ACTIONS => {
			'IN' => 223,
			'ASSIGN' => 222
		},
		DEFAULT => -163
	},
	{#State 120
		DEFAULT => -189,
		GOTOS => {
			'args' => 224
		}
	},
	{#State 121
		DEFAULT => -93
	},
	{#State 122
		ACTIONS => {
			'ASSIGN' => -163
		},
		DEFAULT => -206
	},
	{#State 123
		ACTIONS => {
			'ASSIGN' => 225
		}
	},
	{#State 124
		DEFAULT => -192
	},
	{#State 125
		ACTIONS => {
			"\$" => 49,
			'IDENT' => 226,
			"\${" => 41
		},
		GOTOS => {
			'item' => 44,
			'node' => 25,
			'ident' => 194
		}
	},
	{#State 126
		ACTIONS => {
			";" => 227
		}
	},
	{#State 127
		ACTIONS => {
			'ASSIGN' => -194
		},
		DEFAULT => -202
	},
	{#State 128
		DEFAULT => -209,
		GOTOS => {
			'quoted' => 228
		}
	},
	{#State 129
		DEFAULT => -191
	},
	{#State 130
		ACTIONS => {
			'DOT' => 115
		},
		DEFAULT => -143
	},
	{#State 131
		ACTIONS => {
			'ASSIGN' => 209
		},
		DEFAULT => -206
	},
	{#State 132
		DEFAULT => -116
	},
	{#State 133
		ACTIONS => {
			'DOT' => 193
		},
		DEFAULT => -117
	},
	{#State 134
		ACTIONS => {
			";" => 229
		}
	},
	{#State 135
		DEFAULT => -118
	},
	{#State 136
		ACTIONS => {
			"}" => 230
		}
	},
	{#State 137
		ACTIONS => {
			'ASSIGN' => 231
		}
	},
	{#State 138
		DEFAULT => -155
	},
	{#State 139
		ACTIONS => {
			"\$" => 49,
			'COMMA' => 233,
			'LITERAL' => 140,
			'IDENT' => 4,
			"\${" => 41
		},
		DEFAULT => -151,
		GOTOS => {
			'item' => 137,
			'param' => 232
		}
	},
	{#State 140
		ACTIONS => {
			'ASSIGN' => 234
		}
	},
	{#State 141
		DEFAULT => -106
	},
	{#State 142
		DEFAULT => -12
	},
	{#State 143
		DEFAULT => -6
	},
	{#State 144
		ACTIONS => {
			";" => 235
		}
	},
	{#State 145
		ACTIONS => {
			'ASSIGN' => 236
		},
		DEFAULT => -163
	},
	{#State 146
		ACTIONS => {
			'DOT' => 115
		},
		DEFAULT => -18
	},
	{#State 147
		ACTIONS => {
			";" => 237
		}
	},
	{#State 148
		ACTIONS => {
			"}" => 238
		}
	},
	{#State 149
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 50,
			"\$" => 49,
			'STOP' => 8,
			'CALL' => 51,
			'THROW' => 10,
			'GET' => 53,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 55,
			'DEBUG' => 57,
			'RAWPERL' => 15,
			'META' => 17,
			'INCLUDE' => 19,
			"(" => 61,
			'SWITCH' => 206,
			'MACRO' => 20,
			'WRAPPER' => 65,
			";" => -32,
			'FOR' => 23,
			'LITERAL' => 67,
			'NEXT' => 24,
			"\"" => 71,
			'TEXT' => 26,
			'PROCESS' => 74,
			'RETURN' => 75,
			'FILTER' => 27,
			'INSERT' => 76,
			'NUMBER' => 28,
			'REF' => 29,
			'WHILE' => 78,
			'BLOCK' => 30,
			'DEFAULT' => 80,
			"{" => 32,
			'USE' => 35,
			'VIEW' => 39,
			"\${" => 41
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 42,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'capture' => 48,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 52,
			'atomexpr' => 54,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 56,
			'defblockname' => 16,
			'loopwhilevar' => 205,
			'ident' => 18,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 64,
			'node' => 25,
			'term' => 69,
			'rawperl' => 70,
			'expr' => 72,
			'use' => 73,
			'defblock' => 77,
			'filter' => 31,
			'sterm' => 79,
			'perl' => 34,
			'chunks' => 204,
			'setlist' => 82,
			'switch' => 37,
			'try' => 38,
			'block' => 239,
			'directive' => 83,
			'condition' => 84
		}
	},
	{#State 150
		ACTIONS => {
			'DIV' => 176,
			'BINOP' => 178,
			"+" => 174,
			'CAT' => 180,
			'CMPOP' => 181,
			'MOD' => 182,
			"/" => 183
		},
		DEFAULT => -175
	},
	{#State 151
		DEFAULT => -189,
		GOTOS => {
			'args' => 240
		}
	},
	{#State 152
		DEFAULT => -109,
		GOTOS => {
			'@2-2' => 241
		}
	},
	{#State 153
		DEFAULT => -165
	},
	{#State 154
		ACTIONS => {
			'CMPOP' => 181,
			"?" => 175,
			";" => 242,
			"+" => 174,
			'MOD' => 182,
			'DIV' => 176,
			"/" => 183,
			'AND' => 177,
			'CAT' => 180,
			'BINOP' => 178,
			'OR' => 179
		}
	},
	{#State 155
		ACTIONS => {
			"+" => 174,
			'CAT' => 180,
			'CMPOP' => 181,
			"?" => 175,
			'DIV' => 176,
			'MOD' => 182,
			"/" => 183,
			'AND' => 177,
			'BINOP' => 178,
			'OR' => 179
		},
		DEFAULT => -43
	},
	{#State 156
		ACTIONS => {
			"+" => 174,
			'CAT' => 180,
			'CMPOP' => 181,
			"?" => 175,
			'DIV' => 176,
			'MOD' => 182,
			"/" => 183,
			'AND' => 177,
			'BINOP' => 178,
			'OR' => 179
		},
		DEFAULT => -42
	},
	{#State 157
		ACTIONS => {
			'NOT' => 43,
			"{" => 32,
			'LITERAL' => 89,
			'IDENT' => 4,
			"\"" => 71,
			"(" => 61,
			"\$" => 49,
			"[" => 11,
			'NUMBER' => 28,
			'REF' => 29,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 243,
			'sterm' => 79,
			'item' => 44,
			'node' => 25,
			'ident' => 88,
			'term' => 69,
			'lterm' => 64
		}
	},
	{#State 158
		ACTIONS => {
			"{" => 32,
			'LITERAL' => 89,
			'IDENT' => 119,
			"\"" => 71,
			"\$" => 49,
			"[" => 11,
			'NUMBER' => 28,
			'REF' => 29,
			"\${" => 41
		},
		GOTOS => {
			'sterm' => 79,
			'item' => 44,
			'loopvar' => 244,
			'node' => 25,
			'ident' => 88,
			'term' => 120,
			'lterm' => 64
		}
	},
	{#State 159
		ACTIONS => {
			"\"" => 128,
			"\$" => 125,
			'LITERAL' => 127,
			'FILENAME' => 94,
			'IDENT' => 122,
			'NUMBER' => 95,
			"\${" => 41
		},
		GOTOS => {
			'names' => 102,
			'lvalue' => 123,
			'item' => 124,
			'name' => 93,
			'filepart' => 98,
			'filename' => 96,
			'nameargs' => 129,
			'lnameargs' => 245
		}
	},
	{#State 160
		ACTIONS => {
			'NOT' => 43,
			"{" => 32,
			'LITERAL' => 89,
			'IDENT' => 4,
			"\"" => 71,
			"(" => 61,
			"\$" => 49,
			"[" => 11,
			'NUMBER' => 28,
			'REF' => 29,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 246,
			'sterm' => 79,
			'item' => 44,
			'node' => 25,
			'ident' => 88,
			'term' => 69,
			'lterm' => 64
		}
	},
	{#State 161
		ACTIONS => {
			"\"" => 100,
			"\$" => 97,
			'LITERAL' => 99,
			'FILENAME' => 94,
			'IDENT' => 92,
			'NUMBER' => 95
		},
		GOTOS => {
			'filepart' => 98,
			'names' => 102,
			'nameargs' => 247,
			'filename' => 96,
			'name' => 93
		}
	},
	{#State 162
		ACTIONS => {
			'NOT' => 43,
			"{" => 32,
			'LITERAL' => 89,
			'IDENT' => 4,
			"\"" => 71,
			"(" => 61,
			"\$" => 49,
			"[" => 11,
			'NUMBER' => 28,
			'REF' => 29,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 248,
			'sterm' => 79,
			'item' => 44,
			'node' => 25,
			'ident' => 88,
			'term' => 69,
			'lterm' => 64
		}
	},
	{#State 163
		DEFAULT => -55
	},
	{#State 164
		DEFAULT => 0
	},
	{#State 165
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 50,
			"\$" => 49,
			'STOP' => 8,
			'CALL' => 51,
			'THROW' => 10,
			'GET' => 53,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 55,
			'DEBUG' => 57,
			'RAWPERL' => 15,
			'META' => 17,
			'INCLUDE' => 19,
			"(" => 61,
			'SWITCH' => 62,
			'MACRO' => 20,
			'WRAPPER' => 65,
			";" => -32,
			'FOR' => 23,
			'LITERAL' => 67,
			'NEXT' => 24,
			"\"" => 71,
			'TEXT' => 26,
			'PROCESS' => 74,
			'RETURN' => 75,
			'FILTER' => 27,
			'INSERT' => 76,
			'NUMBER' => 28,
			'REF' => 29,
			'WHILE' => 78,
			'BLOCK' => 30,
			'DEFAULT' => 80,
			"{" => 32,
			'USE' => 35,
			'VIEW' => 39,
			'EVENT' => 40,
			"\${" => 41
		},
		DEFAULT => -11,
		GOTOS => {
			'event_switch' => 2,
			'loopforvar' => 42,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'capture' => 48,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 52,
			'atomexpr' => 54,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 56,
			'defblockname' => 16,
			'loopwhilevar' => 59,
			'event' => 60,
			'ident' => 18,
			'event_loop' => 63,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 64,
			'event_plug' => 66,
			'node' => 25,
			'term' => 69,
			'rawperl' => 70,
			'use' => 73,
			'expr' => 72,
			'defblock' => 77,
			'sterm' => 79,
			'filter' => 31,
			'eventblock' => 250,
			'perl' => 34,
			'setlist' => 82,
			'chunks' => 249,
			'try' => 38,
			'switch' => 37,
			'block' => 251,
			'directive' => 83,
			'condition' => 84
		}
	},
	{#State 166
		ACTIONS => {
			'DOT' => 115,
			'ASSIGN' => 191
		},
		DEFAULT => -142
	},
	{#State 167
		ACTIONS => {
			")" => 252
		}
	},
	{#State 168
		ACTIONS => {
			'CMPOP' => 181,
			"?" => 175,
			"+" => 174,
			'MOD' => 182,
			'DIV' => 176,
			"/" => 183,
			'AND' => 177,
			'CAT' => 180,
			'BINOP' => 178,
			")" => 253,
			'OR' => 179
		}
	},
	{#State 169
		ACTIONS => {
			'CMPOP' => 181,
			"?" => 175,
			";" => 254,
			"+" => 174,
			'MOD' => 182,
			'DIV' => 176,
			"/" => 183,
			'AND' => 177,
			'CAT' => 180,
			'BINOP' => 178,
			'OR' => 179
		}
	},
	{#State 170
		ACTIONS => {
			";" => 255
		}
	},
	{#State 171
		ACTIONS => {
			'NOT' => 43,
			"{" => 32,
			'LITERAL' => 89,
			'IDENT' => 4,
			"\"" => 71,
			"(" => 61,
			"\$" => 49,
			"[" => 11,
			'NUMBER' => 28,
			'REF' => 29,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 256,
			'sterm' => 79,
			'item' => 44,
			'node' => 25,
			'ident' => 88,
			'term' => 69,
			'lterm' => 64
		}
	},
	{#State 172
		DEFAULT => -3
	},
	{#State 173
		ACTIONS => {
			"\"" => 261,
			'TEXT' => 258,
			";" => 260,
			"\$" => 49,
			'IDENT' => 4,
			"\${" => 41
		},
		GOTOS => {
			'item' => 44,
			'node' => 25,
			'ident' => 257,
			'quotable' => 259
		}
	},
	{#State 174
		ACTIONS => {
			'NOT' => 43,
			"{" => 32,
			'LITERAL' => 89,
			'IDENT' => 4,
			"\"" => 71,
			"(" => 61,
			"\$" => 49,
			"[" => 11,
			'NUMBER' => 28,
			'REF' => 29,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 262,
			'sterm' => 79,
			'item' => 44,
			'node' => 25,
			'ident' => 88,
			'term' => 69,
			'lterm' => 64
		}
	},
	{#State 175
		ACTIONS => {
			'NOT' => 43,
			"{" => 32,
			'LITERAL' => 89,
			'IDENT' => 4,
			"\"" => 71,
			"(" => 61,
			"\$" => 49,
			"[" => 11,
			'NUMBER' => 28,
			'REF' => 29,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 263,
			'sterm' => 79,
			'item' => 44,
			'node' => 25,
			'ident' => 88,
			'term' => 69,
			'lterm' => 64
		}
	},
	{#State 176
		ACTIONS => {
			'NOT' => 43,
			"{" => 32,
			'LITERAL' => 89,
			'IDENT' => 4,
			"\"" => 71,
			"(" => 61,
			"\$" => 49,
			"[" => 11,
			'NUMBER' => 28,
			'REF' => 29,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 264,
			'sterm' => 79,
			'item' => 44,
			'node' => 25,
			'ident' => 88,
			'term' => 69,
			'lterm' => 64
		}
	},
	{#State 177
		ACTIONS => {
			'NOT' => 43,
			"{" => 32,
			'LITERAL' => 89,
			'IDENT' => 4,
			"\"" => 71,
			"(" => 61,
			"\$" => 49,
			"[" => 11,
			'NUMBER' => 28,
			'REF' => 29,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 265,
			'sterm' => 79,
			'item' => 44,
			'node' => 25,
			'ident' => 88,
			'term' => 69,
			'lterm' => 64
		}
	},
	{#State 178
		ACTIONS => {
			'NOT' => 43,
			"{" => 32,
			'LITERAL' => 89,
			'IDENT' => 4,
			"\"" => 71,
			"(" => 61,
			"\$" => 49,
			"[" => 11,
			'NUMBER' => 28,
			'REF' => 29,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 266,
			'sterm' => 79,
			'item' => 44,
			'node' => 25,
			'ident' => 88,
			'term' => 69,
			'lterm' => 64
		}
	},
	{#State 179
		ACTIONS => {
			'NOT' => 43,
			"{" => 32,
			'LITERAL' => 89,
			'IDENT' => 4,
			"\"" => 71,
			"(" => 61,
			"\$" => 49,
			"[" => 11,
			'NUMBER' => 28,
			'REF' => 29,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 267,
			'sterm' => 79,
			'item' => 44,
			'node' => 25,
			'ident' => 88,
			'term' => 69,
			'lterm' => 64
		}
	},
	{#State 180
		ACTIONS => {
			'NOT' => 43,
			"{" => 32,
			'LITERAL' => 89,
			'IDENT' => 4,
			"\"" => 71,
			"(" => 61,
			"\$" => 49,
			"[" => 11,
			'NUMBER' => 28,
			'REF' => 29,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 268,
			'sterm' => 79,
			'item' => 44,
			'node' => 25,
			'ident' => 88,
			'term' => 69,
			'lterm' => 64
		}
	},
	{#State 181
		ACTIONS => {
			'NOT' => 43,
			"{" => 32,
			'LITERAL' => 89,
			'IDENT' => 4,
			"\"" => 71,
			"(" => 61,
			"\$" => 49,
			"[" => 11,
			'NUMBER' => 28,
			'REF' => 29,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 269,
			'sterm' => 79,
			'item' => 44,
			'node' => 25,
			'ident' => 88,
			'term' => 69,
			'lterm' => 64
		}
	},
	{#State 182
		ACTIONS => {
			'NOT' => 43,
			"{" => 32,
			'LITERAL' => 89,
			'IDENT' => 4,
			"\"" => 71,
			"(" => 61,
			"\$" => 49,
			"[" => 11,
			'NUMBER' => 28,
			'REF' => 29,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 270,
			'sterm' => 79,
			'item' => 44,
			'node' => 25,
			'ident' => 88,
			'term' => 69,
			'lterm' => 64
		}
	},
	{#State 183
		ACTIONS => {
			'NOT' => 43,
			"{" => 32,
			'LITERAL' => 89,
			'IDENT' => 4,
			"\"" => 71,
			"(" => 61,
			"\$" => 49,
			"[" => 11,
			'NUMBER' => 28,
			'REF' => 29,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 271,
			'sterm' => 79,
			'item' => 44,
			'node' => 25,
			'ident' => 88,
			'term' => 69,
			'lterm' => 64
		}
	},
	{#State 184
		DEFAULT => -48
	},
	{#State 185
		DEFAULT => -46
	},
	{#State 186
		ACTIONS => {
			'CMPOP' => 181,
			"?" => 175,
			"+" => 174,
			'MOD' => 182,
			'DIV' => 176,
			"/" => 183,
			'AND' => 177,
			'CAT' => 180,
			'BINOP' => 178,
			'OR' => 179
		},
		DEFAULT => -94
	},
	{#State 187
		ACTIONS => {
			'COMMA' => 190,
			'LITERAL' => 86,
			'IDENT' => 4,
			"\$" => 49,
			"\${" => 41
		},
		DEFAULT => -45,
		GOTOS => {
			'item' => 44,
			'assign' => 189,
			'node' => 25,
			'ident' => 85
		}
	},
	{#State 188
		DEFAULT => -2
	},
	{#State 189
		DEFAULT => -180
	},
	{#State 190
		DEFAULT => -181
	},
	{#State 191
		ACTIONS => {
			'NOT' => 43,
			"{" => 32,
			'LITERAL' => 89,
			'IDENT' => 4,
			"\"" => 71,
			"(" => 61,
			"\$" => 49,
			"[" => 11,
			'NUMBER' => 28,
			'REF' => 29,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 272,
			'sterm' => 79,
			'item' => 44,
			'node' => 25,
			'ident' => 88,
			'term' => 69,
			'lterm' => 64
		}
	},
	{#State 192
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 50,
			"\$" => 49,
			'STOP' => 8,
			'CALL' => 51,
			'THROW' => 10,
			'GET' => 53,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 55,
			'DEBUG' => 57,
			'RAWPERL' => 15,
			'META' => 17,
			'INCLUDE' => 19,
			"(" => 61,
			'SWITCH' => 206,
			'MACRO' => 20,
			'WRAPPER' => 65,
			";" => -32,
			'FOR' => 23,
			'LITERAL' => 67,
			'NEXT' => 24,
			"\"" => 71,
			'TEXT' => 26,
			'PROCESS' => 74,
			'RETURN' => 75,
			'FILTER' => 27,
			'INSERT' => 76,
			'NUMBER' => 28,
			'REF' => 29,
			'WHILE' => 78,
			'BLOCK' => 30,
			'DEFAULT' => 80,
			"{" => 32,
			'USE' => 35,
			'VIEW' => 39,
			"\${" => 41
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 42,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'capture' => 48,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 52,
			'atomexpr' => 54,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 56,
			'defblockname' => 16,
			'loopwhilevar' => 205,
			'ident' => 18,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 64,
			'node' => 25,
			'term' => 69,
			'rawperl' => 70,
			'expr' => 72,
			'use' => 73,
			'defblock' => 77,
			'filter' => 31,
			'sterm' => 79,
			'perl' => 34,
			'chunks' => 204,
			'setlist' => 82,
			'switch' => 37,
			'try' => 38,
			'block' => 273,
			'directive' => 83,
			'condition' => 84
		}
	},
	{#State 193
		ACTIONS => {
			'FILENAME' => 94,
			'IDENT' => 92,
			'NUMBER' => 95
		},
		GOTOS => {
			'filepart' => 274
		}
	},
	{#State 194
		ACTIONS => {
			'DOT' => 115
		},
		DEFAULT => -189,
		GOTOS => {
			'args' => 275
		}
	},
	{#State 195
		ACTIONS => {
			"\"" => 276,
			'TEXT' => 258,
			";" => 260,
			"\$" => 49,
			'IDENT' => 4,
			"\${" => 41
		},
		GOTOS => {
			'item' => 44,
			'node' => 25,
			'ident' => 257,
			'quotable' => 259
		}
	},
	{#State 196
		ACTIONS => {
			"\"" => 100,
			'LITERAL' => 99,
			'FILENAME' => 94,
			'IDENT' => 92,
			'NUMBER' => 95
		},
		GOTOS => {
			'filepart' => 98,
			'filename' => 96,
			'name' => 277
		}
	},
	{#State 197
		DEFAULT => -189,
		GOTOS => {
			'args' => 278
		}
	},
	{#State 198
		ACTIONS => {
			'NOT' => 43,
			'LITERAL' => 282,
			'IDENT' => 4,
			"\"" => 71,
			"\$" => 49,
			"[" => 11,
			'NUMBER' => 28,
			'REF' => 29,
			"{" => 32,
			'COMMA' => 284,
			"(" => 61,
			"\${" => 41
		},
		DEFAULT => -196,
		GOTOS => {
			'expr' => 283,
			'sterm' => 79,
			'item' => 280,
			'param' => 281,
			'node' => 25,
			'ident' => 279,
			'term' => 69,
			'lterm' => 64
		}
	},
	{#State 199
		DEFAULT => -138
	},
	{#State 200
		DEFAULT => -147
	},
	{#State 201
		DEFAULT => -148
	},
	{#State 202
		DEFAULT => -139
	},
	{#State 203
		ACTIONS => {
			"\"" => 71,
			"\$" => 49,
			'LITERAL' => 89,
			'IDENT' => 4,
			'REF' => 29,
			'NUMBER' => 28,
			"\${" => 41
		},
		GOTOS => {
			'sterm' => 285,
			'item' => 44,
			'node' => 25,
			'ident' => 88
		}
	},
	{#State 204
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 50,
			"\$" => 49,
			'STOP' => 8,
			'CALL' => 51,
			'THROW' => 10,
			'GET' => 53,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 55,
			'DEBUG' => 57,
			'RAWPERL' => 15,
			'META' => 17,
			'INCLUDE' => 19,
			"(" => 61,
			'SWITCH' => 206,
			'MACRO' => 20,
			'WRAPPER' => 65,
			";" => -32,
			'FOR' => 23,
			'LITERAL' => 67,
			'NEXT' => 24,
			"\"" => 71,
			'TEXT' => 26,
			'PROCESS' => 74,
			'RETURN' => 75,
			'FILTER' => 27,
			'INSERT' => 76,
			'NUMBER' => 28,
			'REF' => 29,
			'WHILE' => 78,
			'BLOCK' => 30,
			'DEFAULT' => 80,
			"{" => 32,
			'USE' => 35,
			'VIEW' => 39,
			"\${" => 41
		},
		DEFAULT => -10,
		GOTOS => {
			'loopforvar' => 42,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'capture' => 48,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 52,
			'atomexpr' => 54,
			'chunk' => 142,
			'atomdir' => 14,
			'anonblock' => 56,
			'defblockname' => 16,
			'loopwhilevar' => 205,
			'ident' => 18,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 64,
			'node' => 25,
			'term' => 69,
			'rawperl' => 70,
			'expr' => 72,
			'use' => 73,
			'defblock' => 77,
			'filter' => 31,
			'sterm' => 79,
			'perl' => 34,
			'setlist' => 82,
			'switch' => 37,
			'try' => 38,
			'directive' => 83,
			'condition' => 84
		}
	},
	{#State 205
		ACTIONS => {
			";" => 286
		}
	},
	{#State 206
		ACTIONS => {
			'NOT' => 43,
			"{" => 32,
			'LITERAL' => 89,
			'IDENT' => 4,
			"\"" => 71,
			"(" => 61,
			"\$" => 49,
			"[" => 11,
			'NUMBER' => 28,
			'REF' => 29,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 287,
			'sterm' => 79,
			'item' => 44,
			'node' => 25,
			'ident' => 88,
			'term' => 69,
			'lterm' => 64
		}
	},
	{#State 207
		ACTIONS => {
			'FINAL' => 288,
			'CATCH' => 290
		},
		DEFAULT => -105,
		GOTOS => {
			'final' => 289
		}
	},
	{#State 208
		ACTIONS => {
			'TEXT' => 291
		}
	},
	{#State 209
		ACTIONS => {
			"\"" => 294,
			'LITERAL' => 293,
			'NUMBER' => 292
		}
	},
	{#State 210
		DEFAULT => -130
	},
	{#State 211
		DEFAULT => -131
	},
	{#State 212
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 50,
			"\$" => 49,
			'STOP' => 8,
			'CALL' => 51,
			'THROW' => 10,
			'GET' => 53,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 55,
			'DEBUG' => 57,
			'RAWPERL' => 15,
			'META' => 17,
			'INCLUDE' => 19,
			"(" => 61,
			'SWITCH' => 62,
			'MACRO' => 20,
			'WRAPPER' => 65,
			";" => -32,
			'FOR' => 23,
			'LITERAL' => 67,
			'NEXT' => 24,
			"\"" => 71,
			'TEXT' => 26,
			'PROCESS' => 74,
			'RETURN' => 75,
			'FILTER' => 27,
			'INSERT' => 76,
			'NUMBER' => 28,
			'REF' => 29,
			'WHILE' => 78,
			'BLOCK' => 30,
			'DEFAULT' => 80,
			"{" => 32,
			'USE' => 35,
			'VIEW' => 39,
			'EVENT' => 40,
			"\${" => 41
		},
		DEFAULT => -9,
		GOTOS => {
			'event_switch' => 2,
			'loopforvar' => 42,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'capture' => 48,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 52,
			'atomexpr' => 54,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 56,
			'template' => 295,
			'defblockname' => 16,
			'loopwhilevar' => 59,
			'event' => 60,
			'ident' => 18,
			'event_loop' => 63,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 64,
			'event_plug' => 66,
			'node' => 25,
			'finalblock' => 68,
			'rawperl' => 70,
			'term' => 69,
			'use' => 73,
			'expr' => 72,
			'defblock' => 77,
			'sterm' => 79,
			'filter' => 31,
			'eventblock' => 81,
			'templatecode' => 33,
			'perl' => 34,
			'setlist' => 82,
			'chunks' => 36,
			'try' => 38,
			'switch' => 37,
			'directive' => 83,
			'condition' => 84
		}
	},
	{#State 213
		DEFAULT => -158
	},
	{#State 214
		DEFAULT => -159
	},
	{#State 215
		ACTIONS => {
			";" => 296
		}
	},
	{#State 216
		DEFAULT => -122
	},
	{#State 217
		ACTIONS => {
			";" => -183,
			"+" => 174,
			'LITERAL' => -183,
			'IDENT' => -183,
			'CAT' => 180,
			"\$" => -183,
			'CMPOP' => 181,
			"?" => 175,
			'DIV' => 176,
			'MOD' => 182,
			'COMMA' => -183,
			"/" => 183,
			'AND' => 177,
			'BINOP' => 178,
			'OR' => 179,
			"\${" => -183
		},
		DEFAULT => -40
	},
	{#State 218
		DEFAULT => -125
	},
	{#State 219
		DEFAULT => -124
	},
	{#State 220
		ACTIONS => {
			'NOT' => 43,
			"{" => 32,
			'LITERAL' => 67,
			'IDENT' => 297,
			"\"" => 71,
			"(" => 61,
			"\$" => 49,
			"[" => 11,
			'NUMBER' => 28,
			'REF' => 29,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 168,
			'sterm' => 79,
			'item' => 44,
			'assign' => 167,
			'margs' => 298,
			'node' => 25,
			'ident' => 166,
			'term' => 69,
			'lterm' => 64
		}
	},
	{#State 221
		ACTIONS => {
			"+" => 174,
			'CAT' => 180,
			'CMPOP' => 181,
			"?" => 175,
			'DIV' => 176,
			'MOD' => 182,
			"/" => 183,
			'AND' => 177,
			'BINOP' => 178,
			'OR' => 179
		},
		DEFAULT => -40
	},
	{#State 222
		ACTIONS => {
			"{" => 32,
			'LITERAL' => 89,
			'IDENT' => 4,
			"\"" => 71,
			"\$" => 49,
			"[" => 11,
			'NUMBER' => 28,
			'REF' => 29,
			"\${" => 41
		},
		GOTOS => {
			'sterm' => 79,
			'item' => 44,
			'node' => 25,
			'ident' => 88,
			'term' => 299,
			'lterm' => 64
		}
	},
	{#State 223
		ACTIONS => {
			"{" => 32,
			'LITERAL' => 89,
			'IDENT' => 4,
			"\"" => 71,
			"\$" => 49,
			"[" => 11,
			'NUMBER' => 28,
			'REF' => 29,
			"\${" => 41
		},
		GOTOS => {
			'sterm' => 79,
			'item' => 44,
			'node' => 25,
			'ident' => 88,
			'term' => 300,
			'lterm' => 64
		}
	},
	{#State 224
		ACTIONS => {
			'NOT' => 43,
			"{" => 32,
			'COMMA' => 284,
			'LITERAL' => 282,
			'IDENT' => 4,
			"\"" => 71,
			"(" => 61,
			"\$" => 49,
			"[" => 11,
			'NUMBER' => 28,
			'REF' => 29,
			"\${" => 41
		},
		DEFAULT => -97,
		GOTOS => {
			'expr' => 283,
			'sterm' => 79,
			'item' => 280,
			'param' => 281,
			'node' => 25,
			'ident' => 279,
			'term' => 69,
			'lterm' => 64
		}
	},
	{#State 225
		ACTIONS => {
			"\"" => 100,
			"\$" => 97,
			'LITERAL' => 99,
			'FILENAME' => 94,
			'IDENT' => 92,
			'NUMBER' => 95
		},
		GOTOS => {
			'filepart' => 98,
			'names' => 102,
			'nameargs' => 301,
			'filename' => 96,
			'name' => 93
		}
	},
	{#State 226
		ACTIONS => {
			'ASSIGN' => -165
		},
		DEFAULT => -163
	},
	{#State 227
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 50,
			"\$" => 49,
			'STOP' => 8,
			'CALL' => 51,
			'THROW' => 10,
			'GET' => 53,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 55,
			'DEBUG' => 57,
			'RAWPERL' => 15,
			'META' => 17,
			'INCLUDE' => 19,
			"(" => 61,
			'SWITCH' => 206,
			'MACRO' => 20,
			'WRAPPER' => 65,
			";" => -32,
			'FOR' => 23,
			'LITERAL' => 67,
			'NEXT' => 24,
			"\"" => 71,
			'TEXT' => 26,
			'PROCESS' => 74,
			'RETURN' => 75,
			'FILTER' => 27,
			'INSERT' => 76,
			'NUMBER' => 28,
			'REF' => 29,
			'WHILE' => 78,
			'BLOCK' => 30,
			'DEFAULT' => 80,
			"{" => 32,
			'USE' => 35,
			'VIEW' => 39,
			"\${" => 41
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 42,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'capture' => 48,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 52,
			'atomexpr' => 54,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 56,
			'defblockname' => 16,
			'loopwhilevar' => 205,
			'ident' => 18,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 64,
			'node' => 25,
			'term' => 69,
			'rawperl' => 70,
			'expr' => 72,
			'use' => 73,
			'defblock' => 77,
			'filter' => 31,
			'sterm' => 79,
			'perl' => 34,
			'chunks' => 204,
			'setlist' => 82,
			'switch' => 37,
			'try' => 38,
			'block' => 302,
			'directive' => 83,
			'condition' => 84
		}
	},
	{#State 228
		ACTIONS => {
			"\"" => 303,
			'TEXT' => 258,
			";" => 260,
			"\$" => 49,
			'IDENT' => 4,
			"\${" => 41
		},
		GOTOS => {
			'item' => 44,
			'node' => 25,
			'ident' => 257,
			'quotable' => 259
		}
	},
	{#State 229
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 50,
			"\$" => 49,
			'STOP' => 8,
			'CALL' => 51,
			'THROW' => 10,
			'GET' => 53,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 55,
			'DEBUG' => 57,
			'RAWPERL' => 15,
			'META' => 17,
			'INCLUDE' => 19,
			"(" => 61,
			'SWITCH' => 206,
			'MACRO' => 20,
			'WRAPPER' => 65,
			";" => -32,
			'FOR' => 23,
			'LITERAL' => 67,
			'NEXT' => 24,
			"\"" => 71,
			'TEXT' => 26,
			'PROCESS' => 74,
			'RETURN' => 75,
			'FILTER' => 27,
			'INSERT' => 76,
			'NUMBER' => 28,
			'REF' => 29,
			'WHILE' => 78,
			'BLOCK' => 30,
			'DEFAULT' => 80,
			"{" => 32,
			'USE' => 35,
			'VIEW' => 39,
			"\${" => 41
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 42,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'capture' => 48,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 52,
			'atomexpr' => 54,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 56,
			'defblockname' => 16,
			'loopwhilevar' => 205,
			'ident' => 18,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 64,
			'node' => 25,
			'term' => 69,
			'rawperl' => 70,
			'expr' => 72,
			'use' => 73,
			'defblock' => 77,
			'filter' => 31,
			'sterm' => 79,
			'perl' => 34,
			'chunks' => 204,
			'setlist' => 82,
			'switch' => 37,
			'try' => 38,
			'block' => 304,
			'directive' => 83,
			'condition' => 84
		}
	},
	{#State 230
		DEFAULT => -141
	},
	{#State 231
		ACTIONS => {
			'NOT' => 43,
			"{" => 32,
			'LITERAL' => 89,
			'IDENT' => 4,
			"\"" => 71,
			"(" => 61,
			"\$" => 49,
			"[" => 11,
			'NUMBER' => 28,
			'REF' => 29,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 305,
			'sterm' => 79,
			'item' => 44,
			'node' => 25,
			'ident' => 88,
			'term' => 69,
			'lterm' => 64
		}
	},
	{#State 232
		DEFAULT => -153
	},
	{#State 233
		DEFAULT => -154
	},
	{#State 234
		ACTIONS => {
			'NOT' => 43,
			"{" => 32,
			'LITERAL' => 89,
			'IDENT' => 4,
			"\"" => 71,
			"(" => 61,
			"\$" => 49,
			"[" => 11,
			'NUMBER' => 28,
			'REF' => 29,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 306,
			'sterm' => 79,
			'item' => 44,
			'node' => 25,
			'ident' => 88,
			'term' => 69,
			'lterm' => 64
		}
	},
	{#State 235
		DEFAULT => -107,
		GOTOS => {
			'@1-3' => 307
		}
	},
	{#State 236
		ACTIONS => {
			"\$" => 49,
			'IDENT' => 4,
			"\${" => 41
		},
		GOTOS => {
			'item' => 44,
			'node' => 25,
			'ident' => 308
		}
	},
	{#State 237
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 50,
			"\$" => 49,
			'STOP' => 8,
			'CALL' => 51,
			'THROW' => 10,
			'GET' => 53,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 55,
			'DEBUG' => 57,
			'RAWPERL' => 15,
			'META' => 17,
			'INCLUDE' => 19,
			"(" => 61,
			'SWITCH' => 62,
			'MACRO' => 20,
			'WRAPPER' => 65,
			";" => -32,
			'FOR' => 23,
			'LITERAL' => 67,
			'NEXT' => 24,
			"\"" => 71,
			'TEXT' => 26,
			'PROCESS' => 74,
			'RETURN' => 75,
			'FILTER' => 27,
			'INSERT' => 76,
			'NUMBER' => 28,
			'REF' => 29,
			'WHILE' => 78,
			'BLOCK' => 30,
			'DEFAULT' => 80,
			"{" => 32,
			'USE' => 35,
			'VIEW' => 39,
			'EVENT' => 40,
			"\${" => 41
		},
		DEFAULT => -9,
		GOTOS => {
			'event_switch' => 2,
			'loopforvar' => 42,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'capture' => 48,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 52,
			'atomexpr' => 54,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 56,
			'defblockname' => 16,
			'loopwhilevar' => 59,
			'event' => 60,
			'ident' => 18,
			'event_loop' => 63,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 64,
			'event_plug' => 66,
			'node' => 25,
			'finalblock' => 68,
			'rawperl' => 70,
			'term' => 69,
			'use' => 73,
			'expr' => 72,
			'defblock' => 77,
			'sterm' => 79,
			'filter' => 31,
			'eventblock' => 81,
			'templatecode' => 309,
			'perl' => 34,
			'setlist' => 82,
			'chunks' => 36,
			'try' => 38,
			'switch' => 37,
			'directive' => 83,
			'condition' => 84
		}
	},
	{#State 238
		DEFAULT => -164
	},
	{#State 239
		ACTIONS => {
			'END' => 310
		}
	},
	{#State 240
		ACTIONS => {
			'NOT' => 43,
			"{" => 32,
			'COMMA' => 284,
			'LITERAL' => 282,
			'IDENT' => 4,
			"\"" => 71,
			"(" => 61,
			"\$" => 49,
			"[" => 11,
			'NUMBER' => 28,
			'REF' => 29,
			")" => 311,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 283,
			'sterm' => 79,
			'item' => 280,
			'param' => 281,
			'node' => 25,
			'ident' => 279,
			'term' => 69,
			'lterm' => 64
		}
	},
	{#State 241
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 50,
			"\$" => 49,
			'STOP' => 8,
			'CALL' => 51,
			'THROW' => 10,
			'GET' => 53,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 55,
			'DEBUG' => 57,
			'RAWPERL' => 15,
			'META' => 17,
			'INCLUDE' => 19,
			"(" => 61,
			'SWITCH' => 206,
			'MACRO' => 20,
			'WRAPPER' => 65,
			";" => -32,
			'FOR' => 23,
			'LITERAL' => 67,
			'NEXT' => 24,
			"\"" => 71,
			'TEXT' => 26,
			'PROCESS' => 74,
			'RETURN' => 75,
			'FILTER' => 27,
			'INSERT' => 76,
			'NUMBER' => 28,
			'REF' => 29,
			'WHILE' => 78,
			'BLOCK' => 30,
			'DEFAULT' => 80,
			"{" => 32,
			'USE' => 35,
			'VIEW' => 39,
			"\${" => 41
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 42,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'capture' => 48,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 52,
			'atomexpr' => 54,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 56,
			'defblockname' => 16,
			'loopwhilevar' => 205,
			'ident' => 18,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 64,
			'node' => 25,
			'term' => 69,
			'rawperl' => 70,
			'expr' => 72,
			'use' => 73,
			'defblock' => 77,
			'filter' => 31,
			'sterm' => 79,
			'perl' => 34,
			'chunks' => 204,
			'setlist' => 82,
			'switch' => 37,
			'try' => 38,
			'block' => 312,
			'directive' => 83,
			'condition' => 84
		}
	},
	{#State 242
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 50,
			"\$" => 49,
			'STOP' => 8,
			'CALL' => 51,
			'THROW' => 10,
			'GET' => 53,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 55,
			'DEBUG' => 57,
			'RAWPERL' => 15,
			'META' => 17,
			'INCLUDE' => 19,
			"(" => 61,
			'SWITCH' => 206,
			'MACRO' => 20,
			'WRAPPER' => 65,
			";" => -32,
			'FOR' => 23,
			'LITERAL' => 67,
			'NEXT' => 24,
			"\"" => 71,
			'TEXT' => 26,
			'PROCESS' => 74,
			'RETURN' => 75,
			'FILTER' => 27,
			'INSERT' => 76,
			'NUMBER' => 28,
			'REF' => 29,
			'WHILE' => 78,
			'BLOCK' => 30,
			'DEFAULT' => 80,
			"{" => 32,
			'USE' => 35,
			'VIEW' => 39,
			"\${" => 41
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 42,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'capture' => 48,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 52,
			'atomexpr' => 54,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 56,
			'defblockname' => 16,
			'loopwhilevar' => 205,
			'ident' => 18,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 64,
			'node' => 25,
			'term' => 69,
			'rawperl' => 70,
			'expr' => 72,
			'use' => 73,
			'defblock' => 77,
			'filter' => 31,
			'sterm' => 79,
			'perl' => 34,
			'chunks' => 204,
			'setlist' => 82,
			'switch' => 37,
			'try' => 38,
			'block' => 313,
			'directive' => 83,
			'condition' => 84
		}
	},
	{#State 243
		ACTIONS => {
			'CMPOP' => 181,
			"?" => 175,
			"+" => 174,
			'MOD' => 182,
			'DIV' => 176,
			"/" => 183,
			'AND' => 177,
			'CAT' => 180,
			'BINOP' => 178,
			'OR' => 179
		},
		DEFAULT => -61
	},
	{#State 244
		DEFAULT => -89
	},
	{#State 245
		DEFAULT => -114
	},
	{#State 246
		ACTIONS => {
			'CMPOP' => 181,
			"?" => 175,
			"+" => 174,
			'MOD' => 182,
			'DIV' => 176,
			"/" => 183,
			'AND' => 177,
			'CAT' => 180,
			'BINOP' => 178,
			'OR' => 179
		},
		DEFAULT => -59
	},
	{#State 247
		DEFAULT => -99
	},
	{#State 248
		ACTIONS => {
			'CMPOP' => 181,
			"?" => 175,
			"+" => 174,
			'MOD' => 182,
			'DIV' => 176,
			"/" => 183,
			'AND' => 177,
			'CAT' => 180,
			'BINOP' => 178,
			'OR' => 179
		},
		DEFAULT => -90
	},
	{#State 249
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 50,
			"\$" => 49,
			'STOP' => 8,
			'CALL' => 51,
			'THROW' => 10,
			'GET' => 53,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 55,
			'DEBUG' => 57,
			'RAWPERL' => 15,
			'META' => 17,
			'INCLUDE' => 19,
			"(" => 61,
			'SWITCH' => 62,
			'MACRO' => 20,
			'WRAPPER' => 65,
			";" => -32,
			'FOR' => 23,
			'LITERAL' => 67,
			'NEXT' => 24,
			"\"" => 71,
			'TEXT' => 26,
			'PROCESS' => 74,
			'RETURN' => 75,
			'FILTER' => 27,
			'INSERT' => 76,
			'NUMBER' => 28,
			'REF' => 29,
			'WHILE' => 78,
			'BLOCK' => 30,
			'DEFAULT' => 80,
			"{" => 32,
			'USE' => 35,
			'VIEW' => 39,
			'EVENT' => 40,
			"\${" => 41
		},
		DEFAULT => -10,
		GOTOS => {
			'event_switch' => 2,
			'loopforvar' => 42,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'capture' => 48,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 52,
			'atomexpr' => 54,
			'chunk' => 142,
			'atomdir' => 14,
			'anonblock' => 56,
			'defblockname' => 16,
			'loopwhilevar' => 59,
			'event' => 143,
			'ident' => 18,
			'event_loop' => 63,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 64,
			'event_plug' => 66,
			'node' => 25,
			'term' => 69,
			'rawperl' => 70,
			'expr' => 72,
			'use' => 73,
			'defblock' => 77,
			'sterm' => 79,
			'filter' => 31,
			'perl' => 34,
			'setlist' => 82,
			'switch' => 37,
			'try' => 38,
			'directive' => 83,
			'condition' => 84
		}
	},
	{#State 250
		ACTIONS => {
			'END' => 314
		}
	},
	{#State 251
		ACTIONS => {
			'END' => 315
		}
	},
	{#State 252
		DEFAULT => -177
	},
	{#State 253
		DEFAULT => -178
	},
	{#State 254
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 50,
			"\$" => 49,
			'STOP' => 8,
			'CALL' => 51,
			'THROW' => 10,
			'GET' => 53,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 55,
			'DEBUG' => 57,
			'RAWPERL' => 15,
			'META' => 17,
			'INCLUDE' => 19,
			"(" => 61,
			'SWITCH' => 206,
			'MACRO' => 20,
			'WRAPPER' => 65,
			";" => -32,
			'FOR' => 23,
			'LITERAL' => 67,
			'NEXT' => 24,
			"\"" => 71,
			'TEXT' => 26,
			'PROCESS' => 74,
			'RETURN' => 75,
			'FILTER' => 27,
			'INSERT' => 76,
			'NUMBER' => 28,
			'REF' => 29,
			'WHILE' => 78,
			'BLOCK' => 30,
			'DEFAULT' => 80,
			"{" => 32,
			'USE' => 35,
			'VIEW' => 39,
			"\${" => 41
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 42,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'capture' => 48,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 52,
			'atomexpr' => 54,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 56,
			'defblockname' => 16,
			'loopwhilevar' => 205,
			'ident' => 18,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 64,
			'node' => 25,
			'term' => 69,
			'rawperl' => 70,
			'expr' => 72,
			'use' => 73,
			'defblock' => 77,
			'filter' => 31,
			'sterm' => 79,
			'perl' => 34,
			'chunks' => 204,
			'setlist' => 82,
			'switch' => 37,
			'try' => 38,
			'block' => 316,
			'directive' => 83,
			'condition' => 84
		}
	},
	{#State 255
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 50,
			"\$" => 49,
			'STOP' => 8,
			'CALL' => 51,
			'THROW' => 10,
			'GET' => 53,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 55,
			'DEBUG' => 57,
			'RAWPERL' => 15,
			'META' => 17,
			'INCLUDE' => 19,
			"(" => 61,
			'SWITCH' => 206,
			'MACRO' => 20,
			'WRAPPER' => 65,
			";" => -32,
			'FOR' => 23,
			'LITERAL' => 67,
			'NEXT' => 24,
			"\"" => 71,
			'TEXT' => 26,
			'PROCESS' => 74,
			'RETURN' => 75,
			'FILTER' => 27,
			'INSERT' => 76,
			'NUMBER' => 28,
			'REF' => 29,
			'WHILE' => 78,
			'BLOCK' => 30,
			'DEFAULT' => 80,
			"{" => 32,
			'USE' => 35,
			'VIEW' => 39,
			"\${" => 41
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 42,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'capture' => 48,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 52,
			'atomexpr' => 54,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 56,
			'defblockname' => 16,
			'loopwhilevar' => 205,
			'ident' => 18,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 64,
			'node' => 25,
			'term' => 69,
			'rawperl' => 70,
			'expr' => 72,
			'use' => 73,
			'defblock' => 77,
			'filter' => 31,
			'sterm' => 79,
			'perl' => 34,
			'chunks' => 204,
			'setlist' => 82,
			'switch' => 37,
			'try' => 38,
			'block' => 317,
			'directive' => 83,
			'condition' => 84
		}
	},
	{#State 256
		ACTIONS => {
			"+" => 174,
			'CAT' => 180,
			'CMPOP' => 181,
			"?" => 175,
			'DIV' => 176,
			'MOD' => 182,
			"/" => 183,
			'AND' => 177,
			'BINOP' => 178,
			'OR' => 179
		},
		DEFAULT => -184
	},
	{#State 257
		ACTIONS => {
			'DOT' => 115
		},
		DEFAULT => -210
	},
	{#State 258
		DEFAULT => -211
	},
	{#State 259
		DEFAULT => -208
	},
	{#State 260
		DEFAULT => -212
	},
	{#State 261
		DEFAULT => -144
	},
	{#State 262
		ACTIONS => {
			'DIV' => 176,
			'MOD' => 182,
			"/" => 183
		},
		DEFAULT => -168
	},
	{#State 263
		ACTIONS => {
			":" => 318,
			'CMPOP' => 181,
			"?" => 175,
			"+" => 174,
			'MOD' => 182,
			'DIV' => 176,
			"/" => 183,
			'AND' => 177,
			'CAT' => 180,
			'BINOP' => 178,
			'OR' => 179
		}
	},
	{#State 264
		ACTIONS => {
			'MOD' => 182
		},
		DEFAULT => -169
	},
	{#State 265
		ACTIONS => {
			'DIV' => 176,
			'BINOP' => 178,
			"+" => 174,
			'CAT' => 180,
			'CMPOP' => 181,
			'MOD' => 182,
			"/" => 183
		},
		DEFAULT => -173
	},
	{#State 266
		ACTIONS => {
			'DIV' => 176,
			"+" => 174,
			'MOD' => 182,
			"/" => 183
		},
		DEFAULT => -166
	},
	{#State 267
		ACTIONS => {
			'DIV' => 176,
			'BINOP' => 178,
			"+" => 174,
			'CAT' => 180,
			'CMPOP' => 181,
			'MOD' => 182,
			"/" => 183
		},
		DEFAULT => -174
	},
	{#State 268
		ACTIONS => {
			'DIV' => 176,
			'BINOP' => 178,
			"+" => 174,
			'CMPOP' => 181,
			'MOD' => 182,
			"/" => 183
		},
		DEFAULT => -172
	},
	{#State 269
		ACTIONS => {
			'DIV' => 176,
			'BINOP' => 178,
			"+" => 174,
			'MOD' => 182,
			"/" => 183
		},
		DEFAULT => -171
	},
	{#State 270
		DEFAULT => -170
	},
	{#State 271
		ACTIONS => {
			'DIV' => 176,
			'MOD' => 182
		},
		DEFAULT => -167
	},
	{#State 272
		ACTIONS => {
			"+" => 174,
			'CAT' => 180,
			'CMPOP' => 181,
			"?" => 175,
			'DIV' => 176,
			'MOD' => 182,
			"/" => 183,
			'AND' => 177,
			'BINOP' => 178,
			'OR' => 179
		},
		DEFAULT => -183
	},
	{#State 273
		ACTIONS => {
			'ELSIF' => 321,
			'ELSE' => 319
		},
		DEFAULT => -64,
		GOTOS => {
			'else' => 320
		}
	},
	{#State 274
		DEFAULT => -203
	},
	{#State 275
		ACTIONS => {
			'NOT' => 43,
			'LITERAL' => 282,
			'IDENT' => 4,
			"\"" => 71,
			"\$" => 49,
			"[" => 11,
			'NUMBER' => 28,
			'REF' => 29,
			"{" => 32,
			'COMMA' => 284,
			"(" => 61,
			"\${" => 41
		},
		DEFAULT => -195,
		GOTOS => {
			'expr' => 283,
			'sterm' => 79,
			'item' => 280,
			'param' => 281,
			'node' => 25,
			'ident' => 279,
			'term' => 69,
			'lterm' => 64
		}
	},
	{#State 276
		DEFAULT => -200
	},
	{#State 277
		DEFAULT => -198
	},
	{#State 278
		ACTIONS => {
			'NOT' => 43,
			"{" => 32,
			'COMMA' => 284,
			'LITERAL' => 282,
			'IDENT' => 4,
			"\"" => 71,
			"(" => 61,
			"\$" => 49,
			"[" => 11,
			'NUMBER' => 28,
			'REF' => 29,
			")" => 322,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 283,
			'sterm' => 79,
			'item' => 280,
			'param' => 281,
			'node' => 25,
			'ident' => 279,
			'term' => 69,
			'lterm' => 64
		}
	},
	{#State 279
		ACTIONS => {
			'DOT' => 115,
			'ASSIGN' => 323
		},
		DEFAULT => -142
	},
	{#State 280
		ACTIONS => {
			"(" => 151,
			'ASSIGN' => 231
		},
		DEFAULT => -161
	},
	{#State 281
		DEFAULT => -186
	},
	{#State 282
		ACTIONS => {
			'ASSIGN' => 234
		},
		DEFAULT => -145
	},
	{#State 283
		ACTIONS => {
			"+" => 174,
			'CAT' => 180,
			'CMPOP' => 181,
			"?" => 175,
			'DIV' => 176,
			'MOD' => 182,
			"/" => 183,
			'AND' => 177,
			'BINOP' => 178,
			'OR' => 179
		},
		DEFAULT => -185
	},
	{#State 284
		DEFAULT => -188
	},
	{#State 285
		DEFAULT => -150
	},
	{#State 286
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 50,
			"\$" => 49,
			'STOP' => 8,
			'CALL' => 51,
			'THROW' => 10,
			'GET' => 53,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 55,
			'DEBUG' => 57,
			'RAWPERL' => 15,
			'META' => 17,
			'INCLUDE' => 19,
			"(" => 61,
			'SWITCH' => 206,
			'MACRO' => 20,
			'WRAPPER' => 65,
			";" => -32,
			'FOR' => 23,
			'LITERAL' => 67,
			'NEXT' => 24,
			"\"" => 71,
			'TEXT' => 26,
			'PROCESS' => 74,
			'RETURN' => 75,
			'FILTER' => 27,
			'INSERT' => 76,
			'NUMBER' => 28,
			'REF' => 29,
			'WHILE' => 78,
			'BLOCK' => 30,
			'DEFAULT' => 80,
			"{" => 32,
			'USE' => 35,
			'VIEW' => 39,
			"\${" => 41
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 42,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'capture' => 48,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 52,
			'atomexpr' => 54,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 56,
			'defblockname' => 16,
			'loopwhilevar' => 205,
			'ident' => 18,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 64,
			'node' => 25,
			'term' => 69,
			'rawperl' => 70,
			'expr' => 72,
			'use' => 73,
			'defblock' => 77,
			'filter' => 31,
			'sterm' => 79,
			'perl' => 34,
			'chunks' => 204,
			'setlist' => 82,
			'switch' => 37,
			'try' => 38,
			'block' => 251,
			'directive' => 83,
			'condition' => 84
		}
	},
	{#State 287
		ACTIONS => {
			'CMPOP' => 181,
			"?" => 175,
			";" => 324,
			"+" => 174,
			'MOD' => 182,
			'DIV' => 176,
			"/" => 183,
			'AND' => 177,
			'CAT' => 180,
			'BINOP' => 178,
			'OR' => 179
		}
	},
	{#State 288
		ACTIONS => {
			";" => 325
		}
	},
	{#State 289
		ACTIONS => {
			'END' => 326
		}
	},
	{#State 290
		ACTIONS => {
			";" => 328,
			'DEFAULT' => 329,
			'FILENAME' => 94,
			'IDENT' => 92,
			'NUMBER' => 95
		},
		GOTOS => {
			'filepart' => 98,
			'filename' => 327
		}
	},
	{#State 291
		ACTIONS => {
			'END' => 330
		}
	},
	{#State 292
		DEFAULT => -135
	},
	{#State 293
		DEFAULT => -133
	},
	{#State 294
		ACTIONS => {
			'TEXT' => 331
		}
	},
	{#State 295
		ACTIONS => {
			'END' => 332
		}
	},
	{#State 296
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 50,
			"\$" => 49,
			'STOP' => 8,
			'CALL' => 51,
			'THROW' => 10,
			'GET' => 53,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 55,
			'DEBUG' => 57,
			'RAWPERL' => 15,
			'META' => 17,
			'INCLUDE' => 19,
			"(" => 61,
			'SWITCH' => 206,
			'MACRO' => 20,
			'WRAPPER' => 65,
			";" => -32,
			'FOR' => 23,
			'LITERAL' => 67,
			'NEXT' => 24,
			"\"" => 71,
			'TEXT' => 26,
			'PROCESS' => 74,
			'RETURN' => 75,
			'FILTER' => 27,
			'INSERT' => 76,
			'NUMBER' => 28,
			'REF' => 29,
			'WHILE' => 78,
			'BLOCK' => 30,
			'DEFAULT' => 80,
			"{" => 32,
			'USE' => 35,
			'VIEW' => 39,
			"\${" => 41
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 42,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'capture' => 48,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 52,
			'atomexpr' => 54,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 56,
			'defblockname' => 16,
			'loopwhilevar' => 205,
			'ident' => 18,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 64,
			'node' => 25,
			'term' => 69,
			'rawperl' => 70,
			'expr' => 72,
			'use' => 73,
			'defblock' => 77,
			'filter' => 31,
			'sterm' => 79,
			'perl' => 34,
			'chunks' => 204,
			'setlist' => 82,
			'switch' => 37,
			'try' => 38,
			'block' => 333,
			'directive' => 83,
			'condition' => 84
		}
	},
	{#State 297
		ACTIONS => {
			'IDENT' => -129,
			")" => -129,
			'COMMA' => -129
		},
		DEFAULT => -163
	},
	{#State 298
		ACTIONS => {
			'COMMA' => 336,
			'IDENT' => 334,
			")" => 335
		}
	},
	{#State 299
		DEFAULT => -189,
		GOTOS => {
			'args' => 337
		}
	},
	{#State 300
		DEFAULT => -189,
		GOTOS => {
			'args' => 338
		}
	},
	{#State 301
		DEFAULT => -190
	},
	{#State 302
		ACTIONS => {
			'END' => 339
		}
	},
	{#State 303
		ACTIONS => {
			'ASSIGN' => -193
		},
		DEFAULT => -200
	},
	{#State 304
		ACTIONS => {
			'END' => 340
		}
	},
	{#State 305
		ACTIONS => {
			'DIV' => 176,
			'AND' => 177,
			'BINOP' => 178,
			'OR' => 179,
			"+" => 174,
			'CAT' => 180,
			'CMPOP' => 181,
			"?" => 175,
			'MOD' => 182,
			"/" => 183
		},
		DEFAULT => -157
	},
	{#State 306
		ACTIONS => {
			'DIV' => 176,
			'AND' => 177,
			'BINOP' => 178,
			'OR' => 179,
			"+" => 174,
			'CAT' => 180,
			'CMPOP' => 181,
			"?" => 175,
			'MOD' => 182,
			"/" => 183
		},
		DEFAULT => -156
	},
	{#State 307
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 50,
			"\$" => 49,
			'STOP' => 8,
			'CALL' => 51,
			'THROW' => 10,
			'GET' => 53,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 55,
			'DEBUG' => 57,
			'RAWPERL' => 15,
			'META' => 17,
			'INCLUDE' => 19,
			"(" => 61,
			'SWITCH' => 206,
			'MACRO' => 20,
			'WRAPPER' => 65,
			";" => -32,
			'FOR' => 23,
			'LITERAL' => 67,
			'NEXT' => 24,
			"\"" => 71,
			'TEXT' => 26,
			'PROCESS' => 74,
			'RETURN' => 75,
			'FILTER' => 27,
			'INSERT' => 76,
			'NUMBER' => 28,
			'REF' => 29,
			'WHILE' => 78,
			'BLOCK' => 30,
			'DEFAULT' => 80,
			"{" => 32,
			'USE' => 35,
			'VIEW' => 39,
			"\${" => 41
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 42,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'capture' => 48,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 52,
			'atomexpr' => 54,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 56,
			'defblockname' => 16,
			'loopwhilevar' => 205,
			'ident' => 18,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 64,
			'node' => 25,
			'term' => 69,
			'rawperl' => 70,
			'expr' => 72,
			'use' => 73,
			'defblock' => 77,
			'filter' => 31,
			'sterm' => 79,
			'perl' => 34,
			'chunks' => 204,
			'setlist' => 82,
			'switch' => 37,
			'try' => 38,
			'block' => 341,
			'directive' => 83,
			'condition' => 84
		}
	},
	{#State 308
		ACTIONS => {
			'DOT' => 115
		},
		DEFAULT => -19
	},
	{#State 309
		DEFAULT => -17
	},
	{#State 310
		DEFAULT => -91
	},
	{#State 311
		DEFAULT => -162
	},
	{#State 312
		ACTIONS => {
			'END' => 342
		}
	},
	{#State 313
		ACTIONS => {
			'ELSIF' => 321,
			'ELSE' => 319
		},
		DEFAULT => -64,
		GOTOS => {
			'else' => 343
		}
	},
	{#State 314
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 50,
			"\$" => 49,
			'STOP' => 8,
			'CALL' => 51,
			'THROW' => 10,
			'GET' => 53,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 55,
			'DEBUG' => 57,
			'RAWPERL' => 15,
			'META' => 17,
			'INCLUDE' => 19,
			"(" => 61,
			'SWITCH' => 62,
			'MACRO' => 20,
			'WRAPPER' => 65,
			";" => -32,
			'FOR' => 23,
			'LITERAL' => 67,
			'NEXT' => 24,
			"\"" => 71,
			'TEXT' => 26,
			'PROCESS' => 74,
			'RETURN' => 75,
			'FILTER' => 27,
			'INSERT' => 76,
			'NUMBER' => 28,
			'REF' => 29,
			'WHILE' => 78,
			'BLOCK' => 30,
			'DEFAULT' => 80,
			"{" => 32,
			'USE' => 35,
			'VIEW' => 39,
			'EVENT' => 40,
			"\${" => 41
		},
		DEFAULT => -9,
		GOTOS => {
			'event_switch' => 2,
			'loopforvar' => 42,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'capture' => 48,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 52,
			'atomexpr' => 54,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 56,
			'defblockname' => 16,
			'loopwhilevar' => 59,
			'event' => 60,
			'ident' => 18,
			'event_loop' => 63,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 64,
			'event_plug' => 66,
			'node' => 25,
			'finalblock' => 68,
			'rawperl' => 70,
			'term' => 69,
			'use' => 73,
			'expr' => 72,
			'defblock' => 77,
			'sterm' => 79,
			'filter' => 31,
			'eventblock' => 81,
			'templatecode' => 344,
			'perl' => 34,
			'setlist' => 82,
			'chunks' => 36,
			'try' => 38,
			'switch' => 37,
			'directive' => 83,
			'condition' => 84
		}
	},
	{#State 315
		DEFAULT => -92
	},
	{#State 316
		ACTIONS => {
			'CASE' => 346
		},
		GOTOS => {
			'caselst' => 345,
			'onecase' => 351,
			'eventcaselst' => 350,
			'eventcase' => 352,
			'case' => 349,
			'eventdefcase' => 348,
			'eventonecase' => 347
		}
	},
	{#State 317
		ACTIONS => {
			'END' => 353
		}
	},
	{#State 318
		ACTIONS => {
			'NOT' => 43,
			"{" => 32,
			'LITERAL' => 89,
			'IDENT' => 4,
			"\"" => 71,
			"(" => 61,
			"\$" => 49,
			"[" => 11,
			'NUMBER' => 28,
			'REF' => 29,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 354,
			'sterm' => 79,
			'item' => 44,
			'node' => 25,
			'ident' => 88,
			'term' => 69,
			'lterm' => 64
		}
	},
	{#State 319
		ACTIONS => {
			";" => 355
		}
	},
	{#State 320
		ACTIONS => {
			'END' => 356
		}
	},
	{#State 321
		ACTIONS => {
			'NOT' => 43,
			"{" => 32,
			'LITERAL' => 89,
			'IDENT' => 4,
			"\"" => 71,
			"(" => 61,
			"\$" => 49,
			"[" => 11,
			'NUMBER' => 28,
			'REF' => 29,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 357,
			'sterm' => 79,
			'item' => 44,
			'node' => 25,
			'ident' => 88,
			'term' => 69,
			'lterm' => 64
		}
	},
	{#State 322
		DEFAULT => -197
	},
	{#State 323
		ACTIONS => {
			'NOT' => 43,
			"{" => 32,
			'LITERAL' => 89,
			'IDENT' => 4,
			"\"" => 71,
			"(" => 61,
			"\$" => 49,
			"[" => 11,
			'NUMBER' => 28,
			'REF' => 29,
			"\${" => 41
		},
		GOTOS => {
			'expr' => 358,
			'sterm' => 79,
			'item' => 44,
			'node' => 25,
			'ident' => 88,
			'term' => 69,
			'lterm' => 64
		}
	},
	{#State 324
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 50,
			"\$" => 49,
			'STOP' => 8,
			'CALL' => 51,
			'THROW' => 10,
			'GET' => 53,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 55,
			'DEBUG' => 57,
			'RAWPERL' => 15,
			'META' => 17,
			'INCLUDE' => 19,
			"(" => 61,
			'SWITCH' => 206,
			'MACRO' => 20,
			'WRAPPER' => 65,
			";" => -32,
			'FOR' => 23,
			'LITERAL' => 67,
			'NEXT' => 24,
			"\"" => 71,
			'TEXT' => 26,
			'PROCESS' => 74,
			'RETURN' => 75,
			'FILTER' => 27,
			'INSERT' => 76,
			'NUMBER' => 28,
			'REF' => 29,
			'WHILE' => 78,
			'BLOCK' => 30,
			'DEFAULT' => 80,
			"{" => 32,
			'USE' => 35,
			'VIEW' => 39,
			"\${" => 41
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 42,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'capture' => 48,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 52,
			'atomexpr' => 54,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 56,
			'defblockname' => 16,
			'loopwhilevar' => 205,
			'ident' => 18,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 64,
			'node' => 25,
			'term' => 69,
			'rawperl' => 70,
			'expr' => 72,
			'use' => 73,
			'defblock' => 77,
			'filter' => 31,
			'sterm' => 79,
			'perl' => 34,
			'chunks' => 204,
			'setlist' => 82,
			'switch' => 37,
			'try' => 38,
			'block' => 359,
			'directive' => 83,
			'condition' => 84
		}
	},
	{#State 325
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 50,
			"\$" => 49,
			'STOP' => 8,
			'CALL' => 51,
			'THROW' => 10,
			'GET' => 53,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 55,
			'DEBUG' => 57,
			'RAWPERL' => 15,
			'META' => 17,
			'INCLUDE' => 19,
			"(" => 61,
			'SWITCH' => 206,
			'MACRO' => 20,
			'WRAPPER' => 65,
			";" => -32,
			'FOR' => 23,
			'LITERAL' => 67,
			'NEXT' => 24,
			"\"" => 71,
			'TEXT' => 26,
			'PROCESS' => 74,
			'RETURN' => 75,
			'FILTER' => 27,
			'INSERT' => 76,
			'NUMBER' => 28,
			'REF' => 29,
			'WHILE' => 78,
			'BLOCK' => 30,
			'DEFAULT' => 80,
			"{" => 32,
			'USE' => 35,
			'VIEW' => 39,
			"\${" => 41
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 42,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'capture' => 48,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 52,
			'atomexpr' => 54,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 56,
			'defblockname' => 16,
			'loopwhilevar' => 205,
			'ident' => 18,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 64,
			'node' => 25,
			'term' => 69,
			'rawperl' => 70,
			'expr' => 72,
			'use' => 73,
			'defblock' => 77,
			'filter' => 31,
			'sterm' => 79,
			'perl' => 34,
			'chunks' => 204,
			'setlist' => 82,
			'switch' => 37,
			'try' => 38,
			'block' => 360,
			'directive' => 83,
			'condition' => 84
		}
	},
	{#State 326
		DEFAULT => -100
	},
	{#State 327
		ACTIONS => {
			'DOT' => 193,
			";" => 361
		}
	},
	{#State 328
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 50,
			"\$" => 49,
			'STOP' => 8,
			'CALL' => 51,
			'THROW' => 10,
			'GET' => 53,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 55,
			'DEBUG' => 57,
			'RAWPERL' => 15,
			'META' => 17,
			'INCLUDE' => 19,
			"(" => 61,
			'SWITCH' => 206,
			'MACRO' => 20,
			'WRAPPER' => 65,
			";" => -32,
			'FOR' => 23,
			'LITERAL' => 67,
			'NEXT' => 24,
			"\"" => 71,
			'TEXT' => 26,
			'PROCESS' => 74,
			'RETURN' => 75,
			'FILTER' => 27,
			'INSERT' => 76,
			'NUMBER' => 28,
			'REF' => 29,
			'WHILE' => 78,
			'BLOCK' => 30,
			'DEFAULT' => 80,
			"{" => 32,
			'USE' => 35,
			'VIEW' => 39,
			"\${" => 41
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 42,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'capture' => 48,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 52,
			'atomexpr' => 54,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 56,
			'defblockname' => 16,
			'loopwhilevar' => 205,
			'ident' => 18,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 64,
			'node' => 25,
			'term' => 69,
			'rawperl' => 70,
			'expr' => 72,
			'use' => 73,
			'defblock' => 77,
			'filter' => 31,
			'sterm' => 79,
			'perl' => 34,
			'chunks' => 204,
			'setlist' => 82,
			'switch' => 37,
			'try' => 38,
			'block' => 362,
			'directive' => 83,
			'condition' => 84
		}
	},
	{#State 329
		ACTIONS => {
			";" => 363
		}
	},
	{#State 330
		DEFAULT => -112
	},
	{#State 331
		ACTIONS => {
			"\"" => 364
		}
	},
	{#State 332
		DEFAULT => -115
	},
	{#State 333
		ACTIONS => {
			'END' => 365
		}
	},
	{#State 334
		DEFAULT => -127
	},
	{#State 335
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 50,
			"\$" => 49,
			'STOP' => 8,
			'CALL' => 51,
			'THROW' => 10,
			'GET' => 53,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 55,
			'DEBUG' => 57,
			'INCLUDE' => 19,
			"(" => 61,
			'SWITCH' => 206,
			'WRAPPER' => 65,
			'FOR' => 23,
			'NEXT' => 24,
			'LITERAL' => 67,
			"\"" => 71,
			'PROCESS' => 74,
			'FILTER' => 27,
			'RETURN' => 75,
			'INSERT' => 76,
			'NUMBER' => 28,
			'REF' => 29,
			'WHILE' => 78,
			'BLOCK' => 215,
			'DEFAULT' => 80,
			"{" => 32,
			"\${" => 41
		},
		GOTOS => {
			'loopforvar' => 42,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'node' => 25,
			'term' => 69,
			'loop' => 6,
			'expr' => 221,
			'wrapper' => 52,
			'atomexpr' => 54,
			'atomdir' => 14,
			'mdir' => 366,
			'sterm' => 79,
			'filter' => 31,
			'loopwhilevar' => 205,
			'ident' => 166,
			'perl' => 34,
			'setlist' => 82,
			'try' => 38,
			'switch' => 37,
			'assign' => 21,
			'directive' => 218,
			'condition' => 84,
			'lterm' => 64
		}
	},
	{#State 336
		DEFAULT => -128
	},
	{#State 337
		ACTIONS => {
			'NOT' => 43,
			"{" => 32,
			'COMMA' => 284,
			'LITERAL' => 282,
			'IDENT' => 4,
			"\"" => 71,
			"(" => 61,
			"\$" => 49,
			"[" => 11,
			'NUMBER' => 28,
			'REF' => 29,
			"\${" => 41
		},
		DEFAULT => -95,
		GOTOS => {
			'expr' => 283,
			'sterm' => 79,
			'item' => 280,
			'param' => 281,
			'node' => 25,
			'ident' => 279,
			'term' => 69,
			'lterm' => 64
		}
	},
	{#State 338
		ACTIONS => {
			'NOT' => 43,
			"{" => 32,
			'COMMA' => 284,
			'LITERAL' => 282,
			'IDENT' => 4,
			"\"" => 71,
			"(" => 61,
			"\$" => 49,
			"[" => 11,
			'NUMBER' => 28,
			'REF' => 29,
			"\${" => 41
		},
		DEFAULT => -96,
		GOTOS => {
			'expr' => 283,
			'sterm' => 79,
			'item' => 280,
			'param' => 281,
			'node' => 25,
			'ident' => 279,
			'term' => 69,
			'lterm' => 64
		}
	},
	{#State 339
		DEFAULT => -113
	},
	{#State 340
		DEFAULT => -121
	},
	{#State 341
		ACTIONS => {
			'END' => 367
		}
	},
	{#State 342
		DEFAULT => -110
	},
	{#State 343
		ACTIONS => {
			'END' => 368
		}
	},
	{#State 344
		DEFAULT => -86
	},
	{#State 345
		ACTIONS => {
			'CASE' => 369
		},
		DEFAULT => -77,
		GOTOS => {
			'onecase' => 373,
			'defcase' => 372,
			'eventdefcase' => 371,
			'eventonecase' => 370
		}
	},
	{#State 346
		ACTIONS => {
			";" => 374,
			'DEFAULT' => 376,
			"{" => 32,
			'LITERAL' => 89,
			'IDENT' => 4,
			"\"" => 71,
			"\$" => 49,
			"[" => 11,
			'NUMBER' => 28,
			'REF' => 29,
			"\${" => 41
		},
		GOTOS => {
			'sterm' => 79,
			'item' => 44,
			'node' => 25,
			'ident' => 88,
			'term' => 375,
			'lterm' => 64
		}
	},
	{#State 347
		DEFAULT => -74
	},
	{#State 348
		DEFAULT => -75
	},
	{#State 349
		ACTIONS => {
			'END' => 377
		}
	},
	{#State 350
		ACTIONS => {
			'CASE' => 369
		},
		DEFAULT => -67,
		GOTOS => {
			'onecase' => 381,
			'defcase' => 380,
			'eventdefcase' => 379,
			'eventonecase' => 378
		}
	},
	{#State 351
		DEFAULT => -79
	},
	{#State 352
		ACTIONS => {
			'END' => 382
		}
	},
	{#State 353
		DEFAULT => -98
	},
	{#State 354
		ACTIONS => {
			'DIV' => 176,
			'AND' => 177,
			'BINOP' => 178,
			'OR' => 179,
			"+" => 174,
			'CAT' => 180,
			'CMPOP' => 181,
			"?" => 175,
			'MOD' => 182,
			"/" => 183
		},
		DEFAULT => -176
	},
	{#State 355
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 50,
			"\$" => 49,
			'STOP' => 8,
			'CALL' => 51,
			'THROW' => 10,
			'GET' => 53,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 55,
			'DEBUG' => 57,
			'RAWPERL' => 15,
			'META' => 17,
			'INCLUDE' => 19,
			"(" => 61,
			'SWITCH' => 206,
			'MACRO' => 20,
			'WRAPPER' => 65,
			";" => -32,
			'FOR' => 23,
			'LITERAL' => 67,
			'NEXT' => 24,
			"\"" => 71,
			'TEXT' => 26,
			'PROCESS' => 74,
			'RETURN' => 75,
			'FILTER' => 27,
			'INSERT' => 76,
			'NUMBER' => 28,
			'REF' => 29,
			'WHILE' => 78,
			'BLOCK' => 30,
			'DEFAULT' => 80,
			"{" => 32,
			'USE' => 35,
			'VIEW' => 39,
			"\${" => 41
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 42,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'capture' => 48,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 52,
			'atomexpr' => 54,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 56,
			'defblockname' => 16,
			'loopwhilevar' => 205,
			'ident' => 18,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 64,
			'node' => 25,
			'term' => 69,
			'rawperl' => 70,
			'expr' => 72,
			'use' => 73,
			'defblock' => 77,
			'filter' => 31,
			'sterm' => 79,
			'perl' => 34,
			'chunks' => 204,
			'setlist' => 82,
			'switch' => 37,
			'try' => 38,
			'block' => 383,
			'directive' => 83,
			'condition' => 84
		}
	},
	{#State 356
		DEFAULT => -60
	},
	{#State 357
		ACTIONS => {
			'CMPOP' => 181,
			"?" => 175,
			";" => 384,
			"+" => 174,
			'MOD' => 182,
			'DIV' => 176,
			"/" => 183,
			'AND' => 177,
			'CAT' => 180,
			'BINOP' => 178,
			'OR' => 179
		}
	},
	{#State 358
		ACTIONS => {
			"+" => 174,
			'CAT' => 180,
			'CMPOP' => 181,
			"?" => 175,
			'DIV' => 176,
			'MOD' => 182,
			"/" => 183,
			'AND' => 177,
			'BINOP' => 178,
			'OR' => 179
		},
		DEFAULT => -187
	},
	{#State 359
		ACTIONS => {
			'CASE' => 386
		},
		GOTOS => {
			'caselst' => 385,
			'onecase' => 351,
			'case' => 349
		}
	},
	{#State 360
		DEFAULT => -104
	},
	{#State 361
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 50,
			"\$" => 49,
			'STOP' => 8,
			'CALL' => 51,
			'THROW' => 10,
			'GET' => 53,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 55,
			'DEBUG' => 57,
			'RAWPERL' => 15,
			'META' => 17,
			'INCLUDE' => 19,
			"(" => 61,
			'SWITCH' => 206,
			'MACRO' => 20,
			'WRAPPER' => 65,
			";" => -32,
			'FOR' => 23,
			'LITERAL' => 67,
			'NEXT' => 24,
			"\"" => 71,
			'TEXT' => 26,
			'PROCESS' => 74,
			'RETURN' => 75,
			'FILTER' => 27,
			'INSERT' => 76,
			'NUMBER' => 28,
			'REF' => 29,
			'WHILE' => 78,
			'BLOCK' => 30,
			'DEFAULT' => 80,
			"{" => 32,
			'USE' => 35,
			'VIEW' => 39,
			"\${" => 41
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 42,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'capture' => 48,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 52,
			'atomexpr' => 54,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 56,
			'defblockname' => 16,
			'loopwhilevar' => 205,
			'ident' => 18,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 64,
			'node' => 25,
			'term' => 69,
			'rawperl' => 70,
			'expr' => 72,
			'use' => 73,
			'defblock' => 77,
			'filter' => 31,
			'sterm' => 79,
			'perl' => 34,
			'chunks' => 204,
			'setlist' => 82,
			'switch' => 37,
			'try' => 38,
			'block' => 387,
			'directive' => 83,
			'condition' => 84
		}
	},
	{#State 362
		ACTIONS => {
			'FINAL' => 288,
			'CATCH' => 290
		},
		DEFAULT => -105,
		GOTOS => {
			'final' => 388
		}
	},
	{#State 363
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 50,
			"\$" => 49,
			'STOP' => 8,
			'CALL' => 51,
			'THROW' => 10,
			'GET' => 53,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 55,
			'DEBUG' => 57,
			'RAWPERL' => 15,
			'META' => 17,
			'INCLUDE' => 19,
			"(" => 61,
			'SWITCH' => 206,
			'MACRO' => 20,
			'WRAPPER' => 65,
			";" => -32,
			'FOR' => 23,
			'LITERAL' => 67,
			'NEXT' => 24,
			"\"" => 71,
			'TEXT' => 26,
			'PROCESS' => 74,
			'RETURN' => 75,
			'FILTER' => 27,
			'INSERT' => 76,
			'NUMBER' => 28,
			'REF' => 29,
			'WHILE' => 78,
			'BLOCK' => 30,
			'DEFAULT' => 80,
			"{" => 32,
			'USE' => 35,
			'VIEW' => 39,
			"\${" => 41
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 42,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'capture' => 48,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 52,
			'atomexpr' => 54,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 56,
			'defblockname' => 16,
			'loopwhilevar' => 205,
			'ident' => 18,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 64,
			'node' => 25,
			'term' => 69,
			'rawperl' => 70,
			'expr' => 72,
			'use' => 73,
			'defblock' => 77,
			'filter' => 31,
			'sterm' => 79,
			'perl' => 34,
			'chunks' => 204,
			'setlist' => 82,
			'switch' => 37,
			'try' => 38,
			'block' => 389,
			'directive' => 83,
			'condition' => 84
		}
	},
	{#State 364
		DEFAULT => -134
	},
	{#State 365
		DEFAULT => -126
	},
	{#State 366
		DEFAULT => -123
	},
	{#State 367
		DEFAULT => -108
	},
	{#State 368
		DEFAULT => -58
	},
	{#State 369
		ACTIONS => {
			";" => 390,
			'DEFAULT' => 391,
			"{" => 32,
			'LITERAL' => 89,
			'IDENT' => 4,
			"\"" => 71,
			"\$" => 49,
			"[" => 11,
			'NUMBER' => 28,
			'REF' => 29,
			"\${" => 41
		},
		GOTOS => {
			'sterm' => 79,
			'item' => 44,
			'node' => 25,
			'ident' => 88,
			'term' => 375,
			'lterm' => 64
		}
	},
	{#State 370
		DEFAULT => -73
	},
	{#State 371
		DEFAULT => -70
	},
	{#State 372
		DEFAULT => -76
	},
	{#State 373
		DEFAULT => -78
	},
	{#State 374
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 50,
			"\$" => 49,
			'STOP' => 8,
			'CALL' => 51,
			'THROW' => 10,
			'GET' => 53,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 55,
			'DEBUG' => 57,
			'RAWPERL' => 15,
			'META' => 17,
			'INCLUDE' => 19,
			"(" => 61,
			'SWITCH' => 62,
			'MACRO' => 20,
			'WRAPPER' => 65,
			'FOR' => 23,
			'LITERAL' => 67,
			'NEXT' => 24,
			"\"" => 71,
			'TEXT' => 26,
			'PROCESS' => 74,
			'RETURN' => 75,
			'FILTER' => 27,
			'INSERT' => 76,
			'NUMBER' => 28,
			'REF' => 29,
			'WHILE' => 78,
			'BLOCK' => 30,
			'DEFAULT' => 80,
			"{" => 32,
			'USE' => 35,
			'VIEW' => 39,
			'EVENT' => 40,
			"\${" => 41
		},
		DEFAULT => -32,
		GOTOS => {
			'event_switch' => 2,
			'loopforvar' => 42,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'capture' => 48,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 52,
			'atomexpr' => 54,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 56,
			'defblockname' => 16,
			'loopwhilevar' => 59,
			'event' => 60,
			'ident' => 18,
			'event_loop' => 63,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 64,
			'event_plug' => 66,
			'node' => 25,
			'term' => 69,
			'rawperl' => 70,
			'use' => 73,
			'expr' => 72,
			'defblock' => 77,
			'sterm' => 79,
			'filter' => 31,
			'eventblock' => 393,
			'perl' => 34,
			'setlist' => 82,
			'chunks' => 392,
			'try' => 38,
			'switch' => 37,
			'directive' => 83,
			'condition' => 84
		}
	},
	{#State 375
		ACTIONS => {
			";" => 394
		}
	},
	{#State 376
		ACTIONS => {
			";" => 395
		}
	},
	{#State 377
		DEFAULT => -66
	},
	{#State 378
		DEFAULT => -71
	},
	{#State 379
		DEFAULT => -68
	},
	{#State 380
		DEFAULT => -69
	},
	{#State 381
		DEFAULT => -72
	},
	{#State 382
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 50,
			"\$" => 49,
			'STOP' => 8,
			'CALL' => 51,
			'THROW' => 10,
			'GET' => 53,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 55,
			'DEBUG' => 57,
			'RAWPERL' => 15,
			'META' => 17,
			'INCLUDE' => 19,
			"(" => 61,
			'SWITCH' => 62,
			'MACRO' => 20,
			'WRAPPER' => 65,
			";" => -32,
			'FOR' => 23,
			'LITERAL' => 67,
			'NEXT' => 24,
			"\"" => 71,
			'TEXT' => 26,
			'PROCESS' => 74,
			'RETURN' => 75,
			'FILTER' => 27,
			'INSERT' => 76,
			'NUMBER' => 28,
			'REF' => 29,
			'WHILE' => 78,
			'BLOCK' => 30,
			'DEFAULT' => 80,
			"{" => 32,
			'USE' => 35,
			'VIEW' => 39,
			'EVENT' => 40,
			"\${" => 41
		},
		DEFAULT => -9,
		GOTOS => {
			'event_switch' => 2,
			'loopforvar' => 42,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'capture' => 48,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 52,
			'atomexpr' => 54,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 56,
			'defblockname' => 16,
			'loopwhilevar' => 59,
			'event' => 60,
			'ident' => 18,
			'event_loop' => 63,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 64,
			'event_plug' => 66,
			'node' => 25,
			'finalblock' => 68,
			'rawperl' => 70,
			'term' => 69,
			'use' => 73,
			'expr' => 72,
			'defblock' => 77,
			'sterm' => 79,
			'filter' => 31,
			'eventblock' => 81,
			'templatecode' => 396,
			'perl' => 34,
			'setlist' => 82,
			'chunks' => 36,
			'try' => 38,
			'switch' => 37,
			'directive' => 83,
			'condition' => 84
		}
	},
	{#State 383
		DEFAULT => -63
	},
	{#State 384
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 50,
			"\$" => 49,
			'STOP' => 8,
			'CALL' => 51,
			'THROW' => 10,
			'GET' => 53,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 55,
			'DEBUG' => 57,
			'RAWPERL' => 15,
			'META' => 17,
			'INCLUDE' => 19,
			"(" => 61,
			'SWITCH' => 206,
			'MACRO' => 20,
			'WRAPPER' => 65,
			";" => -32,
			'FOR' => 23,
			'LITERAL' => 67,
			'NEXT' => 24,
			"\"" => 71,
			'TEXT' => 26,
			'PROCESS' => 74,
			'RETURN' => 75,
			'FILTER' => 27,
			'INSERT' => 76,
			'NUMBER' => 28,
			'REF' => 29,
			'WHILE' => 78,
			'BLOCK' => 30,
			'DEFAULT' => 80,
			"{" => 32,
			'USE' => 35,
			'VIEW' => 39,
			"\${" => 41
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 42,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'capture' => 48,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 52,
			'atomexpr' => 54,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 56,
			'defblockname' => 16,
			'loopwhilevar' => 205,
			'ident' => 18,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 64,
			'node' => 25,
			'term' => 69,
			'rawperl' => 70,
			'expr' => 72,
			'use' => 73,
			'defblock' => 77,
			'filter' => 31,
			'sterm' => 79,
			'perl' => 34,
			'chunks' => 204,
			'setlist' => 82,
			'switch' => 37,
			'try' => 38,
			'block' => 397,
			'directive' => 83,
			'condition' => 84
		}
	},
	{#State 385
		ACTIONS => {
			'CASE' => 398
		},
		DEFAULT => -77,
		GOTOS => {
			'onecase' => 373,
			'defcase' => 372
		}
	},
	{#State 386
		ACTIONS => {
			"{" => 32,
			'LITERAL' => 89,
			'IDENT' => 4,
			"\"" => 71,
			"\$" => 49,
			"[" => 11,
			'NUMBER' => 28,
			'REF' => 29,
			"\${" => 41
		},
		GOTOS => {
			'sterm' => 79,
			'item' => 44,
			'node' => 25,
			'ident' => 88,
			'term' => 399,
			'lterm' => 64
		}
	},
	{#State 387
		ACTIONS => {
			'FINAL' => 288,
			'CATCH' => 290
		},
		DEFAULT => -105,
		GOTOS => {
			'final' => 400
		}
	},
	{#State 388
		DEFAULT => -103
	},
	{#State 389
		ACTIONS => {
			'FINAL' => 288,
			'CATCH' => 290
		},
		DEFAULT => -105,
		GOTOS => {
			'final' => 401
		}
	},
	{#State 390
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 50,
			"\$" => 49,
			'STOP' => 8,
			'CALL' => 51,
			'THROW' => 10,
			'GET' => 53,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 55,
			'DEBUG' => 57,
			'RAWPERL' => 15,
			'META' => 17,
			'INCLUDE' => 19,
			"(" => 61,
			'SWITCH' => 62,
			'MACRO' => 20,
			'WRAPPER' => 65,
			";" => -32,
			'FOR' => 23,
			'LITERAL' => 67,
			'NEXT' => 24,
			"\"" => 71,
			'TEXT' => 26,
			'PROCESS' => 74,
			'RETURN' => 75,
			'FILTER' => 27,
			'INSERT' => 76,
			'NUMBER' => 28,
			'REF' => 29,
			'WHILE' => 78,
			'BLOCK' => 30,
			'DEFAULT' => 80,
			"{" => 32,
			'USE' => 35,
			'VIEW' => 39,
			'EVENT' => 40,
			"\${" => 41
		},
		DEFAULT => -11,
		GOTOS => {
			'event_switch' => 2,
			'loopforvar' => 42,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'capture' => 48,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 52,
			'atomexpr' => 54,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 56,
			'defblockname' => 16,
			'loopwhilevar' => 59,
			'event' => 60,
			'ident' => 18,
			'event_loop' => 63,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 64,
			'event_plug' => 66,
			'node' => 25,
			'term' => 69,
			'rawperl' => 70,
			'use' => 73,
			'expr' => 72,
			'defblock' => 77,
			'sterm' => 79,
			'filter' => 31,
			'eventblock' => 393,
			'perl' => 34,
			'setlist' => 82,
			'chunks' => 249,
			'try' => 38,
			'switch' => 37,
			'block' => 402,
			'directive' => 83,
			'condition' => 84
		}
	},
	{#State 391
		ACTIONS => {
			";" => 403
		}
	},
	{#State 392
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 50,
			"\$" => 49,
			'STOP' => 8,
			'CALL' => 51,
			'THROW' => 10,
			'GET' => 53,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 55,
			'DEBUG' => 57,
			'RAWPERL' => 15,
			'META' => 17,
			'INCLUDE' => 19,
			"(" => 61,
			'SWITCH' => 62,
			'MACRO' => 20,
			'WRAPPER' => 65,
			'FOR' => 23,
			'LITERAL' => 67,
			'NEXT' => 24,
			"\"" => 71,
			'TEXT' => 26,
			'PROCESS' => 74,
			'RETURN' => 75,
			'FILTER' => 27,
			'INSERT' => 76,
			'NUMBER' => 28,
			'REF' => 29,
			'WHILE' => 78,
			'BLOCK' => 30,
			'DEFAULT' => 80,
			"{" => 32,
			'USE' => 35,
			'VIEW' => 39,
			'EVENT' => 40,
			"\${" => 41
		},
		DEFAULT => -32,
		GOTOS => {
			'event_switch' => 2,
			'loopforvar' => 42,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'capture' => 48,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 52,
			'atomexpr' => 54,
			'chunk' => 142,
			'atomdir' => 14,
			'anonblock' => 56,
			'defblockname' => 16,
			'loopwhilevar' => 59,
			'event' => 143,
			'ident' => 18,
			'event_loop' => 63,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 64,
			'event_plug' => 66,
			'node' => 25,
			'term' => 69,
			'rawperl' => 70,
			'expr' => 72,
			'use' => 73,
			'defblock' => 77,
			'sterm' => 79,
			'filter' => 31,
			'perl' => 34,
			'setlist' => 82,
			'switch' => 37,
			'try' => 38,
			'directive' => 83,
			'condition' => 84
		}
	},
	{#State 393
		DEFAULT => -81
	},
	{#State 394
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 50,
			"\$" => 49,
			'STOP' => 8,
			'CALL' => 51,
			'THROW' => 10,
			'GET' => 53,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 55,
			'DEBUG' => 57,
			'RAWPERL' => 15,
			'META' => 17,
			'INCLUDE' => 19,
			"(" => 61,
			'SWITCH' => 62,
			'MACRO' => 20,
			'WRAPPER' => 65,
			";" => -32,
			'FOR' => 23,
			'LITERAL' => 67,
			'NEXT' => 24,
			"\"" => 71,
			'TEXT' => 26,
			'PROCESS' => 74,
			'RETURN' => 75,
			'FILTER' => 27,
			'INSERT' => 76,
			'NUMBER' => 28,
			'REF' => 29,
			'WHILE' => 78,
			'BLOCK' => 30,
			'DEFAULT' => 80,
			"{" => 32,
			'USE' => 35,
			'VIEW' => 39,
			'EVENT' => 40,
			"\${" => 41
		},
		DEFAULT => -11,
		GOTOS => {
			'event_switch' => 2,
			'loopforvar' => 42,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'capture' => 48,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 52,
			'atomexpr' => 54,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 56,
			'defblockname' => 16,
			'loopwhilevar' => 59,
			'event' => 60,
			'ident' => 18,
			'event_loop' => 63,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 64,
			'event_plug' => 66,
			'node' => 25,
			'term' => 69,
			'rawperl' => 70,
			'use' => 73,
			'expr' => 72,
			'defblock' => 77,
			'sterm' => 79,
			'filter' => 31,
			'eventblock' => 404,
			'perl' => 34,
			'setlist' => 82,
			'chunks' => 249,
			'try' => 38,
			'switch' => 37,
			'block' => 405,
			'directive' => 83,
			'condition' => 84
		}
	},
	{#State 395
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 50,
			"\$" => 49,
			'STOP' => 8,
			'CALL' => 51,
			'THROW' => 10,
			'GET' => 53,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 55,
			'DEBUG' => 57,
			'RAWPERL' => 15,
			'META' => 17,
			'INCLUDE' => 19,
			"(" => 61,
			'SWITCH' => 62,
			'MACRO' => 20,
			'WRAPPER' => 65,
			'FOR' => 23,
			'LITERAL' => 67,
			'NEXT' => 24,
			"\"" => 71,
			'TEXT' => 26,
			'PROCESS' => 74,
			'RETURN' => 75,
			'FILTER' => 27,
			'INSERT' => 76,
			'NUMBER' => 28,
			'REF' => 29,
			'WHILE' => 78,
			'BLOCK' => 30,
			'DEFAULT' => 80,
			"{" => 32,
			'USE' => 35,
			'VIEW' => 39,
			'EVENT' => 40,
			"\${" => 41
		},
		DEFAULT => -32,
		GOTOS => {
			'event_switch' => 2,
			'loopforvar' => 42,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'capture' => 48,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 52,
			'atomexpr' => 54,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 56,
			'defblockname' => 16,
			'loopwhilevar' => 59,
			'event' => 60,
			'ident' => 18,
			'event_loop' => 63,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 64,
			'event_plug' => 66,
			'node' => 25,
			'term' => 69,
			'rawperl' => 70,
			'use' => 73,
			'expr' => 72,
			'defblock' => 77,
			'sterm' => 79,
			'filter' => 31,
			'eventblock' => 406,
			'perl' => 34,
			'setlist' => 82,
			'chunks' => 392,
			'try' => 38,
			'switch' => 37,
			'directive' => 83,
			'condition' => 84
		}
	},
	{#State 396
		DEFAULT => -65
	},
	{#State 397
		ACTIONS => {
			'ELSIF' => 321,
			'ELSE' => 319
		},
		DEFAULT => -64,
		GOTOS => {
			'else' => 407
		}
	},
	{#State 398
		ACTIONS => {
			";" => 408,
			'DEFAULT' => 409,
			"{" => 32,
			'LITERAL' => 89,
			'IDENT' => 4,
			"\"" => 71,
			"\$" => 49,
			"[" => 11,
			'NUMBER' => 28,
			'REF' => 29,
			"\${" => 41
		},
		GOTOS => {
			'sterm' => 79,
			'item' => 44,
			'node' => 25,
			'ident' => 88,
			'term' => 399,
			'lterm' => 64
		}
	},
	{#State 399
		ACTIONS => {
			";" => 410
		}
	},
	{#State 400
		DEFAULT => -101
	},
	{#State 401
		DEFAULT => -102
	},
	{#State 402
		DEFAULT => -83
	},
	{#State 403
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 50,
			"\$" => 49,
			'STOP' => 8,
			'CALL' => 51,
			'THROW' => 10,
			'GET' => 53,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 55,
			'DEBUG' => 57,
			'RAWPERL' => 15,
			'META' => 17,
			'INCLUDE' => 19,
			"(" => 61,
			'SWITCH' => 62,
			'MACRO' => 20,
			'WRAPPER' => 65,
			";" => -32,
			'FOR' => 23,
			'LITERAL' => 67,
			'NEXT' => 24,
			"\"" => 71,
			'TEXT' => 26,
			'PROCESS' => 74,
			'RETURN' => 75,
			'FILTER' => 27,
			'INSERT' => 76,
			'NUMBER' => 28,
			'REF' => 29,
			'WHILE' => 78,
			'BLOCK' => 30,
			'DEFAULT' => 80,
			"{" => 32,
			'USE' => 35,
			'VIEW' => 39,
			'EVENT' => 40,
			"\${" => 41
		},
		DEFAULT => -11,
		GOTOS => {
			'event_switch' => 2,
			'loopforvar' => 42,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'capture' => 48,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 52,
			'atomexpr' => 54,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 56,
			'defblockname' => 16,
			'loopwhilevar' => 59,
			'event' => 60,
			'ident' => 18,
			'event_loop' => 63,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 64,
			'event_plug' => 66,
			'node' => 25,
			'term' => 69,
			'rawperl' => 70,
			'use' => 73,
			'expr' => 72,
			'defblock' => 77,
			'sterm' => 79,
			'filter' => 31,
			'eventblock' => 406,
			'perl' => 34,
			'setlist' => 82,
			'chunks' => 249,
			'try' => 38,
			'switch' => 37,
			'block' => 411,
			'directive' => 83,
			'condition' => 84
		}
	},
	{#State 404
		DEFAULT => -84
	},
	{#State 405
		DEFAULT => -85
	},
	{#State 406
		DEFAULT => -80
	},
	{#State 407
		DEFAULT => -62
	},
	{#State 408
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 50,
			"\$" => 49,
			'STOP' => 8,
			'CALL' => 51,
			'THROW' => 10,
			'GET' => 53,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 55,
			'DEBUG' => 57,
			'RAWPERL' => 15,
			'META' => 17,
			'INCLUDE' => 19,
			"(" => 61,
			'SWITCH' => 206,
			'MACRO' => 20,
			'WRAPPER' => 65,
			";" => -32,
			'FOR' => 23,
			'LITERAL' => 67,
			'NEXT' => 24,
			"\"" => 71,
			'TEXT' => 26,
			'PROCESS' => 74,
			'RETURN' => 75,
			'FILTER' => 27,
			'INSERT' => 76,
			'NUMBER' => 28,
			'REF' => 29,
			'WHILE' => 78,
			'BLOCK' => 30,
			'DEFAULT' => 80,
			"{" => 32,
			'USE' => 35,
			'VIEW' => 39,
			"\${" => 41
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 42,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'capture' => 48,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 52,
			'atomexpr' => 54,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 56,
			'defblockname' => 16,
			'loopwhilevar' => 205,
			'ident' => 18,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 64,
			'node' => 25,
			'term' => 69,
			'rawperl' => 70,
			'expr' => 72,
			'use' => 73,
			'defblock' => 77,
			'filter' => 31,
			'sterm' => 79,
			'perl' => 34,
			'chunks' => 204,
			'setlist' => 82,
			'switch' => 37,
			'try' => 38,
			'block' => 402,
			'directive' => 83,
			'condition' => 84
		}
	},
	{#State 409
		ACTIONS => {
			";" => 412
		}
	},
	{#State 410
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 50,
			"\$" => 49,
			'STOP' => 8,
			'CALL' => 51,
			'THROW' => 10,
			'GET' => 53,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 55,
			'DEBUG' => 57,
			'RAWPERL' => 15,
			'META' => 17,
			'INCLUDE' => 19,
			"(" => 61,
			'SWITCH' => 206,
			'MACRO' => 20,
			'WRAPPER' => 65,
			";" => -32,
			'FOR' => 23,
			'LITERAL' => 67,
			'NEXT' => 24,
			"\"" => 71,
			'TEXT' => 26,
			'PROCESS' => 74,
			'RETURN' => 75,
			'FILTER' => 27,
			'INSERT' => 76,
			'NUMBER' => 28,
			'REF' => 29,
			'WHILE' => 78,
			'BLOCK' => 30,
			'DEFAULT' => 80,
			"{" => 32,
			'USE' => 35,
			'VIEW' => 39,
			"\${" => 41
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 42,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'capture' => 48,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 52,
			'atomexpr' => 54,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 56,
			'defblockname' => 16,
			'loopwhilevar' => 205,
			'ident' => 18,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 64,
			'node' => 25,
			'term' => 69,
			'rawperl' => 70,
			'expr' => 72,
			'use' => 73,
			'defblock' => 77,
			'filter' => 31,
			'sterm' => 79,
			'perl' => 34,
			'chunks' => 204,
			'setlist' => 82,
			'switch' => 37,
			'try' => 38,
			'block' => 405,
			'directive' => 83,
			'condition' => 84
		}
	},
	{#State 411
		DEFAULT => -82
	},
	{#State 412
		ACTIONS => {
			'SET' => 1,
			'PERL' => 46,
			'NOT' => 43,
			'IDENT' => 4,
			'CLEAR' => 47,
			'UNLESS' => 5,
			'IF' => 50,
			"\$" => 49,
			'STOP' => 8,
			'CALL' => 51,
			'THROW' => 10,
			'GET' => 53,
			"[" => 11,
			'TRY' => 12,
			'LAST' => 55,
			'DEBUG' => 57,
			'RAWPERL' => 15,
			'META' => 17,
			'INCLUDE' => 19,
			"(" => 61,
			'SWITCH' => 206,
			'MACRO' => 20,
			'WRAPPER' => 65,
			";" => -32,
			'FOR' => 23,
			'LITERAL' => 67,
			'NEXT' => 24,
			"\"" => 71,
			'TEXT' => 26,
			'PROCESS' => 74,
			'RETURN' => 75,
			'FILTER' => 27,
			'INSERT' => 76,
			'NUMBER' => 28,
			'REF' => 29,
			'WHILE' => 78,
			'BLOCK' => 30,
			'DEFAULT' => 80,
			"{" => 32,
			'USE' => 35,
			'VIEW' => 39,
			"\${" => 41
		},
		DEFAULT => -11,
		GOTOS => {
			'loopforvar' => 42,
			'loopwf' => 45,
			'item' => 44,
			'atomloop' => 3,
			'loop' => 6,
			'capture' => 48,
			'statement' => 7,
			'view' => 9,
			'wrapper' => 52,
			'atomexpr' => 54,
			'chunk' => 13,
			'atomdir' => 14,
			'anonblock' => 56,
			'defblockname' => 16,
			'loopwhilevar' => 205,
			'ident' => 18,
			'assign' => 21,
			'macro' => 22,
			'lterm' => 64,
			'node' => 25,
			'term' => 69,
			'rawperl' => 70,
			'expr' => 72,
			'use' => 73,
			'defblock' => 77,
			'filter' => 31,
			'sterm' => 79,
			'perl' => 34,
			'chunks' => 204,
			'setlist' => 82,
			'switch' => 37,
			'try' => 38,
			'block' => 411,
			'directive' => 83,
			'condition' => 84
		}
	}
]; 


#========================================================================
# Rules
#========================================================================

$RULES = [
	[#Rule 0
		 '$start', 2, undef
	],
	[#Rule 1
		 'template', 1,
sub
#line 66 "Parser.yp"
{ $factory->template( $_[1] )         }
	],
	[#Rule 2
		 'templatecode', 2,
sub
#line 69 "Parser.yp"
{ $_[0]->rollback_token; $_[1]        }
	],
	[#Rule 3
		 'templatecode', 2,
sub
#line 70 "Parser.yp"
{ $_[0]->rollback_token; $_[1]        }
	],
	[#Rule 4
		 'templatecode', 1,
sub
#line 71 "Parser.yp"
{ $_[1]                               }
	],
	[#Rule 5
		 'templatecode', 1,
sub
#line 72 "Parser.yp"
{ $_[1]                               }
	],
	[#Rule 6
		 'eventblock', 2,
sub
#line 75 "Parser.yp"
{ $factory->block([ @{$_[1]}, $_[2] ])}
	],
	[#Rule 7
		 'eventblock', 1,
sub
#line 76 "Parser.yp"
{ $factory->block( [$_[1]] )          }
	],
	[#Rule 8
		 'finalblock', 1,
sub
#line 79 "Parser.yp"
{ $factory->block([ @{$_[1]}, 
                                      $factory->event_finalize() ])       }
	],
	[#Rule 9
		 'finalblock', 0,
sub
#line 81 "Parser.yp"
{ $factory->block( [
                                      $factory->event_finalize() ])       }
	],
	[#Rule 10
		 'block', 1,
sub
#line 85 "Parser.yp"
{ $factory->block($_[1])              }
	],
	[#Rule 11
		 'block', 0,
sub
#line 86 "Parser.yp"
{ $factory->block()                   }
	],
	[#Rule 12
		 'chunks', 2,
sub
#line 89 "Parser.yp"
{ push(@{$_[1]}, $_[2]) 
                                        if defined $_[2]; $_[1]           }
	],
	[#Rule 13
		 'chunks', 1,
sub
#line 91 "Parser.yp"
{ defined $_[1] ? [ $_[1] ] : [ ]     }
	],
	[#Rule 14
		 'event', 1, undef
	],
	[#Rule 15
		 'event', 1, undef
	],
	[#Rule 16
		 'event', 1, undef
	],
	[#Rule 17
		 'event_plug', 4,
sub
#line 100 "Parser.yp"
{ $_[0]->location() .
                                      $factory->define_event(
                                        $_[2]->[0], $_[2]->[1], $_[4])    }
	],
	[#Rule 18
		 'eventvar', 1,
sub
#line 105 "Parser.yp"
{ [ undef, $factory->ident($_[1]) ]   }
	],
	[#Rule 19
		 'eventvar', 3,
sub
#line 106 "Parser.yp"
{ [ $_[1], $factory->ident($_[3]) ]   }
	],
	[#Rule 20
		 'chunk', 1,
sub
#line 109 "Parser.yp"
{ $factory->textblock($_[1])          }
	],
	[#Rule 21
		 'chunk', 2,
sub
#line 110 "Parser.yp"
{ return '' unless $_[1];
                                      $_[0]->location() . $_[1];
                                    }
	],
	[#Rule 22
		 'statement', 1, undef
	],
	[#Rule 23
		 'statement', 1, undef
	],
	[#Rule 24
		 'statement', 1, undef
	],
	[#Rule 25
		 'statement', 1, undef
	],
	[#Rule 26
		 'statement', 1, undef
	],
	[#Rule 27
		 'statement', 1, undef
	],
	[#Rule 28
		 'statement', 1, undef
	],
	[#Rule 29
		 'statement', 1, undef
	],
	[#Rule 30
		 'statement', 1,
sub
#line 123 "Parser.yp"
{ $factory->get($_[1])                }
	],
	[#Rule 31
		 'statement', 2,
sub
#line 124 "Parser.yp"
{ $_[0]->add_metadata($_[2]);         }
	],
	[#Rule 32
		 'statement', 0, undef
	],
	[#Rule 33
		 'directive', 1,
sub
#line 128 "Parser.yp"
{ $factory->set($_[1])                }
	],
	[#Rule 34
		 'directive', 1, undef
	],
	[#Rule 35
		 'directive', 1, undef
	],
	[#Rule 36
		 'directive', 1, undef
	],
	[#Rule 37
		 'directive', 1, undef
	],
	[#Rule 38
		 'directive', 1, undef
	],
	[#Rule 39
		 'directive', 1, undef
	],
	[#Rule 40
		 'atomexpr', 1,
sub
#line 142 "Parser.yp"
{ $factory->get($_[1])                }
	],
	[#Rule 41
		 'atomexpr', 1, undef
	],
	[#Rule 42
		 'atomdir', 2,
sub
#line 146 "Parser.yp"
{ $factory->get($_[2])                }
	],
	[#Rule 43
		 'atomdir', 2,
sub
#line 147 "Parser.yp"
{ $factory->call($_[2])               }
	],
	[#Rule 44
		 'atomdir', 2,
sub
#line 148 "Parser.yp"
{ $factory->set($_[2])                }
	],
	[#Rule 45
		 'atomdir', 2,
sub
#line 149 "Parser.yp"
{ $factory->default($_[2])            }
	],
	[#Rule 46
		 'atomdir', 2,
sub
#line 150 "Parser.yp"
{ $factory->insert($_[2])             }
	],
	[#Rule 47
		 'atomdir', 2,
sub
#line 151 "Parser.yp"
{ $factory->include($_[2])            }
	],
	[#Rule 48
		 'atomdir', 2,
sub
#line 152 "Parser.yp"
{ $factory->process($_[2])            }
	],
	[#Rule 49
		 'atomdir', 2,
sub
#line 153 "Parser.yp"
{ $factory->throw($_[2])              }
	],
	[#Rule 50
		 'atomdir', 1,
sub
#line 154 "Parser.yp"
{ $factory->return()                  }
	],
	[#Rule 51
		 'atomdir', 1,
sub
#line 155 "Parser.yp"
{ $factory->stop()                    }
	],
	[#Rule 52
		 'atomdir', 1,
sub
#line 156 "Parser.yp"
{ "\$output = '';";                   }
	],
	[#Rule 53
		 'atomdir', 1,
sub
#line 157 "Parser.yp"
{ $_[0]->block_label('last ', ';')    }
	],
	[#Rule 54
		 'atomdir', 1,
sub
#line 158 "Parser.yp"
{ $_[0]->in_block('FOR')
                                        ? $factory->next($_[0]->block_label)
                                        : $_[0]->block_label('next ', ';') }
	],
	[#Rule 55
		 'atomdir', 2,
sub
#line 161 "Parser.yp"
{ if ($_[2]->[0]->[0] =~ /^'(on|off)'$/) {
                                          $_[0]->{ DEBUG_DIRS } = ($1 eq 'on');
                                          $factory->debug($_[2]);
                                      }
                                      else {
                                          $_[0]->{ DEBUG_DIRS } ? $factory->debug($_[2]) : '';
                                      }
                                    }
	],
	[#Rule 56
		 'atomdir', 1, undef
	],
	[#Rule 57
		 'atomdir', 1, undef
	],
	[#Rule 58
		 'condition', 6,
sub
#line 174 "Parser.yp"
{ $factory->if(@_[2, 4, 5])           }
	],
	[#Rule 59
		 'condition', 3,
sub
#line 175 "Parser.yp"
{ $factory->if(@_[3, 1])              }
	],
	[#Rule 60
		 'condition', 6,
sub
#line 177 "Parser.yp"
{ $factory->if("!($_[2])", @_[4, 5])  }
	],
	[#Rule 61
		 'condition', 3,
sub
#line 178 "Parser.yp"
{ $factory->if("!($_[3])", $_[1])     }
	],
	[#Rule 62
		 'else', 5,
sub
#line 182 "Parser.yp"
{ unshift(@{$_[5]}, [ @_[2, 4] ]);
                                      $_[5];                              }
	],
	[#Rule 63
		 'else', 3,
sub
#line 184 "Parser.yp"
{ [ $_[3] ]                           }
	],
	[#Rule 64
		 'else', 0,
sub
#line 185 "Parser.yp"
{ [ undef ]                           }
	],
	[#Rule 65
		 'event_switch', 7,
sub
#line 190 "Parser.yp"
{ $factory->event_switch(@_[2, 5, 7]) }
	],
	[#Rule 66
		 'switch', 6,
sub
#line 194 "Parser.yp"
{ $factory->switch(@_[2, 5])          }
	],
	[#Rule 67
		 'eventcase', 1,
sub
#line 197 "Parser.yp"
{ push( @{$_[1]}, undef ); $_[1]      }
	],
	[#Rule 68
		 'eventcase', 2,
sub
#line 198 "Parser.yp"
{ push( @{$_[1]}, $_[2] ); $_[1]      }
	],
	[#Rule 69
		 'eventcase', 2,
sub
#line 199 "Parser.yp"
{ push( @{$_[1]}, $_[2] ); $_[1]      }
	],
	[#Rule 70
		 'eventcase', 2,
sub
#line 200 "Parser.yp"
{ push( @{$_[1]}, $_[2] ); $_[1]      }
	],
	[#Rule 71
		 'eventcaselst', 2,
sub
#line 204 "Parser.yp"
{ push( @{$_[1]}, $_[2] ); $_[1]      }
	],
	[#Rule 72
		 'eventcaselst', 2,
sub
#line 205 "Parser.yp"
{ push( @{$_[1]}, $_[2] ); $_[1]      }
	],
	[#Rule 73
		 'eventcaselst', 2,
sub
#line 206 "Parser.yp"
{ push( @{$_[1]}, $_[2] ); $_[1]      }
	],
	[#Rule 74
		 'eventcaselst', 1,
sub
#line 209 "Parser.yp"
{ [ $_[1] ]                           }
	],
	[#Rule 75
		 'eventcaselst', 1,
sub
#line 210 "Parser.yp"
{ [ $_[1] ]                           }
	],
	[#Rule 76
		 'case', 2,
sub
#line 214 "Parser.yp"
{ push( @{$_[1]}, $_[2] ); $_[1]      }
	],
	[#Rule 77
		 'case', 1,
sub
#line 215 "Parser.yp"
{ push( @{$_[1]}, undef ); $_[1]      }
	],
	[#Rule 78
		 'caselst', 2,
sub
#line 218 "Parser.yp"
{ push( @{$_[1]}, $_[2] ); $_[1]      }
	],
	[#Rule 79
		 'caselst', 1,
sub
#line 219 "Parser.yp"
{ [ $_[1] ]                           }
	],
	[#Rule 80
		 'eventdefcase', 4,
sub
#line 223 "Parser.yp"
{ [ $_[4] ]                       }
	],
	[#Rule 81
		 'eventdefcase', 3,
sub
#line 224 "Parser.yp"
{ [ $_[3] ]                       }
	],
	[#Rule 82
		 'defcase', 4,
sub
#line 228 "Parser.yp"
{ $_[4]                           }
	],
	[#Rule 83
		 'defcase', 3,
sub
#line 229 "Parser.yp"
{ $_[3]                           }
	],
	[#Rule 84
		 'eventonecase', 4,
sub
#line 233 "Parser.yp"
{ [ $_[2], $_[4], 1 ]                 }
	],
	[#Rule 85
		 'onecase', 4,
sub
#line 236 "Parser.yp"
{ [ $_[2], $_[4] ]                    }
	],
	[#Rule 86
		 'event_loop', 5,
sub
#line 241 "Parser.yp"
{ $factory->event_while(@_[1, 3, 5],
                                      $_[0]->leave_block)                      }
	],
	[#Rule 87
		 'loop', 1,
sub
#line 245 "Parser.yp"
{ $_[1]                               }
	],
	[#Rule 88
		 'loop', 1,
sub
#line 246 "Parser.yp"
{ $_[1]                               }
	],
	[#Rule 89
		 'atomloop', 3,
sub
#line 249 "Parser.yp"
{ $factory->foreach(@{$_[3]}, $_[1])  }
	],
	[#Rule 90
		 'atomloop', 3,
sub
#line 250 "Parser.yp"
{ $factory->while(@_[3, 1]) }
	],
	[#Rule 91
		 'loopwf', 4,
sub
#line 254 "Parser.yp"
{ $factory->foreach(@{$_[1]}, $_[3], $_[0]->leave_block)  }
	],
	[#Rule 92
		 'loopwf', 4,
sub
#line 256 "Parser.yp"
{ $factory->while(@_[1, 3], $_[0]->leave_block) }
	],
	[#Rule 93
		 'loopforvar', 2,
sub
#line 259 "Parser.yp"
{ $_[0]->enter_block('FOR'); $_[2]    }
	],
	[#Rule 94
		 'loopwhilevar', 2,
sub
#line 262 "Parser.yp"
{ $_[0]->enter_block('WHILE'); $_[2]  }
	],
	[#Rule 95
		 'loopvar', 4,
sub
#line 265 "Parser.yp"
{ [ @_[1, 3, 4] ]                     }
	],
	[#Rule 96
		 'loopvar', 4,
sub
#line 266 "Parser.yp"
{ [ @_[1, 3, 4] ]                     }
	],
	[#Rule 97
		 'loopvar', 2,
sub
#line 267 "Parser.yp"
{ [ 0, @_[1, 2] ]                     }
	],
	[#Rule 98
		 'wrapper', 5,
sub
#line 271 "Parser.yp"
{ $factory->wrapper(@_[2, 4])         }
	],
	[#Rule 99
		 'wrapper', 3,
sub
#line 273 "Parser.yp"
{ $factory->wrapper(@_[3, 1])         }
	],
	[#Rule 100
		 'try', 5,
sub
#line 277 "Parser.yp"
{ $factory->try(@_[3, 4])             }
	],
	[#Rule 101
		 'final', 5,
sub
#line 281 "Parser.yp"
{ unshift(@{$_[5]}, [ @_[2,4] ]);
                                      $_[5];                              }
	],
	[#Rule 102
		 'final', 5,
sub
#line 284 "Parser.yp"
{ unshift(@{$_[5]}, [ undef, $_[4] ]);
                                      $_[5];                              }
	],
	[#Rule 103
		 'final', 4,
sub
#line 287 "Parser.yp"
{ unshift(@{$_[4]}, [ undef, $_[3] ]);
                                      $_[4];                              }
	],
	[#Rule 104
		 'final', 3,
sub
#line 289 "Parser.yp"
{ [ $_[3] ]                           }
	],
	[#Rule 105
		 'final', 0,
sub
#line 290 "Parser.yp"
{ [ 0 ] }
	],
	[#Rule 106
		 'use', 2,
sub
#line 293 "Parser.yp"
{ $factory->use($_[2])                }
	],
	[#Rule 107
		 '@1-3', 0,
sub
#line 296 "Parser.yp"
{ $_[0]->push_defblock();             }
	],
	[#Rule 108
		 'view', 6,
sub
#line 297 "Parser.yp"
{ $factory->view(@_[2,5], 
                                                     $_[0]->pop_defblock) }
	],
	[#Rule 109
		 '@2-2', 0,
sub
#line 301 "Parser.yp"
{ ${$_[0]->{ INPERL }}++;             }
	],
	[#Rule 110
		 'perl', 5,
sub
#line 302 "Parser.yp"
{ ${$_[0]->{ INPERL }}--;
                                      $_[0]->{ EVAL_PERL } 
                                      ? $factory->perl($_[4])             
                                      : $factory->no_perl();              }
	],
	[#Rule 111
		 '@3-1', 0,
sub
#line 308 "Parser.yp"
{ ${$_[0]->{ INPERL }}++; 
                                      $rawstart = ${$_[0]->{'LINE'}};     }
	],
	[#Rule 112
		 'rawperl', 5,
sub
#line 310 "Parser.yp"
{ ${$_[0]->{ INPERL }}--;
                                      $_[0]->{ EVAL_PERL } 
                                      ? $factory->rawperl($_[4], $rawstart)
                                      : $factory->no_perl();              }
	],
	[#Rule 113
		 'filter', 5,
sub
#line 317 "Parser.yp"
{ $factory->filter(@_[2,4])           }
	],
	[#Rule 114
		 'filter', 3,
sub
#line 319 "Parser.yp"
{ $factory->filter(@_[3,1])           }
	],
	[#Rule 115
		 'defblock', 5,
sub
#line 324 "Parser.yp"
{ my $name = join('/', @{ $_[0]->{ DEFBLOCKS } });
                                      pop(@{ $_[0]->{ DEFBLOCKS } });
                                      $_[0]->define_block($name, $_[4]); 
                                      undef
                                    }
	],
	[#Rule 116
		 'defblockname', 2,
sub
#line 331 "Parser.yp"
{ push(@{ $_[0]->{ DEFBLOCKS } }, $_[2]);
                                      $_[2];
                                    }
	],
	[#Rule 117
		 'blockname', 1, undef
	],
	[#Rule 118
		 'blockname', 1,
sub
#line 337 "Parser.yp"
{ $_[1] =~ s/^'(.*)'$/$1/; $_[1]      }
	],
	[#Rule 119
		 'blockargs', 1, undef
	],
	[#Rule 120
		 'blockargs', 0, undef
	],
	[#Rule 121
		 'anonblock', 5,
sub
#line 345 "Parser.yp"
{ local $" = ', ';
                                      print STDERR "experimental block args: [@{ $_[2] }]\n"
                                          if $_[2];
                                      $factory->anon_block($_[4])         }
	],
	[#Rule 122
		 'capture', 3,
sub
#line 351 "Parser.yp"
{ $factory->capture(@_[1, 3])         }
	],
	[#Rule 123
		 'macro', 6,
sub
#line 355 "Parser.yp"
{ $factory->macro(@_[2, 6, 4])        }
	],
	[#Rule 124
		 'macro', 3,
sub
#line 356 "Parser.yp"
{ $factory->macro(@_[2, 3])           }
	],
	[#Rule 125
		 'mdir', 1, undef
	],
	[#Rule 126
		 'mdir', 4,
sub
#line 360 "Parser.yp"
{ $_[3]                               }
	],
	[#Rule 127
		 'margs', 2,
sub
#line 363 "Parser.yp"
{ push(@{$_[1]}, $_[2]); $_[1]        }
	],
	[#Rule 128
		 'margs', 2,
sub
#line 364 "Parser.yp"
{ $_[1]                               }
	],
	[#Rule 129
		 'margs', 1,
sub
#line 365 "Parser.yp"
{ [ $_[1] ]                           }
	],
	[#Rule 130
		 'metadata', 2,
sub
#line 368 "Parser.yp"
{ push(@{$_[1]}, @{$_[2]}); $_[1]     }
	],
	[#Rule 131
		 'metadata', 2, undef
	],
	[#Rule 132
		 'metadata', 1, undef
	],
	[#Rule 133
		 'meta', 3,
sub
#line 373 "Parser.yp"
{ for ($_[3]) { s/^'//; s/'$//; 
                                                       s/\\'/'/g  }; 
                                         [ @_[1,3] ] }
	],
	[#Rule 134
		 'meta', 5,
sub
#line 376 "Parser.yp"
{ [ @_[1,4] ] }
	],
	[#Rule 135
		 'meta', 3,
sub
#line 377 "Parser.yp"
{ [ @_[1,3] ] }
	],
	[#Rule 136
		 'term', 1, undef
	],
	[#Rule 137
		 'term', 1, undef
	],
	[#Rule 138
		 'lterm', 3,
sub
#line 389 "Parser.yp"
{ "[ $_[2] ]"                         }
	],
	[#Rule 139
		 'lterm', 3,
sub
#line 390 "Parser.yp"
{ "[ $_[2] ]"                         }
	],
	[#Rule 140
		 'lterm', 2,
sub
#line 391 "Parser.yp"
{ "[ ]"                               }
	],
	[#Rule 141
		 'lterm', 3,
sub
#line 392 "Parser.yp"
{ "{ $_[2]  }"                        }
	],
	[#Rule 142
		 'sterm', 1,
sub
#line 395 "Parser.yp"
{ $factory->ident($_[1])              }
	],
	[#Rule 143
		 'sterm', 2,
sub
#line 396 "Parser.yp"
{ $factory->identref($_[2])           }
	],
	[#Rule 144
		 'sterm', 3,
sub
#line 397 "Parser.yp"
{ $factory->quoted($_[2])             }
	],
	[#Rule 145
		 'sterm', 1, undef
	],
	[#Rule 146
		 'sterm', 1, undef
	],
	[#Rule 147
		 'list', 2,
sub
#line 402 "Parser.yp"
{ "$_[1], $_[2]"                      }
	],
	[#Rule 148
		 'list', 2, undef
	],
	[#Rule 149
		 'list', 1, undef
	],
	[#Rule 150
		 'range', 3,
sub
#line 407 "Parser.yp"
{ $_[1] . '..' . $_[3]                }
	],
	[#Rule 151
		 'hash', 1, undef
	],
	[#Rule 152
		 'hash', 0,
sub
#line 412 "Parser.yp"
{ "" }
	],
	[#Rule 153
		 'params', 2,
sub
#line 415 "Parser.yp"
{ "$_[1], $_[2]"                      }
	],
	[#Rule 154
		 'params', 2, undef
	],
	[#Rule 155
		 'params', 1, undef
	],
	[#Rule 156
		 'param', 3,
sub
#line 420 "Parser.yp"
{ "$_[1] => $_[3]"                    }
	],
	[#Rule 157
		 'param', 3,
sub
#line 421 "Parser.yp"
{ "$_[1] => $_[3]"                    }
	],
	[#Rule 158
		 'ident', 3,
sub
#line 424 "Parser.yp"
{ push(@{$_[1]}, @{$_[3]}); $_[1]     }
	],
	[#Rule 159
		 'ident', 3,
sub
#line 425 "Parser.yp"
{ push(@{$_[1]}, 
                                           map {($_, 0)} split(/\./, $_[3]));
                                      $_[1];                              }
	],
	[#Rule 160
		 'ident', 1, undef
	],
	[#Rule 161
		 'node', 1,
sub
#line 431 "Parser.yp"
{ [ $_[1], 0 ]                        }
	],
	[#Rule 162
		 'node', 4,
sub
#line 432 "Parser.yp"
{ [ $_[1], $factory->args($_[3]) ]    }
	],
	[#Rule 163
		 'item', 1,
sub
#line 435 "Parser.yp"
{ "'$_[1]'"                           }
	],
	[#Rule 164
		 'item', 3,
sub
#line 436 "Parser.yp"
{ $_[2]                               }
	],
	[#Rule 165
		 'item', 2,
sub
#line 437 "Parser.yp"
{ $_[0]->{ V1DOLLAR }
                                       ? "'$_[2]'" 
                                       : $factory->ident(["'$_[2]'", 0])  }
	],
	[#Rule 166
		 'expr', 3,
sub
#line 442 "Parser.yp"
{ "$_[1] $_[2] $_[3]"                 }
	],
	[#Rule 167
		 'expr', 3,
sub
#line 443 "Parser.yp"
{ "$_[1] $_[2] $_[3]"                 }
	],
	[#Rule 168
		 'expr', 3,
sub
#line 444 "Parser.yp"
{ "$_[1] $_[2] $_[3]"                 }
	],
	[#Rule 169
		 'expr', 3,
sub
#line 445 "Parser.yp"
{ "int($_[1] / $_[3])"                }
	],
	[#Rule 170
		 'expr', 3,
sub
#line 446 "Parser.yp"
{ "$_[1] % $_[3]"                     }
	],
	[#Rule 171
		 'expr', 3,
sub
#line 447 "Parser.yp"
{ "$_[1] $CMPOP{ $_[2] } $_[3]"       }
	],
	[#Rule 172
		 'expr', 3,
sub
#line 448 "Parser.yp"
{ "$_[1]  . $_[3]"                    }
	],
	[#Rule 173
		 'expr', 3,
sub
#line 449 "Parser.yp"
{ "$_[1] && $_[3]"                    }
	],
	[#Rule 174
		 'expr', 3,
sub
#line 450 "Parser.yp"
{ "$_[1] || $_[3]"                    }
	],
	[#Rule 175
		 'expr', 2,
sub
#line 451 "Parser.yp"
{ "! $_[2]"                           }
	],
	[#Rule 176
		 'expr', 5,
sub
#line 452 "Parser.yp"
{ "$_[1] ? $_[3] : $_[5]"             }
	],
	[#Rule 177
		 'expr', 3,
sub
#line 453 "Parser.yp"
{ $factory->assign(@{$_[2]})          }
	],
	[#Rule 178
		 'expr', 3,
sub
#line 454 "Parser.yp"
{ "($_[2])"                           }
	],
	[#Rule 179
		 'expr', 1, undef
	],
	[#Rule 180
		 'setlist', 2,
sub
#line 458 "Parser.yp"
{ push(@{$_[1]}, @{$_[2]}); $_[1]     }
	],
	[#Rule 181
		 'setlist', 2, undef
	],
	[#Rule 182
		 'setlist', 1, undef
	],
	[#Rule 183
		 'assign', 3,
sub
#line 464 "Parser.yp"
{ [ $_[1], $_[3] ]                    }
	],
	[#Rule 184
		 'assign', 3,
sub
#line 465 "Parser.yp"
{ [ @_[1,3] ]                         }
	],
	[#Rule 185
		 'args', 2,
sub
#line 472 "Parser.yp"
{ push(@{$_[1]}, $_[2]); $_[1]        }
	],
	[#Rule 186
		 'args', 2,
sub
#line 473 "Parser.yp"
{ push(@{$_[1]->[0]}, $_[2]); $_[1]   }
	],
	[#Rule 187
		 'args', 4,
sub
#line 474 "Parser.yp"
{ push(@{$_[1]->[0]}, "'', " . 
                                      $factory->assign(@_[2,4])); $_[1]  }
	],
	[#Rule 188
		 'args', 2,
sub
#line 476 "Parser.yp"
{ $_[1]                               }
	],
	[#Rule 189
		 'args', 0,
sub
#line 477 "Parser.yp"
{ [ [ ] ]                             }
	],
	[#Rule 190
		 'lnameargs', 3,
sub
#line 487 "Parser.yp"
{ push(@{$_[3]}, $_[1]); $_[3]        }
	],
	[#Rule 191
		 'lnameargs', 1, undef
	],
	[#Rule 192
		 'lvalue', 1, undef
	],
	[#Rule 193
		 'lvalue', 3,
sub
#line 492 "Parser.yp"
{ $factory->quoted($_[2])             }
	],
	[#Rule 194
		 'lvalue', 1, undef
	],
	[#Rule 195
		 'nameargs', 3,
sub
#line 496 "Parser.yp"
{ [ [$factory->ident($_[2])], $_[3] ]   }
	],
	[#Rule 196
		 'nameargs', 2,
sub
#line 497 "Parser.yp"
{ [ @_[1,2] ] }
	],
	[#Rule 197
		 'nameargs', 4,
sub
#line 498 "Parser.yp"
{ [ @_[1,3] ] }
	],
	[#Rule 198
		 'names', 3,
sub
#line 501 "Parser.yp"
{ push(@{$_[1]}, $_[3]); $_[1] }
	],
	[#Rule 199
		 'names', 1,
sub
#line 502 "Parser.yp"
{ [ $_[1] ]                    }
	],
	[#Rule 200
		 'name', 3,
sub
#line 505 "Parser.yp"
{ $factory->quoted($_[2])  }
	],
	[#Rule 201
		 'name', 1,
sub
#line 506 "Parser.yp"
{ "'$_[1]'" }
	],
	[#Rule 202
		 'name', 1, undef
	],
	[#Rule 203
		 'filename', 3,
sub
#line 510 "Parser.yp"
{ "$_[1].$_[3]" }
	],
	[#Rule 204
		 'filename', 1, undef
	],
	[#Rule 205
		 'filepart', 1, undef
	],
	[#Rule 206
		 'filepart', 1, undef
	],
	[#Rule 207
		 'filepart', 1, undef
	],
	[#Rule 208
		 'quoted', 2,
sub
#line 524 "Parser.yp"
{ push(@{$_[1]}, $_[2]) 
                                          if defined $_[2]; $_[1]         }
	],
	[#Rule 209
		 'quoted', 0,
sub
#line 526 "Parser.yp"
{ [ ]                                 }
	],
	[#Rule 210
		 'quotable', 1,
sub
#line 529 "Parser.yp"
{ $factory->ident($_[1])              }
	],
	[#Rule 211
		 'quotable', 1,
sub
#line 530 "Parser.yp"
{ $factory->text($_[1])               }
	],
	[#Rule 212
		 'quotable', 1,
sub
#line 531 "Parser.yp"
{ undef                               }
	]
];



1;

__END__

=head1 NAME

Template::Grammar - Parser state/rule tables for the TT grammar

=head1 SYNOPSIS

    # no user serviceable parts inside

=head1 DESCRIPTION

This module defines the state and rule tables that the L<Template::Parser>
module uses to parse templates.  It is generated from a YACC-like grammar
using the C<Parse::Yapp> module.  The F<parser> sub-directory of the 
Template Toolkit source distribution contains the grammar and other 
files required to generate this module.

But you don't need to worry about any of that unless you're planning to 
modify the Template Toolkit language.

=head1 AUTHOR

Andy Wardley E<lt>abw@wardley.orgE<gt>

L<http://wardley.org/>

=head1 COPYRIGHT

Copyright (C) 1996-2007 Andy Wardley.  All Rights Reserved.

This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.

=head1 SEE ALSO

L<Template::Parser>

=cut

# Local Variables:
# mode: perl
# perl-indent-level: 4
# indent-tabs-mode: nil
# End:
#
# vim: expandtab shiftwidth=4:










